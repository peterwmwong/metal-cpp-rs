/* automatically generated by rust-bindgen 0.59.2 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub type __darwin_intptr_t = ::std::os::raw::c_long;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod __fs {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        pub mod __variant_detail {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct objc_class {
        _unused: [u8; 0],
    }
    pub type Class = *mut root::objc_class;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct objc_object {
        pub isa: root::Class,
    }
    pub type id = *mut root::objc_object;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct objc_selector {
        _unused: [u8; 0],
    }
    pub type SEL = *mut root::objc_selector;
    pub mod MTL {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod Private {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub mod Class {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
            }
        }
        pub const PurgeableState_PurgeableStateKeepCurrent: root::MTL::PurgeableState = 1;
        pub const PurgeableState_PurgeableStateNonVolatile: root::MTL::PurgeableState = 2;
        pub const PurgeableState_PurgeableStateVolatile: root::MTL::PurgeableState = 3;
        pub const PurgeableState_PurgeableStateEmpty: root::MTL::PurgeableState = 4;
        pub type PurgeableState = root::NS::UInteger;
        pub const CPUCacheMode_CPUCacheModeDefaultCache: root::MTL::CPUCacheMode = 0;
        pub const CPUCacheMode_CPUCacheModeWriteCombined: root::MTL::CPUCacheMode = 1;
        pub type CPUCacheMode = root::NS::UInteger;
        pub const StorageMode_StorageModeShared: root::MTL::StorageMode = 0;
        pub const StorageMode_StorageModeManaged: root::MTL::StorageMode = 1;
        pub const StorageMode_StorageModePrivate: root::MTL::StorageMode = 2;
        pub const StorageMode_StorageModeMemoryless: root::MTL::StorageMode = 3;
        pub type StorageMode = root::NS::UInteger;
        pub const HazardTrackingMode_HazardTrackingModeDefault: root::MTL::HazardTrackingMode = 0;
        pub const HazardTrackingMode_HazardTrackingModeUntracked: root::MTL::HazardTrackingMode = 1;
        pub const HazardTrackingMode_HazardTrackingModeTracked: root::MTL::HazardTrackingMode = 2;
        pub type HazardTrackingMode = root::NS::UInteger;
        pub type ResourceOptions = root::NS::UInteger;
        pub const MTL_ResourceStorageModeShared: root::MTL::ResourceOptions = 0;
        pub const MTL_ResourceHazardTrackingModeDefault: root::MTL::ResourceOptions = 0;
        pub const MTL_ResourceCPUCacheModeDefaultCache: root::MTL::ResourceOptions = 0;
        pub const MTL_ResourceOptionCPUCacheModeDefault: root::MTL::ResourceOptions = 0;
        pub const MTL_ResourceCPUCacheModeWriteCombined: root::MTL::ResourceOptions = 1;
        pub const MTL_ResourceOptionCPUCacheModeWriteCombined: root::MTL::ResourceOptions = 1;
        pub const MTL_ResourceStorageModeManaged: root::MTL::ResourceOptions = 16;
        pub const MTL_ResourceStorageModePrivate: root::MTL::ResourceOptions = 32;
        pub const MTL_ResourceStorageModeMemoryless: root::MTL::ResourceOptions = 48;
        pub const MTL_ResourceHazardTrackingModeUntracked: root::MTL::ResourceOptions = 256;
        pub const MTL_ResourceHazardTrackingModeTracked: root::MTL::ResourceOptions = 512;
        pub type _bindgen_ty_1 = root::MTL::ResourceOptions;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Resource {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource5labelEv"]
            pub fn Resource_label(this: *const root::MTL::Resource) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Resource8setLabelEPKN2NS6StringE"]
            pub fn Resource_setLabel(
                this: *mut root::MTL::Resource,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource6deviceEv"]
            pub fn Resource_device(this: *const root::MTL::Resource) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource12cpuCacheModeEv"]
            pub fn Resource_cpuCacheMode(
                this: *const root::MTL::Resource,
            ) -> root::MTL::CPUCacheMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource11storageModeEv"]
            pub fn Resource_storageMode(this: *const root::MTL::Resource)
                -> root::MTL::StorageMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource18hazardTrackingModeEv"]
            pub fn Resource_hazardTrackingMode(
                this: *const root::MTL::Resource,
            ) -> root::MTL::HazardTrackingMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource15resourceOptionsEv"]
            pub fn Resource_resourceOptions(
                this: *const root::MTL::Resource,
            ) -> root::MTL::ResourceOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Resource17setPurgeableStateENS_14PurgeableStateE"]
            pub fn Resource_setPurgeableState(
                this: *mut root::MTL::Resource,
                state: root::MTL::PurgeableState,
            ) -> root::MTL::PurgeableState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource4heapEv"]
            pub fn Resource_heap(this: *const root::MTL::Resource) -> *mut root::MTL::Heap;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource10heapOffsetEv"]
            pub fn Resource_heapOffset(this: *const root::MTL::Resource) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Resource13allocatedSizeEv"]
            pub fn Resource_allocatedSize(this: *const root::MTL::Resource) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Resource13makeAliasableEv"]
            pub fn Resource_makeAliasable(this: *mut root::MTL::Resource);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Resource11isAliasableEv"]
            pub fn Resource_isAliasable(this: *mut root::MTL::Resource) -> bool;
        }
        impl Resource {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                Resource_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                Resource_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                Resource_device(self)
            }
            #[inline]
            pub unsafe fn cpuCacheMode(&self) -> root::MTL::CPUCacheMode {
                Resource_cpuCacheMode(self)
            }
            #[inline]
            pub unsafe fn storageMode(&self) -> root::MTL::StorageMode {
                Resource_storageMode(self)
            }
            #[inline]
            pub unsafe fn hazardTrackingMode(&self) -> root::MTL::HazardTrackingMode {
                Resource_hazardTrackingMode(self)
            }
            #[inline]
            pub unsafe fn resourceOptions(&self) -> root::MTL::ResourceOptions {
                Resource_resourceOptions(self)
            }
            #[inline]
            pub unsafe fn setPurgeableState(
                &mut self,
                state: root::MTL::PurgeableState,
            ) -> root::MTL::PurgeableState {
                Resource_setPurgeableState(self, state)
            }
            #[inline]
            pub unsafe fn heap(&self) -> *mut root::MTL::Heap {
                Resource_heap(self)
            }
            #[inline]
            pub unsafe fn heapOffset(&self) -> root::NS::UInteger {
                Resource_heapOffset(self)
            }
            #[inline]
            pub unsafe fn allocatedSize(&self) -> root::NS::UInteger {
                Resource_allocatedSize(self)
            }
            #[inline]
            pub unsafe fn makeAliasable(&mut self) {
                Resource_makeAliasable(self)
            }
            #[inline]
            pub unsafe fn isAliasable(&mut self) -> bool {
                Resource_isAliasable(self)
            }
        }
        pub const AttributeFormat_AttributeFormatInvalid: root::MTL::AttributeFormat = 0;
        pub const AttributeFormat_AttributeFormatUChar2: root::MTL::AttributeFormat = 1;
        pub const AttributeFormat_AttributeFormatUChar3: root::MTL::AttributeFormat = 2;
        pub const AttributeFormat_AttributeFormatUChar4: root::MTL::AttributeFormat = 3;
        pub const AttributeFormat_AttributeFormatChar2: root::MTL::AttributeFormat = 4;
        pub const AttributeFormat_AttributeFormatChar3: root::MTL::AttributeFormat = 5;
        pub const AttributeFormat_AttributeFormatChar4: root::MTL::AttributeFormat = 6;
        pub const AttributeFormat_AttributeFormatUChar2Normalized: root::MTL::AttributeFormat = 7;
        pub const AttributeFormat_AttributeFormatUChar3Normalized: root::MTL::AttributeFormat = 8;
        pub const AttributeFormat_AttributeFormatUChar4Normalized: root::MTL::AttributeFormat = 9;
        pub const AttributeFormat_AttributeFormatChar2Normalized: root::MTL::AttributeFormat = 10;
        pub const AttributeFormat_AttributeFormatChar3Normalized: root::MTL::AttributeFormat = 11;
        pub const AttributeFormat_AttributeFormatChar4Normalized: root::MTL::AttributeFormat = 12;
        pub const AttributeFormat_AttributeFormatUShort2: root::MTL::AttributeFormat = 13;
        pub const AttributeFormat_AttributeFormatUShort3: root::MTL::AttributeFormat = 14;
        pub const AttributeFormat_AttributeFormatUShort4: root::MTL::AttributeFormat = 15;
        pub const AttributeFormat_AttributeFormatShort2: root::MTL::AttributeFormat = 16;
        pub const AttributeFormat_AttributeFormatShort3: root::MTL::AttributeFormat = 17;
        pub const AttributeFormat_AttributeFormatShort4: root::MTL::AttributeFormat = 18;
        pub const AttributeFormat_AttributeFormatUShort2Normalized: root::MTL::AttributeFormat = 19;
        pub const AttributeFormat_AttributeFormatUShort3Normalized: root::MTL::AttributeFormat = 20;
        pub const AttributeFormat_AttributeFormatUShort4Normalized: root::MTL::AttributeFormat = 21;
        pub const AttributeFormat_AttributeFormatShort2Normalized: root::MTL::AttributeFormat = 22;
        pub const AttributeFormat_AttributeFormatShort3Normalized: root::MTL::AttributeFormat = 23;
        pub const AttributeFormat_AttributeFormatShort4Normalized: root::MTL::AttributeFormat = 24;
        pub const AttributeFormat_AttributeFormatHalf2: root::MTL::AttributeFormat = 25;
        pub const AttributeFormat_AttributeFormatHalf3: root::MTL::AttributeFormat = 26;
        pub const AttributeFormat_AttributeFormatHalf4: root::MTL::AttributeFormat = 27;
        pub const AttributeFormat_AttributeFormatFloat: root::MTL::AttributeFormat = 28;
        pub const AttributeFormat_AttributeFormatFloat2: root::MTL::AttributeFormat = 29;
        pub const AttributeFormat_AttributeFormatFloat3: root::MTL::AttributeFormat = 30;
        pub const AttributeFormat_AttributeFormatFloat4: root::MTL::AttributeFormat = 31;
        pub const AttributeFormat_AttributeFormatInt: root::MTL::AttributeFormat = 32;
        pub const AttributeFormat_AttributeFormatInt2: root::MTL::AttributeFormat = 33;
        pub const AttributeFormat_AttributeFormatInt3: root::MTL::AttributeFormat = 34;
        pub const AttributeFormat_AttributeFormatInt4: root::MTL::AttributeFormat = 35;
        pub const AttributeFormat_AttributeFormatUInt: root::MTL::AttributeFormat = 36;
        pub const AttributeFormat_AttributeFormatUInt2: root::MTL::AttributeFormat = 37;
        pub const AttributeFormat_AttributeFormatUInt3: root::MTL::AttributeFormat = 38;
        pub const AttributeFormat_AttributeFormatUInt4: root::MTL::AttributeFormat = 39;
        pub const AttributeFormat_AttributeFormatInt1010102Normalized: root::MTL::AttributeFormat =
            40;
        pub const AttributeFormat_AttributeFormatUInt1010102Normalized: root::MTL::AttributeFormat =
            41;
        pub const AttributeFormat_AttributeFormatUChar4Normalized_BGRA: root::MTL::AttributeFormat =
            42;
        pub const AttributeFormat_AttributeFormatUChar: root::MTL::AttributeFormat = 45;
        pub const AttributeFormat_AttributeFormatChar: root::MTL::AttributeFormat = 46;
        pub const AttributeFormat_AttributeFormatUCharNormalized: root::MTL::AttributeFormat = 47;
        pub const AttributeFormat_AttributeFormatCharNormalized: root::MTL::AttributeFormat = 48;
        pub const AttributeFormat_AttributeFormatUShort: root::MTL::AttributeFormat = 49;
        pub const AttributeFormat_AttributeFormatShort: root::MTL::AttributeFormat = 50;
        pub const AttributeFormat_AttributeFormatUShortNormalized: root::MTL::AttributeFormat = 51;
        pub const AttributeFormat_AttributeFormatShortNormalized: root::MTL::AttributeFormat = 52;
        pub const AttributeFormat_AttributeFormatHalf: root::MTL::AttributeFormat = 53;
        pub type AttributeFormat = root::NS::UInteger;
        pub const IndexType_IndexTypeUInt16: root::MTL::IndexType = 0;
        pub const IndexType_IndexTypeUInt32: root::MTL::IndexType = 1;
        pub type IndexType = root::NS::UInteger;
        pub const StepFunction_StepFunctionConstant: root::MTL::StepFunction = 0;
        pub const StepFunction_StepFunctionPerVertex: root::MTL::StepFunction = 1;
        pub const StepFunction_StepFunctionPerInstance: root::MTL::StepFunction = 2;
        pub const StepFunction_StepFunctionPerPatch: root::MTL::StepFunction = 3;
        pub const StepFunction_StepFunctionPerPatchControlPoint: root::MTL::StepFunction = 4;
        pub const StepFunction_StepFunctionThreadPositionInGridX: root::MTL::StepFunction = 5;
        pub const StepFunction_StepFunctionThreadPositionInGridY: root::MTL::StepFunction = 6;
        pub const StepFunction_StepFunctionThreadPositionInGridXIndexed: root::MTL::StepFunction =
            7;
        pub const StepFunction_StepFunctionThreadPositionInGridYIndexed: root::MTL::StepFunction =
            8;
        pub type StepFunction = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct BufferLayoutDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22BufferLayoutDescriptor5allocEv"]
            pub fn BufferLayoutDescriptor_alloc() -> *mut root::MTL::BufferLayoutDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22BufferLayoutDescriptor4initEv"]
            pub fn BufferLayoutDescriptor_init(
                this: *mut root::MTL::BufferLayoutDescriptor,
            ) -> *mut root::MTL::BufferLayoutDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22BufferLayoutDescriptor6strideEv"]
            pub fn BufferLayoutDescriptor_stride(
                this: *const root::MTL::BufferLayoutDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22BufferLayoutDescriptor9setStrideEm"]
            pub fn BufferLayoutDescriptor_setStride(
                this: *mut root::MTL::BufferLayoutDescriptor,
                stride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22BufferLayoutDescriptor12stepFunctionEv"]
            pub fn BufferLayoutDescriptor_stepFunction(
                this: *const root::MTL::BufferLayoutDescriptor,
            ) -> root::MTL::StepFunction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22BufferLayoutDescriptor15setStepFunctionENS_12StepFunctionE"]
            pub fn BufferLayoutDescriptor_setStepFunction(
                this: *mut root::MTL::BufferLayoutDescriptor,
                stepFunction: root::MTL::StepFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22BufferLayoutDescriptor8stepRateEv"]
            pub fn BufferLayoutDescriptor_stepRate(
                this: *const root::MTL::BufferLayoutDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22BufferLayoutDescriptor11setStepRateEm"]
            pub fn BufferLayoutDescriptor_setStepRate(
                this: *mut root::MTL::BufferLayoutDescriptor,
                stepRate: root::NS::UInteger,
            );
        }
        impl BufferLayoutDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::BufferLayoutDescriptor {
                BufferLayoutDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::BufferLayoutDescriptor {
                BufferLayoutDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn stride(&self) -> root::NS::UInteger {
                BufferLayoutDescriptor_stride(self)
            }
            #[inline]
            pub unsafe fn setStride(&mut self, stride: root::NS::UInteger) {
                BufferLayoutDescriptor_setStride(self, stride)
            }
            #[inline]
            pub unsafe fn stepFunction(&self) -> root::MTL::StepFunction {
                BufferLayoutDescriptor_stepFunction(self)
            }
            #[inline]
            pub unsafe fn setStepFunction(&mut self, stepFunction: root::MTL::StepFunction) {
                BufferLayoutDescriptor_setStepFunction(self, stepFunction)
            }
            #[inline]
            pub unsafe fn stepRate(&self) -> root::NS::UInteger {
                BufferLayoutDescriptor_stepRate(self)
            }
            #[inline]
            pub unsafe fn setStepRate(&mut self, stepRate: root::NS::UInteger) {
                BufferLayoutDescriptor_setStepRate(self, stepRate)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct BufferLayoutDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27BufferLayoutDescriptorArray5allocEv"]
            pub fn BufferLayoutDescriptorArray_alloc() -> *mut root::MTL::BufferLayoutDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27BufferLayoutDescriptorArray4initEv"]
            pub fn BufferLayoutDescriptorArray_init(
                this: *mut root::MTL::BufferLayoutDescriptorArray,
            ) -> *mut root::MTL::BufferLayoutDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27BufferLayoutDescriptorArray6objectEm"]
            pub fn BufferLayoutDescriptorArray_object(
                this: *mut root::MTL::BufferLayoutDescriptorArray,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::BufferLayoutDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27BufferLayoutDescriptorArray9setObjectEPKNS_22BufferLayoutDescriptorEm"]
            pub fn BufferLayoutDescriptorArray_setObject(
                this: *mut root::MTL::BufferLayoutDescriptorArray,
                bufferDesc: *const root::MTL::BufferLayoutDescriptor,
                index: root::NS::UInteger,
            );
        }
        impl BufferLayoutDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::BufferLayoutDescriptorArray {
                BufferLayoutDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::BufferLayoutDescriptorArray {
                BufferLayoutDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::BufferLayoutDescriptor {
                BufferLayoutDescriptorArray_object(self, index)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                bufferDesc: *const root::MTL::BufferLayoutDescriptor,
                index: root::NS::UInteger,
            ) {
                BufferLayoutDescriptorArray_setObject(self, bufferDesc, index)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AttributeDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19AttributeDescriptor5allocEv"]
            pub fn AttributeDescriptor_alloc() -> *mut root::MTL::AttributeDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19AttributeDescriptor4initEv"]
            pub fn AttributeDescriptor_init(
                this: *mut root::MTL::AttributeDescriptor,
            ) -> *mut root::MTL::AttributeDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19AttributeDescriptor6formatEv"]
            pub fn AttributeDescriptor_format(
                this: *const root::MTL::AttributeDescriptor,
            ) -> root::MTL::AttributeFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19AttributeDescriptor9setFormatENS_15AttributeFormatE"]
            pub fn AttributeDescriptor_setFormat(
                this: *mut root::MTL::AttributeDescriptor,
                format: root::MTL::AttributeFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19AttributeDescriptor6offsetEv"]
            pub fn AttributeDescriptor_offset(
                this: *const root::MTL::AttributeDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19AttributeDescriptor9setOffsetEm"]
            pub fn AttributeDescriptor_setOffset(
                this: *mut root::MTL::AttributeDescriptor,
                offset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19AttributeDescriptor11bufferIndexEv"]
            pub fn AttributeDescriptor_bufferIndex(
                this: *const root::MTL::AttributeDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19AttributeDescriptor14setBufferIndexEm"]
            pub fn AttributeDescriptor_setBufferIndex(
                this: *mut root::MTL::AttributeDescriptor,
                bufferIndex: root::NS::UInteger,
            );
        }
        impl AttributeDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::AttributeDescriptor {
                AttributeDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::AttributeDescriptor {
                AttributeDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn format(&self) -> root::MTL::AttributeFormat {
                AttributeDescriptor_format(self)
            }
            #[inline]
            pub unsafe fn setFormat(&mut self, format: root::MTL::AttributeFormat) {
                AttributeDescriptor_setFormat(self, format)
            }
            #[inline]
            pub unsafe fn offset(&self) -> root::NS::UInteger {
                AttributeDescriptor_offset(self)
            }
            #[inline]
            pub unsafe fn setOffset(&mut self, offset: root::NS::UInteger) {
                AttributeDescriptor_setOffset(self, offset)
            }
            #[inline]
            pub unsafe fn bufferIndex(&self) -> root::NS::UInteger {
                AttributeDescriptor_bufferIndex(self)
            }
            #[inline]
            pub unsafe fn setBufferIndex(&mut self, bufferIndex: root::NS::UInteger) {
                AttributeDescriptor_setBufferIndex(self, bufferIndex)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AttributeDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24AttributeDescriptorArray5allocEv"]
            pub fn AttributeDescriptorArray_alloc() -> *mut root::MTL::AttributeDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24AttributeDescriptorArray4initEv"]
            pub fn AttributeDescriptorArray_init(
                this: *mut root::MTL::AttributeDescriptorArray,
            ) -> *mut root::MTL::AttributeDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24AttributeDescriptorArray6objectEm"]
            pub fn AttributeDescriptorArray_object(
                this: *mut root::MTL::AttributeDescriptorArray,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::AttributeDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24AttributeDescriptorArray9setObjectEPKNS_19AttributeDescriptorEm"]
            pub fn AttributeDescriptorArray_setObject(
                this: *mut root::MTL::AttributeDescriptorArray,
                attributeDesc: *const root::MTL::AttributeDescriptor,
                index: root::NS::UInteger,
            );
        }
        impl AttributeDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::AttributeDescriptorArray {
                AttributeDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::AttributeDescriptorArray {
                AttributeDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::AttributeDescriptor {
                AttributeDescriptorArray_object(self, index)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attributeDesc: *const root::MTL::AttributeDescriptor,
                index: root::NS::UInteger,
            ) {
                AttributeDescriptorArray_setObject(self, attributeDesc, index)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct StageInputOutputDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26StageInputOutputDescriptor5allocEv"]
            pub fn StageInputOutputDescriptor_alloc() -> *mut root::MTL::StageInputOutputDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26StageInputOutputDescriptor4initEv"]
            pub fn StageInputOutputDescriptor_init(
                this: *mut root::MTL::StageInputOutputDescriptor,
            ) -> *mut root::MTL::StageInputOutputDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26StageInputOutputDescriptor26stageInputOutputDescriptorEv"]
            pub fn StageInputOutputDescriptor_stageInputOutputDescriptor(
            ) -> *mut root::MTL::StageInputOutputDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL26StageInputOutputDescriptor7layoutsEv"]
            pub fn StageInputOutputDescriptor_layouts(
                this: *const root::MTL::StageInputOutputDescriptor,
            ) -> *mut root::MTL::BufferLayoutDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL26StageInputOutputDescriptor10attributesEv"]
            pub fn StageInputOutputDescriptor_attributes(
                this: *const root::MTL::StageInputOutputDescriptor,
            ) -> *mut root::MTL::AttributeDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL26StageInputOutputDescriptor9indexTypeEv"]
            pub fn StageInputOutputDescriptor_indexType(
                this: *const root::MTL::StageInputOutputDescriptor,
            ) -> root::MTL::IndexType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26StageInputOutputDescriptor12setIndexTypeENS_9IndexTypeE"]
            pub fn StageInputOutputDescriptor_setIndexType(
                this: *mut root::MTL::StageInputOutputDescriptor,
                indexType: root::MTL::IndexType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL26StageInputOutputDescriptor16indexBufferIndexEv"]
            pub fn StageInputOutputDescriptor_indexBufferIndex(
                this: *const root::MTL::StageInputOutputDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26StageInputOutputDescriptor19setIndexBufferIndexEm"]
            pub fn StageInputOutputDescriptor_setIndexBufferIndex(
                this: *mut root::MTL::StageInputOutputDescriptor,
                indexBufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26StageInputOutputDescriptor5resetEv"]
            pub fn StageInputOutputDescriptor_reset(
                this: *mut root::MTL::StageInputOutputDescriptor,
            );
        }
        impl StageInputOutputDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::StageInputOutputDescriptor {
                StageInputOutputDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::StageInputOutputDescriptor {
                StageInputOutputDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn stageInputOutputDescriptor() -> *mut root::MTL::StageInputOutputDescriptor
            {
                StageInputOutputDescriptor_stageInputOutputDescriptor()
            }
            #[inline]
            pub unsafe fn layouts(&self) -> *mut root::MTL::BufferLayoutDescriptorArray {
                StageInputOutputDescriptor_layouts(self)
            }
            #[inline]
            pub unsafe fn attributes(&self) -> *mut root::MTL::AttributeDescriptorArray {
                StageInputOutputDescriptor_attributes(self)
            }
            #[inline]
            pub unsafe fn indexType(&self) -> root::MTL::IndexType {
                StageInputOutputDescriptor_indexType(self)
            }
            #[inline]
            pub unsafe fn setIndexType(&mut self, indexType: root::MTL::IndexType) {
                StageInputOutputDescriptor_setIndexType(self, indexType)
            }
            #[inline]
            pub unsafe fn indexBufferIndex(&self) -> root::NS::UInteger {
                StageInputOutputDescriptor_indexBufferIndex(self)
            }
            #[inline]
            pub unsafe fn setIndexBufferIndex(&mut self, indexBufferIndex: root::NS::UInteger) {
                StageInputOutputDescriptor_setIndexBufferIndex(self, indexBufferIndex)
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                StageInputOutputDescriptor_reset(self)
            }
        }
        #[repr(C, packed)]
        #[derive(Copy, Clone)]
        pub struct PackedFloat3 {
            pub __bindgen_anon_1: root::MTL::PackedFloat3__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union PackedFloat3__bindgen_ty_1 {
            pub __bindgen_anon_1: root::MTL::PackedFloat3__bindgen_ty_1__bindgen_ty_1,
            pub elements: [f32; 3usize],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct PackedFloat3__bindgen_ty_1__bindgen_ty_1 {
            pub x: f32,
            pub y: f32,
            pub z: f32,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12PackedFloat3C1Ev"]
            pub fn PackedFloat3_PackedFloat3(this: *mut root::MTL::PackedFloat3);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12PackedFloat3C1Efff"]
            pub fn PackedFloat3_PackedFloat31(
                this: *mut root::MTL::PackedFloat3,
                x: f32,
                y: f32,
                z: f32,
            );
        }
        impl PackedFloat3 {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                PackedFloat3_PackedFloat3(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(x: f32, y: f32, z: f32) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                PackedFloat3_PackedFloat31(__bindgen_tmp.as_mut_ptr(), x, y, z);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C, packed)]
        #[derive(Copy, Clone)]
        pub struct PackedFloat4x3 {
            pub columns: [root::MTL::PackedFloat3; 4usize],
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14PackedFloat4x3C1Ev"]
            pub fn PackedFloat4x3_PackedFloat4x3(this: *mut root::MTL::PackedFloat4x3);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14PackedFloat4x3C1ERKNS_12PackedFloat3ES3_S3_S3_"]
            pub fn PackedFloat4x3_PackedFloat4x31(
                this: *mut root::MTL::PackedFloat4x3,
                col0: *const root::MTL::PackedFloat3,
                col1: *const root::MTL::PackedFloat3,
                col2: *const root::MTL::PackedFloat3,
                col3: *const root::MTL::PackedFloat3,
            );
        }
        impl PackedFloat4x3 {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                PackedFloat4x3_PackedFloat4x3(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                col0: *const root::MTL::PackedFloat3,
                col1: *const root::MTL::PackedFloat3,
                col2: *const root::MTL::PackedFloat3,
                col3: *const root::MTL::PackedFloat3,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                PackedFloat4x3_PackedFloat4x31(__bindgen_tmp.as_mut_ptr(), col0, col1, col2, col3);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C, packed)]
        #[derive(Copy, Clone)]
        pub struct AxisAlignedBoundingBox {
            pub min: root::MTL::PackedFloat3,
            pub max: root::MTL::PackedFloat3,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22AxisAlignedBoundingBoxC1Ev"]
            pub fn AxisAlignedBoundingBox_AxisAlignedBoundingBox(
                this: *mut root::MTL::AxisAlignedBoundingBox,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22AxisAlignedBoundingBoxC1ENS_12PackedFloat3E"]
            pub fn AxisAlignedBoundingBox_AxisAlignedBoundingBox1(
                this: *mut root::MTL::AxisAlignedBoundingBox,
                p: root::MTL::PackedFloat3,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22AxisAlignedBoundingBoxC1ENS_12PackedFloat3ES1_"]
            pub fn AxisAlignedBoundingBox_AxisAlignedBoundingBox2(
                this: *mut root::MTL::AxisAlignedBoundingBox,
                min: root::MTL::PackedFloat3,
                max: root::MTL::PackedFloat3,
            );
        }
        impl AxisAlignedBoundingBox {
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                AxisAlignedBoundingBox_AxisAlignedBoundingBox(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(p: root::MTL::PackedFloat3) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                AxisAlignedBoundingBox_AxisAlignedBoundingBox1(__bindgen_tmp.as_mut_ptr(), p);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(min: root::MTL::PackedFloat3, max: root::MTL::PackedFloat3) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                AxisAlignedBoundingBox_AxisAlignedBoundingBox2(
                    __bindgen_tmp.as_mut_ptr(),
                    min,
                    max,
                );
                __bindgen_tmp.assume_init()
            }
        }
        pub type AccelerationStructureUsage = root::NS::UInteger;
        pub const MTL_AccelerationStructureUsageNone: root::MTL::AccelerationStructureUsage = 0;
        pub const MTL_AccelerationStructureUsageRefit: root::MTL::AccelerationStructureUsage = 1;
        pub const MTL_AccelerationStructureUsagePreferFastBuild:
            root::MTL::AccelerationStructureUsage = 2;
        pub const MTL_AccelerationStructureUsageExtendedLimits:
            root::MTL::AccelerationStructureUsage = 4;
        pub type _bindgen_ty_2 = root::MTL::AccelerationStructureUsage;
        pub type AccelerationStructureInstanceOptions = u32;
        pub const MTL_AccelerationStructureInstanceOptionNone:
            root::MTL::AccelerationStructureInstanceOptions = 0;
        pub const MTL_AccelerationStructureInstanceOptionDisableTriangleCulling:
            root::MTL::AccelerationStructureInstanceOptions = 1;
        pub const MTL_AccelerationStructureInstanceOptionTriangleFrontFacingWindingCounterClockwise : root :: MTL :: AccelerationStructureInstanceOptions = 2 ;
        pub const MTL_AccelerationStructureInstanceOptionOpaque:
            root::MTL::AccelerationStructureInstanceOptions = 4;
        pub const MTL_AccelerationStructureInstanceOptionNonOpaque:
            root::MTL::AccelerationStructureInstanceOptions = 8;
        pub type _bindgen_ty_3 = root::MTL::AccelerationStructureInstanceOptions;
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructureDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31AccelerationStructureDescriptor5allocEv"]
            pub fn AccelerationStructureDescriptor_alloc(
            ) -> *mut root::MTL::AccelerationStructureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31AccelerationStructureDescriptor4initEv"]
            pub fn AccelerationStructureDescriptor_init(
                this: *mut root::MTL::AccelerationStructureDescriptor,
            ) -> *mut root::MTL::AccelerationStructureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL31AccelerationStructureDescriptor5usageEv"]
            pub fn AccelerationStructureDescriptor_usage(
                this: *const root::MTL::AccelerationStructureDescriptor,
            ) -> root::MTL::AccelerationStructureUsage;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31AccelerationStructureDescriptor8setUsageEm"]
            pub fn AccelerationStructureDescriptor_setUsage(
                this: *mut root::MTL::AccelerationStructureDescriptor,
                usage: root::MTL::AccelerationStructureUsage,
            );
        }
        impl AccelerationStructureDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::AccelerationStructureDescriptor {
                AccelerationStructureDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::AccelerationStructureDescriptor {
                AccelerationStructureDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn usage(&self) -> root::MTL::AccelerationStructureUsage {
                AccelerationStructureDescriptor_usage(self)
            }
            #[inline]
            pub unsafe fn setUsage(&mut self, usage: root::MTL::AccelerationStructureUsage) {
                AccelerationStructureDescriptor_setUsage(self, usage)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructureGeometryDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39AccelerationStructureGeometryDescriptor5allocEv"]
            pub fn AccelerationStructureGeometryDescriptor_alloc(
            ) -> *mut root::MTL::AccelerationStructureGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39AccelerationStructureGeometryDescriptor4initEv"]
            pub fn AccelerationStructureGeometryDescriptor_init(
                this: *mut root::MTL::AccelerationStructureGeometryDescriptor,
            ) -> *mut root::MTL::AccelerationStructureGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39AccelerationStructureGeometryDescriptor31intersectionFunctionTableOffsetEv"]
            pub fn AccelerationStructureGeometryDescriptor_intersectionFunctionTableOffset(
                this: *const root::MTL::AccelerationStructureGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39AccelerationStructureGeometryDescriptor34setIntersectionFunctionTableOffsetEm"]
            pub fn AccelerationStructureGeometryDescriptor_setIntersectionFunctionTableOffset(
                this: *mut root::MTL::AccelerationStructureGeometryDescriptor,
                intersectionFunctionTableOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39AccelerationStructureGeometryDescriptor6opaqueEv"]
            pub fn AccelerationStructureGeometryDescriptor_opaque(
                this: *const root::MTL::AccelerationStructureGeometryDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39AccelerationStructureGeometryDescriptor9setOpaqueEb"]
            pub fn AccelerationStructureGeometryDescriptor_setOpaque(
                this: *mut root::MTL::AccelerationStructureGeometryDescriptor,
                opaque: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39AccelerationStructureGeometryDescriptor44allowDuplicateIntersectionFunctionInvocationEv"]
            pub fn AccelerationStructureGeometryDescriptor_allowDuplicateIntersectionFunctionInvocation(
                this: *const root::MTL::AccelerationStructureGeometryDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39AccelerationStructureGeometryDescriptor47setAllowDuplicateIntersectionFunctionInvocationEb"]
            pub fn AccelerationStructureGeometryDescriptor_setAllowDuplicateIntersectionFunctionInvocation(
                this: *mut root::MTL::AccelerationStructureGeometryDescriptor,
                allowDuplicateIntersectionFunctionInvocation: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39AccelerationStructureGeometryDescriptor5labelEv"]
            pub fn AccelerationStructureGeometryDescriptor_label(
                this: *const root::MTL::AccelerationStructureGeometryDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39AccelerationStructureGeometryDescriptor8setLabelEPKN2NS6StringE"]
            pub fn AccelerationStructureGeometryDescriptor_setLabel(
                this: *mut root::MTL::AccelerationStructureGeometryDescriptor,
                label: *const root::NS::String,
            );
        }
        impl AccelerationStructureGeometryDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::AccelerationStructureGeometryDescriptor {
                AccelerationStructureGeometryDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::AccelerationStructureGeometryDescriptor {
                AccelerationStructureGeometryDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn intersectionFunctionTableOffset(&self) -> root::NS::UInteger {
                AccelerationStructureGeometryDescriptor_intersectionFunctionTableOffset(self)
            }
            #[inline]
            pub unsafe fn setIntersectionFunctionTableOffset(
                &mut self,
                intersectionFunctionTableOffset: root::NS::UInteger,
            ) {
                AccelerationStructureGeometryDescriptor_setIntersectionFunctionTableOffset(
                    self,
                    intersectionFunctionTableOffset,
                )
            }
            #[inline]
            pub unsafe fn opaque(&self) -> bool {
                AccelerationStructureGeometryDescriptor_opaque(self)
            }
            #[inline]
            pub unsafe fn setOpaque(&mut self, opaque: bool) {
                AccelerationStructureGeometryDescriptor_setOpaque(self, opaque)
            }
            #[inline]
            pub unsafe fn allowDuplicateIntersectionFunctionInvocation(&self) -> bool {
                AccelerationStructureGeometryDescriptor_allowDuplicateIntersectionFunctionInvocation(
                    self,
                )
            }
            #[inline]
            pub unsafe fn setAllowDuplicateIntersectionFunctionInvocation(
                &mut self,
                allowDuplicateIntersectionFunctionInvocation: bool,
            ) {
                AccelerationStructureGeometryDescriptor_setAllowDuplicateIntersectionFunctionInvocation (self , allowDuplicateIntersectionFunctionInvocation)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                AccelerationStructureGeometryDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                AccelerationStructureGeometryDescriptor_setLabel(self, label)
            }
        }
        pub const MotionBorderMode_MotionBorderModeClamp: root::MTL::MotionBorderMode = 0;
        pub const MotionBorderMode_MotionBorderModeVanish: root::MTL::MotionBorderMode = 1;
        pub type MotionBorderMode = u32;
        #[repr(C)]
        #[derive(Debug)]
        pub struct PrimitiveAccelerationStructureDescriptor {
            pub _base: root::NS::Copying<root::MTL::AccelerationStructureDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor5allocEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_alloc(
            ) -> *mut root::MTL::PrimitiveAccelerationStructureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor4initEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_init(
                this: *mut root::MTL::PrimitiveAccelerationStructureDescriptor,
            ) -> *mut root::MTL::PrimitiveAccelerationStructureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40PrimitiveAccelerationStructureDescriptor19geometryDescriptorsEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_geometryDescriptors(
                this: *const root::MTL::PrimitiveAccelerationStructureDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor22setGeometryDescriptorsEPKN2NS5ArrayE"]
            pub fn PrimitiveAccelerationStructureDescriptor_setGeometryDescriptors(
                this: *mut root::MTL::PrimitiveAccelerationStructureDescriptor,
                geometryDescriptors: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40PrimitiveAccelerationStructureDescriptor21motionStartBorderModeEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_motionStartBorderMode(
                this: *const root::MTL::PrimitiveAccelerationStructureDescriptor,
            ) -> root::MTL::MotionBorderMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor24setMotionStartBorderModeENS_16MotionBorderModeE"]
            pub fn PrimitiveAccelerationStructureDescriptor_setMotionStartBorderMode(
                this: *mut root::MTL::PrimitiveAccelerationStructureDescriptor,
                motionStartBorderMode: root::MTL::MotionBorderMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40PrimitiveAccelerationStructureDescriptor19motionEndBorderModeEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_motionEndBorderMode(
                this: *const root::MTL::PrimitiveAccelerationStructureDescriptor,
            ) -> root::MTL::MotionBorderMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor22setMotionEndBorderModeENS_16MotionBorderModeE"]
            pub fn PrimitiveAccelerationStructureDescriptor_setMotionEndBorderMode(
                this: *mut root::MTL::PrimitiveAccelerationStructureDescriptor,
                motionEndBorderMode: root::MTL::MotionBorderMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40PrimitiveAccelerationStructureDescriptor15motionStartTimeEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_motionStartTime(
                this: *const root::MTL::PrimitiveAccelerationStructureDescriptor,
            ) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor18setMotionStartTimeEf"]
            pub fn PrimitiveAccelerationStructureDescriptor_setMotionStartTime(
                this: *mut root::MTL::PrimitiveAccelerationStructureDescriptor,
                motionStartTime: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40PrimitiveAccelerationStructureDescriptor13motionEndTimeEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_motionEndTime(
                this: *const root::MTL::PrimitiveAccelerationStructureDescriptor,
            ) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor16setMotionEndTimeEf"]
            pub fn PrimitiveAccelerationStructureDescriptor_setMotionEndTime(
                this: *mut root::MTL::PrimitiveAccelerationStructureDescriptor,
                motionEndTime: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40PrimitiveAccelerationStructureDescriptor19motionKeyframeCountEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_motionKeyframeCount(
                this: *const root::MTL::PrimitiveAccelerationStructureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor22setMotionKeyframeCountEm"]
            pub fn PrimitiveAccelerationStructureDescriptor_setMotionKeyframeCount(
                this: *mut root::MTL::PrimitiveAccelerationStructureDescriptor,
                motionKeyframeCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40PrimitiveAccelerationStructureDescriptor10descriptorEv"]
            pub fn PrimitiveAccelerationStructureDescriptor_descriptor(
            ) -> *mut root::MTL::PrimitiveAccelerationStructureDescriptor;
        }
        impl PrimitiveAccelerationStructureDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::PrimitiveAccelerationStructureDescriptor {
                PrimitiveAccelerationStructureDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::PrimitiveAccelerationStructureDescriptor {
                PrimitiveAccelerationStructureDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn geometryDescriptors(&self) -> *mut root::NS::Array {
                PrimitiveAccelerationStructureDescriptor_geometryDescriptors(self)
            }
            #[inline]
            pub unsafe fn setGeometryDescriptors(
                &mut self,
                geometryDescriptors: *const root::NS::Array,
            ) {
                PrimitiveAccelerationStructureDescriptor_setGeometryDescriptors(
                    self,
                    geometryDescriptors,
                )
            }
            #[inline]
            pub unsafe fn motionStartBorderMode(&self) -> root::MTL::MotionBorderMode {
                PrimitiveAccelerationStructureDescriptor_motionStartBorderMode(self)
            }
            #[inline]
            pub unsafe fn setMotionStartBorderMode(
                &mut self,
                motionStartBorderMode: root::MTL::MotionBorderMode,
            ) {
                PrimitiveAccelerationStructureDescriptor_setMotionStartBorderMode(
                    self,
                    motionStartBorderMode,
                )
            }
            #[inline]
            pub unsafe fn motionEndBorderMode(&self) -> root::MTL::MotionBorderMode {
                PrimitiveAccelerationStructureDescriptor_motionEndBorderMode(self)
            }
            #[inline]
            pub unsafe fn setMotionEndBorderMode(
                &mut self,
                motionEndBorderMode: root::MTL::MotionBorderMode,
            ) {
                PrimitiveAccelerationStructureDescriptor_setMotionEndBorderMode(
                    self,
                    motionEndBorderMode,
                )
            }
            #[inline]
            pub unsafe fn motionStartTime(&self) -> f32 {
                PrimitiveAccelerationStructureDescriptor_motionStartTime(self)
            }
            #[inline]
            pub unsafe fn setMotionStartTime(&mut self, motionStartTime: f32) {
                PrimitiveAccelerationStructureDescriptor_setMotionStartTime(self, motionStartTime)
            }
            #[inline]
            pub unsafe fn motionEndTime(&self) -> f32 {
                PrimitiveAccelerationStructureDescriptor_motionEndTime(self)
            }
            #[inline]
            pub unsafe fn setMotionEndTime(&mut self, motionEndTime: f32) {
                PrimitiveAccelerationStructureDescriptor_setMotionEndTime(self, motionEndTime)
            }
            #[inline]
            pub unsafe fn motionKeyframeCount(&self) -> root::NS::UInteger {
                PrimitiveAccelerationStructureDescriptor_motionKeyframeCount(self)
            }
            #[inline]
            pub unsafe fn setMotionKeyframeCount(
                &mut self,
                motionKeyframeCount: root::NS::UInteger,
            ) {
                PrimitiveAccelerationStructureDescriptor_setMotionKeyframeCount(
                    self,
                    motionKeyframeCount,
                )
            }
            #[inline]
            pub unsafe fn descriptor() -> *mut root::MTL::PrimitiveAccelerationStructureDescriptor {
                PrimitiveAccelerationStructureDescriptor_descriptor()
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructureTriangleGeometryDescriptor {
            pub _base: root::NS::Copying<root::MTL::AccelerationStructureGeometryDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor5allocEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_alloc(
            ) -> *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor4initEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_init(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL47AccelerationStructureTriangleGeometryDescriptor12vertexBufferEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_vertexBuffer(
                this: *const root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor15setVertexBufferEPKNS_6BufferE"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_setVertexBuffer(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
                vertexBuffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL47AccelerationStructureTriangleGeometryDescriptor18vertexBufferOffsetEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_vertexBufferOffset(
                this: *const root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor21setVertexBufferOffsetEm"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_setVertexBufferOffset(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
                vertexBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL47AccelerationStructureTriangleGeometryDescriptor12vertexStrideEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_vertexStride(
                this: *const root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor15setVertexStrideEm"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_setVertexStride(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
                vertexStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL47AccelerationStructureTriangleGeometryDescriptor11indexBufferEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_indexBuffer(
                this: *const root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor14setIndexBufferEPKNS_6BufferE"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_setIndexBuffer(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
                indexBuffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL47AccelerationStructureTriangleGeometryDescriptor17indexBufferOffsetEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_indexBufferOffset(
                this: *const root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor20setIndexBufferOffsetEm"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_setIndexBufferOffset(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
                indexBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL47AccelerationStructureTriangleGeometryDescriptor9indexTypeEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_indexType(
                this: *const root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> root::MTL::IndexType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor12setIndexTypeENS_9IndexTypeE"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_setIndexType(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
                indexType: root::MTL::IndexType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL47AccelerationStructureTriangleGeometryDescriptor13triangleCountEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_triangleCount(
                this: *const root::MTL::AccelerationStructureTriangleGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor16setTriangleCountEm"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_setTriangleCount(
                this: *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor,
                triangleCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47AccelerationStructureTriangleGeometryDescriptor10descriptorEv"]
            pub fn AccelerationStructureTriangleGeometryDescriptor_descriptor(
            ) -> *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor;
        }
        impl AccelerationStructureTriangleGeometryDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor
            {
                AccelerationStructureTriangleGeometryDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor {
                AccelerationStructureTriangleGeometryDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn vertexBuffer(&self) -> *mut root::MTL::Buffer {
                AccelerationStructureTriangleGeometryDescriptor_vertexBuffer(self)
            }
            #[inline]
            pub unsafe fn setVertexBuffer(&mut self, vertexBuffer: *const root::MTL::Buffer) {
                AccelerationStructureTriangleGeometryDescriptor_setVertexBuffer(self, vertexBuffer)
            }
            #[inline]
            pub unsafe fn vertexBufferOffset(&self) -> root::NS::UInteger {
                AccelerationStructureTriangleGeometryDescriptor_vertexBufferOffset(self)
            }
            #[inline]
            pub unsafe fn setVertexBufferOffset(&mut self, vertexBufferOffset: root::NS::UInteger) {
                AccelerationStructureTriangleGeometryDescriptor_setVertexBufferOffset(
                    self,
                    vertexBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn vertexStride(&self) -> root::NS::UInteger {
                AccelerationStructureTriangleGeometryDescriptor_vertexStride(self)
            }
            #[inline]
            pub unsafe fn setVertexStride(&mut self, vertexStride: root::NS::UInteger) {
                AccelerationStructureTriangleGeometryDescriptor_setVertexStride(self, vertexStride)
            }
            #[inline]
            pub unsafe fn indexBuffer(&self) -> *mut root::MTL::Buffer {
                AccelerationStructureTriangleGeometryDescriptor_indexBuffer(self)
            }
            #[inline]
            pub unsafe fn setIndexBuffer(&mut self, indexBuffer: *const root::MTL::Buffer) {
                AccelerationStructureTriangleGeometryDescriptor_setIndexBuffer(self, indexBuffer)
            }
            #[inline]
            pub unsafe fn indexBufferOffset(&self) -> root::NS::UInteger {
                AccelerationStructureTriangleGeometryDescriptor_indexBufferOffset(self)
            }
            #[inline]
            pub unsafe fn setIndexBufferOffset(&mut self, indexBufferOffset: root::NS::UInteger) {
                AccelerationStructureTriangleGeometryDescriptor_setIndexBufferOffset(
                    self,
                    indexBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn indexType(&self) -> root::MTL::IndexType {
                AccelerationStructureTriangleGeometryDescriptor_indexType(self)
            }
            #[inline]
            pub unsafe fn setIndexType(&mut self, indexType: root::MTL::IndexType) {
                AccelerationStructureTriangleGeometryDescriptor_setIndexType(self, indexType)
            }
            #[inline]
            pub unsafe fn triangleCount(&self) -> root::NS::UInteger {
                AccelerationStructureTriangleGeometryDescriptor_triangleCount(self)
            }
            #[inline]
            pub unsafe fn setTriangleCount(&mut self, triangleCount: root::NS::UInteger) {
                AccelerationStructureTriangleGeometryDescriptor_setTriangleCount(
                    self,
                    triangleCount,
                )
            }
            #[inline]
            pub unsafe fn descriptor(
            ) -> *mut root::MTL::AccelerationStructureTriangleGeometryDescriptor {
                AccelerationStructureTriangleGeometryDescriptor_descriptor()
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructureBoundingBoxGeometryDescriptor {
            pub _base: root::NS::Copying<root::MTL::AccelerationStructureGeometryDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL50AccelerationStructureBoundingBoxGeometryDescriptor5allocEv"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_alloc(
            ) -> *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL50AccelerationStructureBoundingBoxGeometryDescriptor4initEv"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_init(
                this: *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
            ) -> *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL50AccelerationStructureBoundingBoxGeometryDescriptor17boundingBoxBufferEv"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxBuffer(
                this: *const root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL50AccelerationStructureBoundingBoxGeometryDescriptor20setBoundingBoxBufferEPKNS_6BufferE"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxBuffer(
                this: *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
                boundingBoxBuffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL50AccelerationStructureBoundingBoxGeometryDescriptor23boundingBoxBufferOffsetEv"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxBufferOffset(
                this: *const root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL50AccelerationStructureBoundingBoxGeometryDescriptor26setBoundingBoxBufferOffsetEm"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxBufferOffset(
                this: *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
                boundingBoxBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL50AccelerationStructureBoundingBoxGeometryDescriptor17boundingBoxStrideEv"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxStride(
                this: *const root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL50AccelerationStructureBoundingBoxGeometryDescriptor20setBoundingBoxStrideEm"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxStride(
                this: *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
                boundingBoxStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL50AccelerationStructureBoundingBoxGeometryDescriptor16boundingBoxCountEv"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxCount(
                this: *const root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL50AccelerationStructureBoundingBoxGeometryDescriptor19setBoundingBoxCountEm"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxCount(
                this: *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor,
                boundingBoxCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL50AccelerationStructureBoundingBoxGeometryDescriptor10descriptorEv"]
            pub fn AccelerationStructureBoundingBoxGeometryDescriptor_descriptor(
            ) -> *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor;
        }
        impl AccelerationStructureBoundingBoxGeometryDescriptor {
            #[inline]
            pub unsafe fn alloc(
            ) -> *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor {
                AccelerationStructureBoundingBoxGeometryDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor {
                AccelerationStructureBoundingBoxGeometryDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn boundingBoxBuffer(&self) -> *mut root::MTL::Buffer {
                AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxBuffer(self)
            }
            #[inline]
            pub unsafe fn setBoundingBoxBuffer(
                &mut self,
                boundingBoxBuffer: *const root::MTL::Buffer,
            ) {
                AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxBuffer(
                    self,
                    boundingBoxBuffer,
                )
            }
            #[inline]
            pub unsafe fn boundingBoxBufferOffset(&self) -> root::NS::UInteger {
                AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxBufferOffset(self)
            }
            #[inline]
            pub unsafe fn setBoundingBoxBufferOffset(
                &mut self,
                boundingBoxBufferOffset: root::NS::UInteger,
            ) {
                AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxBufferOffset(
                    self,
                    boundingBoxBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn boundingBoxStride(&self) -> root::NS::UInteger {
                AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxStride(self)
            }
            #[inline]
            pub unsafe fn setBoundingBoxStride(&mut self, boundingBoxStride: root::NS::UInteger) {
                AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxStride(
                    self,
                    boundingBoxStride,
                )
            }
            #[inline]
            pub unsafe fn boundingBoxCount(&self) -> root::NS::UInteger {
                AccelerationStructureBoundingBoxGeometryDescriptor_boundingBoxCount(self)
            }
            #[inline]
            pub unsafe fn setBoundingBoxCount(&mut self, boundingBoxCount: root::NS::UInteger) {
                AccelerationStructureBoundingBoxGeometryDescriptor_setBoundingBoxCount(
                    self,
                    boundingBoxCount,
                )
            }
            #[inline]
            pub unsafe fn descriptor(
            ) -> *mut root::MTL::AccelerationStructureBoundingBoxGeometryDescriptor {
                AccelerationStructureBoundingBoxGeometryDescriptor_descriptor()
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct MotionKeyframeData {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18MotionKeyframeData5allocEv"]
            pub fn MotionKeyframeData_alloc() -> *mut root::MTL::MotionKeyframeData;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18MotionKeyframeData4initEv"]
            pub fn MotionKeyframeData_init(
                this: *mut root::MTL::MotionKeyframeData,
            ) -> *mut root::MTL::MotionKeyframeData;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18MotionKeyframeData6bufferEv"]
            pub fn MotionKeyframeData_buffer(
                this: *const root::MTL::MotionKeyframeData,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18MotionKeyframeData9setBufferEPKNS_6BufferE"]
            pub fn MotionKeyframeData_setBuffer(
                this: *mut root::MTL::MotionKeyframeData,
                buffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18MotionKeyframeData6offsetEv"]
            pub fn MotionKeyframeData_offset(
                this: *const root::MTL::MotionKeyframeData,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18MotionKeyframeData9setOffsetEm"]
            pub fn MotionKeyframeData_setOffset(
                this: *mut root::MTL::MotionKeyframeData,
                offset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18MotionKeyframeData4dataEv"]
            pub fn MotionKeyframeData_data() -> *mut root::MTL::MotionKeyframeData;
        }
        impl MotionKeyframeData {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::MotionKeyframeData {
                MotionKeyframeData_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::MotionKeyframeData {
                MotionKeyframeData_init(self)
            }
            #[inline]
            pub unsafe fn buffer(&self) -> *mut root::MTL::Buffer {
                MotionKeyframeData_buffer(self)
            }
            #[inline]
            pub unsafe fn setBuffer(&mut self, buffer: *const root::MTL::Buffer) {
                MotionKeyframeData_setBuffer(self, buffer)
            }
            #[inline]
            pub unsafe fn offset(&self) -> root::NS::UInteger {
                MotionKeyframeData_offset(self)
            }
            #[inline]
            pub unsafe fn setOffset(&mut self, offset: root::NS::UInteger) {
                MotionKeyframeData_setOffset(self, offset)
            }
            #[inline]
            pub unsafe fn data() -> *mut root::MTL::MotionKeyframeData {
                MotionKeyframeData_data()
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructureMotionTriangleGeometryDescriptor {
            pub _base: root::NS::Copying<root::MTL::AccelerationStructureGeometryDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor5allocEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_alloc(
            ) -> *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor4initEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_init(
                this: *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
            ) -> *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL53AccelerationStructureMotionTriangleGeometryDescriptor13vertexBuffersEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_vertexBuffers(
                this: *const root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor16setVertexBuffersEPKN2NS5ArrayE"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_setVertexBuffers(
                this: *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
                vertexBuffers: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL53AccelerationStructureMotionTriangleGeometryDescriptor12vertexStrideEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_vertexStride(
                this: *const root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor15setVertexStrideEm"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_setVertexStride(
                this: *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
                vertexStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL53AccelerationStructureMotionTriangleGeometryDescriptor11indexBufferEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_indexBuffer(
                this: *const root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor14setIndexBufferEPKNS_6BufferE"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_setIndexBuffer(
                this: *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
                indexBuffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL53AccelerationStructureMotionTriangleGeometryDescriptor17indexBufferOffsetEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_indexBufferOffset(
                this: *const root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor20setIndexBufferOffsetEm"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_setIndexBufferOffset(
                this: *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
                indexBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL53AccelerationStructureMotionTriangleGeometryDescriptor9indexTypeEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_indexType(
                this: *const root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
            ) -> root::MTL::IndexType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor12setIndexTypeENS_9IndexTypeE"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_setIndexType(
                this: *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
                indexType: root::MTL::IndexType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL53AccelerationStructureMotionTriangleGeometryDescriptor13triangleCountEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_triangleCount(
                this: *const root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor16setTriangleCountEm"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_setTriangleCount(
                this: *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor,
                triangleCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL53AccelerationStructureMotionTriangleGeometryDescriptor10descriptorEv"]
            pub fn AccelerationStructureMotionTriangleGeometryDescriptor_descriptor(
            ) -> *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor;
        }
        impl AccelerationStructureMotionTriangleGeometryDescriptor {
            #[inline]
            pub unsafe fn alloc(
            ) -> *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor {
                AccelerationStructureMotionTriangleGeometryDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor {
                AccelerationStructureMotionTriangleGeometryDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn vertexBuffers(&self) -> *mut root::NS::Array {
                AccelerationStructureMotionTriangleGeometryDescriptor_vertexBuffers(self)
            }
            #[inline]
            pub unsafe fn setVertexBuffers(&mut self, vertexBuffers: *const root::NS::Array) {
                AccelerationStructureMotionTriangleGeometryDescriptor_setVertexBuffers(
                    self,
                    vertexBuffers,
                )
            }
            #[inline]
            pub unsafe fn vertexStride(&self) -> root::NS::UInteger {
                AccelerationStructureMotionTriangleGeometryDescriptor_vertexStride(self)
            }
            #[inline]
            pub unsafe fn setVertexStride(&mut self, vertexStride: root::NS::UInteger) {
                AccelerationStructureMotionTriangleGeometryDescriptor_setVertexStride(
                    self,
                    vertexStride,
                )
            }
            #[inline]
            pub unsafe fn indexBuffer(&self) -> *mut root::MTL::Buffer {
                AccelerationStructureMotionTriangleGeometryDescriptor_indexBuffer(self)
            }
            #[inline]
            pub unsafe fn setIndexBuffer(&mut self, indexBuffer: *const root::MTL::Buffer) {
                AccelerationStructureMotionTriangleGeometryDescriptor_setIndexBuffer(
                    self,
                    indexBuffer,
                )
            }
            #[inline]
            pub unsafe fn indexBufferOffset(&self) -> root::NS::UInteger {
                AccelerationStructureMotionTriangleGeometryDescriptor_indexBufferOffset(self)
            }
            #[inline]
            pub unsafe fn setIndexBufferOffset(&mut self, indexBufferOffset: root::NS::UInteger) {
                AccelerationStructureMotionTriangleGeometryDescriptor_setIndexBufferOffset(
                    self,
                    indexBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn indexType(&self) -> root::MTL::IndexType {
                AccelerationStructureMotionTriangleGeometryDescriptor_indexType(self)
            }
            #[inline]
            pub unsafe fn setIndexType(&mut self, indexType: root::MTL::IndexType) {
                AccelerationStructureMotionTriangleGeometryDescriptor_setIndexType(self, indexType)
            }
            #[inline]
            pub unsafe fn triangleCount(&self) -> root::NS::UInteger {
                AccelerationStructureMotionTriangleGeometryDescriptor_triangleCount(self)
            }
            #[inline]
            pub unsafe fn setTriangleCount(&mut self, triangleCount: root::NS::UInteger) {
                AccelerationStructureMotionTriangleGeometryDescriptor_setTriangleCount(
                    self,
                    triangleCount,
                )
            }
            #[inline]
            pub unsafe fn descriptor(
            ) -> *mut root::MTL::AccelerationStructureMotionTriangleGeometryDescriptor {
                AccelerationStructureMotionTriangleGeometryDescriptor_descriptor()
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructureMotionBoundingBoxGeometryDescriptor {
            pub _base: root::NS::Copying<root::MTL::AccelerationStructureGeometryDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor5allocEv"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_alloc(
            ) -> *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor4initEv"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_init(
                this: *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor,
            ) -> *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor18boundingBoxBuffersEv"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_boundingBoxBuffers(
                this: *const root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor21setBoundingBoxBuffersEPKN2NS5ArrayE"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_setBoundingBoxBuffers(
                this: *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor,
                boundingBoxBuffers: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor17boundingBoxStrideEv"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_boundingBoxStride(
                this: *const root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor20setBoundingBoxStrideEm"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_setBoundingBoxStride(
                this: *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor,
                boundingBoxStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor16boundingBoxCountEv"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_boundingBoxCount(
                this: *const root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor19setBoundingBoxCountEm"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_setBoundingBoxCount(
                this: *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor,
                boundingBoxCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL56AccelerationStructureMotionBoundingBoxGeometryDescriptor10descriptorEv"]
            pub fn AccelerationStructureMotionBoundingBoxGeometryDescriptor_descriptor(
            ) -> *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor;
        }
        impl AccelerationStructureMotionBoundingBoxGeometryDescriptor {
            #[inline]
            pub unsafe fn alloc(
            ) -> *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor
            {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor
            {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn boundingBoxBuffers(&self) -> *mut root::NS::Array {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_boundingBoxBuffers(self)
            }
            #[inline]
            pub unsafe fn setBoundingBoxBuffers(
                &mut self,
                boundingBoxBuffers: *const root::NS::Array,
            ) {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_setBoundingBoxBuffers(
                    self,
                    boundingBoxBuffers,
                )
            }
            #[inline]
            pub unsafe fn boundingBoxStride(&self) -> root::NS::UInteger {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_boundingBoxStride(self)
            }
            #[inline]
            pub unsafe fn setBoundingBoxStride(&mut self, boundingBoxStride: root::NS::UInteger) {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_setBoundingBoxStride(
                    self,
                    boundingBoxStride,
                )
            }
            #[inline]
            pub unsafe fn boundingBoxCount(&self) -> root::NS::UInteger {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_boundingBoxCount(self)
            }
            #[inline]
            pub unsafe fn setBoundingBoxCount(&mut self, boundingBoxCount: root::NS::UInteger) {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_setBoundingBoxCount(
                    self,
                    boundingBoxCount,
                )
            }
            #[inline]
            pub unsafe fn descriptor(
            ) -> *mut root::MTL::AccelerationStructureMotionBoundingBoxGeometryDescriptor
            {
                AccelerationStructureMotionBoundingBoxGeometryDescriptor_descriptor()
            }
        }
        #[repr(C, packed)]
        #[derive(Copy, Clone)]
        pub struct AccelerationStructureInstanceDescriptor {
            pub transformationMatrix: root::MTL::PackedFloat4x3,
            pub options: root::MTL::AccelerationStructureInstanceOptions,
            pub mask: u32,
            pub intersectionFunctionTableOffset: u32,
            pub accelerationStructureIndex: u32,
        }
        #[repr(C, packed)]
        #[derive(Copy, Clone)]
        pub struct AccelerationStructureUserIDInstanceDescriptor {
            pub transformationMatrix: root::MTL::PackedFloat4x3,
            pub options: root::MTL::AccelerationStructureInstanceOptions,
            pub mask: u32,
            pub intersectionFunctionTableOffset: u32,
            pub accelerationStructureIndex: u32,
            pub userID: u32,
        }
        pub const AccelerationStructureInstanceDescriptorType_AccelerationStructureInstanceDescriptorTypeDefault : root :: MTL :: AccelerationStructureInstanceDescriptorType = 0 ;
        pub const AccelerationStructureInstanceDescriptorType_AccelerationStructureInstanceDescriptorTypeUserID : root :: MTL :: AccelerationStructureInstanceDescriptorType = 1 ;
        pub const AccelerationStructureInstanceDescriptorType_AccelerationStructureInstanceDescriptorTypeMotion : root :: MTL :: AccelerationStructureInstanceDescriptorType = 2 ;
        pub type AccelerationStructureInstanceDescriptorType = root::NS::UInteger;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct AccelerationStructureMotionInstanceDescriptor {
            pub options: root::MTL::AccelerationStructureInstanceOptions,
            pub mask: u32,
            pub intersectionFunctionTableOffset: u32,
            pub accelerationStructureIndex: u32,
            pub userID: u32,
            pub motionTransformsStartIndex: u32,
            pub motionTransformsCount: u32,
            pub motionStartBorderMode: root::MTL::MotionBorderMode,
            pub motionEndBorderMode: root::MTL::MotionBorderMode,
            pub motionStartTime: f32,
            pub motionEndTime: f32,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct InstanceAccelerationStructureDescriptor {
            pub _base: root::NS::Copying<root::MTL::AccelerationStructureDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor5allocEv"]
            pub fn InstanceAccelerationStructureDescriptor_alloc(
            ) -> *mut root::MTL::InstanceAccelerationStructureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor4initEv"]
            pub fn InstanceAccelerationStructureDescriptor_init(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> *mut root::MTL::InstanceAccelerationStructureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor24instanceDescriptorBufferEv"]
            pub fn InstanceAccelerationStructureDescriptor_instanceDescriptorBuffer(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor27setInstanceDescriptorBufferEPKNS_6BufferE"]
            pub fn InstanceAccelerationStructureDescriptor_setInstanceDescriptorBuffer(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                instanceDescriptorBuffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor30instanceDescriptorBufferOffsetEv"]
            pub fn InstanceAccelerationStructureDescriptor_instanceDescriptorBufferOffset(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor33setInstanceDescriptorBufferOffsetEm"]
            pub fn InstanceAccelerationStructureDescriptor_setInstanceDescriptorBufferOffset(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                instanceDescriptorBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor24instanceDescriptorStrideEv"]
            pub fn InstanceAccelerationStructureDescriptor_instanceDescriptorStride(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor27setInstanceDescriptorStrideEm"]
            pub fn InstanceAccelerationStructureDescriptor_setInstanceDescriptorStride(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                instanceDescriptorStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor13instanceCountEv"]
            pub fn InstanceAccelerationStructureDescriptor_instanceCount(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor16setInstanceCountEm"]
            pub fn InstanceAccelerationStructureDescriptor_setInstanceCount(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                instanceCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor31instancedAccelerationStructuresEv"]
            pub fn InstanceAccelerationStructureDescriptor_instancedAccelerationStructures(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor34setInstancedAccelerationStructuresEPKN2NS5ArrayE"]
            pub fn InstanceAccelerationStructureDescriptor_setInstancedAccelerationStructures(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                instancedAccelerationStructures: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor22instanceDescriptorTypeEv"]
            pub fn InstanceAccelerationStructureDescriptor_instanceDescriptorType(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> root::MTL::AccelerationStructureInstanceDescriptorType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor25setInstanceDescriptorTypeENS_43AccelerationStructureInstanceDescriptorTypeE"]
            pub fn InstanceAccelerationStructureDescriptor_setInstanceDescriptorType(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                instanceDescriptorType: root::MTL::AccelerationStructureInstanceDescriptorType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor21motionTransformBufferEv"]
            pub fn InstanceAccelerationStructureDescriptor_motionTransformBuffer(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor24setMotionTransformBufferEPKNS_6BufferE"]
            pub fn InstanceAccelerationStructureDescriptor_setMotionTransformBuffer(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                motionTransformBuffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor27motionTransformBufferOffsetEv"]
            pub fn InstanceAccelerationStructureDescriptor_motionTransformBufferOffset(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor30setMotionTransformBufferOffsetEm"]
            pub fn InstanceAccelerationStructureDescriptor_setMotionTransformBufferOffset(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                motionTransformBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39InstanceAccelerationStructureDescriptor20motionTransformCountEv"]
            pub fn InstanceAccelerationStructureDescriptor_motionTransformCount(
                this: *const root::MTL::InstanceAccelerationStructureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor23setMotionTransformCountEm"]
            pub fn InstanceAccelerationStructureDescriptor_setMotionTransformCount(
                this: *mut root::MTL::InstanceAccelerationStructureDescriptor,
                motionTransformCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39InstanceAccelerationStructureDescriptor10descriptorEv"]
            pub fn InstanceAccelerationStructureDescriptor_descriptor(
            ) -> *mut root::MTL::InstanceAccelerationStructureDescriptor;
        }
        impl InstanceAccelerationStructureDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::InstanceAccelerationStructureDescriptor {
                InstanceAccelerationStructureDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::InstanceAccelerationStructureDescriptor {
                InstanceAccelerationStructureDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn instanceDescriptorBuffer(&self) -> *mut root::MTL::Buffer {
                InstanceAccelerationStructureDescriptor_instanceDescriptorBuffer(self)
            }
            #[inline]
            pub unsafe fn setInstanceDescriptorBuffer(
                &mut self,
                instanceDescriptorBuffer: *const root::MTL::Buffer,
            ) {
                InstanceAccelerationStructureDescriptor_setInstanceDescriptorBuffer(
                    self,
                    instanceDescriptorBuffer,
                )
            }
            #[inline]
            pub unsafe fn instanceDescriptorBufferOffset(&self) -> root::NS::UInteger {
                InstanceAccelerationStructureDescriptor_instanceDescriptorBufferOffset(self)
            }
            #[inline]
            pub unsafe fn setInstanceDescriptorBufferOffset(
                &mut self,
                instanceDescriptorBufferOffset: root::NS::UInteger,
            ) {
                InstanceAccelerationStructureDescriptor_setInstanceDescriptorBufferOffset(
                    self,
                    instanceDescriptorBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn instanceDescriptorStride(&self) -> root::NS::UInteger {
                InstanceAccelerationStructureDescriptor_instanceDescriptorStride(self)
            }
            #[inline]
            pub unsafe fn setInstanceDescriptorStride(
                &mut self,
                instanceDescriptorStride: root::NS::UInteger,
            ) {
                InstanceAccelerationStructureDescriptor_setInstanceDescriptorStride(
                    self,
                    instanceDescriptorStride,
                )
            }
            #[inline]
            pub unsafe fn instanceCount(&self) -> root::NS::UInteger {
                InstanceAccelerationStructureDescriptor_instanceCount(self)
            }
            #[inline]
            pub unsafe fn setInstanceCount(&mut self, instanceCount: root::NS::UInteger) {
                InstanceAccelerationStructureDescriptor_setInstanceCount(self, instanceCount)
            }
            #[inline]
            pub unsafe fn instancedAccelerationStructures(&self) -> *mut root::NS::Array {
                InstanceAccelerationStructureDescriptor_instancedAccelerationStructures(self)
            }
            #[inline]
            pub unsafe fn setInstancedAccelerationStructures(
                &mut self,
                instancedAccelerationStructures: *const root::NS::Array,
            ) {
                InstanceAccelerationStructureDescriptor_setInstancedAccelerationStructures(
                    self,
                    instancedAccelerationStructures,
                )
            }
            #[inline]
            pub unsafe fn instanceDescriptorType(
                &self,
            ) -> root::MTL::AccelerationStructureInstanceDescriptorType {
                InstanceAccelerationStructureDescriptor_instanceDescriptorType(self)
            }
            #[inline]
            pub unsafe fn setInstanceDescriptorType(
                &mut self,
                instanceDescriptorType: root::MTL::AccelerationStructureInstanceDescriptorType,
            ) {
                InstanceAccelerationStructureDescriptor_setInstanceDescriptorType(
                    self,
                    instanceDescriptorType,
                )
            }
            #[inline]
            pub unsafe fn motionTransformBuffer(&self) -> *mut root::MTL::Buffer {
                InstanceAccelerationStructureDescriptor_motionTransformBuffer(self)
            }
            #[inline]
            pub unsafe fn setMotionTransformBuffer(
                &mut self,
                motionTransformBuffer: *const root::MTL::Buffer,
            ) {
                InstanceAccelerationStructureDescriptor_setMotionTransformBuffer(
                    self,
                    motionTransformBuffer,
                )
            }
            #[inline]
            pub unsafe fn motionTransformBufferOffset(&self) -> root::NS::UInteger {
                InstanceAccelerationStructureDescriptor_motionTransformBufferOffset(self)
            }
            #[inline]
            pub unsafe fn setMotionTransformBufferOffset(
                &mut self,
                motionTransformBufferOffset: root::NS::UInteger,
            ) {
                InstanceAccelerationStructureDescriptor_setMotionTransformBufferOffset(
                    self,
                    motionTransformBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn motionTransformCount(&self) -> root::NS::UInteger {
                InstanceAccelerationStructureDescriptor_motionTransformCount(self)
            }
            #[inline]
            pub unsafe fn setMotionTransformCount(
                &mut self,
                motionTransformCount: root::NS::UInteger,
            ) {
                InstanceAccelerationStructureDescriptor_setMotionTransformCount(
                    self,
                    motionTransformCount,
                )
            }
            #[inline]
            pub unsafe fn descriptor() -> *mut root::MTL::InstanceAccelerationStructureDescriptor {
                InstanceAccelerationStructureDescriptor_descriptor()
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructure {
            pub _base: root::NS::Referencing<root::MTL::Resource>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL21AccelerationStructure4sizeEv"]
            pub fn AccelerationStructure_size(
                this: *const root::MTL::AccelerationStructure,
            ) -> root::NS::UInteger;
        }
        impl AccelerationStructure {
            #[inline]
            pub unsafe fn size(&self) -> root::NS::UInteger {
                AccelerationStructure_size(self)
            }
        }
        pub const PixelFormat_PixelFormatInvalid: root::MTL::PixelFormat = 0;
        pub const PixelFormat_PixelFormatA8Unorm: root::MTL::PixelFormat = 1;
        pub const PixelFormat_PixelFormatR8Unorm: root::MTL::PixelFormat = 10;
        pub const PixelFormat_PixelFormatR8Unorm_sRGB: root::MTL::PixelFormat = 11;
        pub const PixelFormat_PixelFormatR8Snorm: root::MTL::PixelFormat = 12;
        pub const PixelFormat_PixelFormatR8Uint: root::MTL::PixelFormat = 13;
        pub const PixelFormat_PixelFormatR8Sint: root::MTL::PixelFormat = 14;
        pub const PixelFormat_PixelFormatR16Unorm: root::MTL::PixelFormat = 20;
        pub const PixelFormat_PixelFormatR16Snorm: root::MTL::PixelFormat = 22;
        pub const PixelFormat_PixelFormatR16Uint: root::MTL::PixelFormat = 23;
        pub const PixelFormat_PixelFormatR16Sint: root::MTL::PixelFormat = 24;
        pub const PixelFormat_PixelFormatR16Float: root::MTL::PixelFormat = 25;
        pub const PixelFormat_PixelFormatRG8Unorm: root::MTL::PixelFormat = 30;
        pub const PixelFormat_PixelFormatRG8Unorm_sRGB: root::MTL::PixelFormat = 31;
        pub const PixelFormat_PixelFormatRG8Snorm: root::MTL::PixelFormat = 32;
        pub const PixelFormat_PixelFormatRG8Uint: root::MTL::PixelFormat = 33;
        pub const PixelFormat_PixelFormatRG8Sint: root::MTL::PixelFormat = 34;
        pub const PixelFormat_PixelFormatB5G6R5Unorm: root::MTL::PixelFormat = 40;
        pub const PixelFormat_PixelFormatA1BGR5Unorm: root::MTL::PixelFormat = 41;
        pub const PixelFormat_PixelFormatABGR4Unorm: root::MTL::PixelFormat = 42;
        pub const PixelFormat_PixelFormatBGR5A1Unorm: root::MTL::PixelFormat = 43;
        pub const PixelFormat_PixelFormatR32Uint: root::MTL::PixelFormat = 53;
        pub const PixelFormat_PixelFormatR32Sint: root::MTL::PixelFormat = 54;
        pub const PixelFormat_PixelFormatR32Float: root::MTL::PixelFormat = 55;
        pub const PixelFormat_PixelFormatRG16Unorm: root::MTL::PixelFormat = 60;
        pub const PixelFormat_PixelFormatRG16Snorm: root::MTL::PixelFormat = 62;
        pub const PixelFormat_PixelFormatRG16Uint: root::MTL::PixelFormat = 63;
        pub const PixelFormat_PixelFormatRG16Sint: root::MTL::PixelFormat = 64;
        pub const PixelFormat_PixelFormatRG16Float: root::MTL::PixelFormat = 65;
        pub const PixelFormat_PixelFormatRGBA8Unorm: root::MTL::PixelFormat = 70;
        pub const PixelFormat_PixelFormatRGBA8Unorm_sRGB: root::MTL::PixelFormat = 71;
        pub const PixelFormat_PixelFormatRGBA8Snorm: root::MTL::PixelFormat = 72;
        pub const PixelFormat_PixelFormatRGBA8Uint: root::MTL::PixelFormat = 73;
        pub const PixelFormat_PixelFormatRGBA8Sint: root::MTL::PixelFormat = 74;
        pub const PixelFormat_PixelFormatBGRA8Unorm: root::MTL::PixelFormat = 80;
        pub const PixelFormat_PixelFormatBGRA8Unorm_sRGB: root::MTL::PixelFormat = 81;
        pub const PixelFormat_PixelFormatRGB10A2Unorm: root::MTL::PixelFormat = 90;
        pub const PixelFormat_PixelFormatRGB10A2Uint: root::MTL::PixelFormat = 91;
        pub const PixelFormat_PixelFormatRG11B10Float: root::MTL::PixelFormat = 92;
        pub const PixelFormat_PixelFormatRGB9E5Float: root::MTL::PixelFormat = 93;
        pub const PixelFormat_PixelFormatBGR10A2Unorm: root::MTL::PixelFormat = 94;
        pub const PixelFormat_PixelFormatRG32Uint: root::MTL::PixelFormat = 103;
        pub const PixelFormat_PixelFormatRG32Sint: root::MTL::PixelFormat = 104;
        pub const PixelFormat_PixelFormatRG32Float: root::MTL::PixelFormat = 105;
        pub const PixelFormat_PixelFormatRGBA16Unorm: root::MTL::PixelFormat = 110;
        pub const PixelFormat_PixelFormatRGBA16Snorm: root::MTL::PixelFormat = 112;
        pub const PixelFormat_PixelFormatRGBA16Uint: root::MTL::PixelFormat = 113;
        pub const PixelFormat_PixelFormatRGBA16Sint: root::MTL::PixelFormat = 114;
        pub const PixelFormat_PixelFormatRGBA16Float: root::MTL::PixelFormat = 115;
        pub const PixelFormat_PixelFormatRGBA32Uint: root::MTL::PixelFormat = 123;
        pub const PixelFormat_PixelFormatRGBA32Sint: root::MTL::PixelFormat = 124;
        pub const PixelFormat_PixelFormatRGBA32Float: root::MTL::PixelFormat = 125;
        pub const PixelFormat_PixelFormatBC1_RGBA: root::MTL::PixelFormat = 130;
        pub const PixelFormat_PixelFormatBC1_RGBA_sRGB: root::MTL::PixelFormat = 131;
        pub const PixelFormat_PixelFormatBC2_RGBA: root::MTL::PixelFormat = 132;
        pub const PixelFormat_PixelFormatBC2_RGBA_sRGB: root::MTL::PixelFormat = 133;
        pub const PixelFormat_PixelFormatBC3_RGBA: root::MTL::PixelFormat = 134;
        pub const PixelFormat_PixelFormatBC3_RGBA_sRGB: root::MTL::PixelFormat = 135;
        pub const PixelFormat_PixelFormatBC4_RUnorm: root::MTL::PixelFormat = 140;
        pub const PixelFormat_PixelFormatBC4_RSnorm: root::MTL::PixelFormat = 141;
        pub const PixelFormat_PixelFormatBC5_RGUnorm: root::MTL::PixelFormat = 142;
        pub const PixelFormat_PixelFormatBC5_RGSnorm: root::MTL::PixelFormat = 143;
        pub const PixelFormat_PixelFormatBC6H_RGBFloat: root::MTL::PixelFormat = 150;
        pub const PixelFormat_PixelFormatBC6H_RGBUfloat: root::MTL::PixelFormat = 151;
        pub const PixelFormat_PixelFormatBC7_RGBAUnorm: root::MTL::PixelFormat = 152;
        pub const PixelFormat_PixelFormatBC7_RGBAUnorm_sRGB: root::MTL::PixelFormat = 153;
        pub const PixelFormat_PixelFormatPVRTC_RGB_2BPP: root::MTL::PixelFormat = 160;
        pub const PixelFormat_PixelFormatPVRTC_RGB_2BPP_sRGB: root::MTL::PixelFormat = 161;
        pub const PixelFormat_PixelFormatPVRTC_RGB_4BPP: root::MTL::PixelFormat = 162;
        pub const PixelFormat_PixelFormatPVRTC_RGB_4BPP_sRGB: root::MTL::PixelFormat = 163;
        pub const PixelFormat_PixelFormatPVRTC_RGBA_2BPP: root::MTL::PixelFormat = 164;
        pub const PixelFormat_PixelFormatPVRTC_RGBA_2BPP_sRGB: root::MTL::PixelFormat = 165;
        pub const PixelFormat_PixelFormatPVRTC_RGBA_4BPP: root::MTL::PixelFormat = 166;
        pub const PixelFormat_PixelFormatPVRTC_RGBA_4BPP_sRGB: root::MTL::PixelFormat = 167;
        pub const PixelFormat_PixelFormatEAC_R11Unorm: root::MTL::PixelFormat = 170;
        pub const PixelFormat_PixelFormatEAC_R11Snorm: root::MTL::PixelFormat = 172;
        pub const PixelFormat_PixelFormatEAC_RG11Unorm: root::MTL::PixelFormat = 174;
        pub const PixelFormat_PixelFormatEAC_RG11Snorm: root::MTL::PixelFormat = 176;
        pub const PixelFormat_PixelFormatEAC_RGBA8: root::MTL::PixelFormat = 178;
        pub const PixelFormat_PixelFormatEAC_RGBA8_sRGB: root::MTL::PixelFormat = 179;
        pub const PixelFormat_PixelFormatETC2_RGB8: root::MTL::PixelFormat = 180;
        pub const PixelFormat_PixelFormatETC2_RGB8_sRGB: root::MTL::PixelFormat = 181;
        pub const PixelFormat_PixelFormatETC2_RGB8A1: root::MTL::PixelFormat = 182;
        pub const PixelFormat_PixelFormatETC2_RGB8A1_sRGB: root::MTL::PixelFormat = 183;
        pub const PixelFormat_PixelFormatASTC_4x4_sRGB: root::MTL::PixelFormat = 186;
        pub const PixelFormat_PixelFormatASTC_5x4_sRGB: root::MTL::PixelFormat = 187;
        pub const PixelFormat_PixelFormatASTC_5x5_sRGB: root::MTL::PixelFormat = 188;
        pub const PixelFormat_PixelFormatASTC_6x5_sRGB: root::MTL::PixelFormat = 189;
        pub const PixelFormat_PixelFormatASTC_6x6_sRGB: root::MTL::PixelFormat = 190;
        pub const PixelFormat_PixelFormatASTC_8x5_sRGB: root::MTL::PixelFormat = 192;
        pub const PixelFormat_PixelFormatASTC_8x6_sRGB: root::MTL::PixelFormat = 193;
        pub const PixelFormat_PixelFormatASTC_8x8_sRGB: root::MTL::PixelFormat = 194;
        pub const PixelFormat_PixelFormatASTC_10x5_sRGB: root::MTL::PixelFormat = 195;
        pub const PixelFormat_PixelFormatASTC_10x6_sRGB: root::MTL::PixelFormat = 196;
        pub const PixelFormat_PixelFormatASTC_10x8_sRGB: root::MTL::PixelFormat = 197;
        pub const PixelFormat_PixelFormatASTC_10x10_sRGB: root::MTL::PixelFormat = 198;
        pub const PixelFormat_PixelFormatASTC_12x10_sRGB: root::MTL::PixelFormat = 199;
        pub const PixelFormat_PixelFormatASTC_12x12_sRGB: root::MTL::PixelFormat = 200;
        pub const PixelFormat_PixelFormatASTC_4x4_LDR: root::MTL::PixelFormat = 204;
        pub const PixelFormat_PixelFormatASTC_5x4_LDR: root::MTL::PixelFormat = 205;
        pub const PixelFormat_PixelFormatASTC_5x5_LDR: root::MTL::PixelFormat = 206;
        pub const PixelFormat_PixelFormatASTC_6x5_LDR: root::MTL::PixelFormat = 207;
        pub const PixelFormat_PixelFormatASTC_6x6_LDR: root::MTL::PixelFormat = 208;
        pub const PixelFormat_PixelFormatASTC_8x5_LDR: root::MTL::PixelFormat = 210;
        pub const PixelFormat_PixelFormatASTC_8x6_LDR: root::MTL::PixelFormat = 211;
        pub const PixelFormat_PixelFormatASTC_8x8_LDR: root::MTL::PixelFormat = 212;
        pub const PixelFormat_PixelFormatASTC_10x5_LDR: root::MTL::PixelFormat = 213;
        pub const PixelFormat_PixelFormatASTC_10x6_LDR: root::MTL::PixelFormat = 214;
        pub const PixelFormat_PixelFormatASTC_10x8_LDR: root::MTL::PixelFormat = 215;
        pub const PixelFormat_PixelFormatASTC_10x10_LDR: root::MTL::PixelFormat = 216;
        pub const PixelFormat_PixelFormatASTC_12x10_LDR: root::MTL::PixelFormat = 217;
        pub const PixelFormat_PixelFormatASTC_12x12_LDR: root::MTL::PixelFormat = 218;
        pub const PixelFormat_PixelFormatASTC_4x4_HDR: root::MTL::PixelFormat = 222;
        pub const PixelFormat_PixelFormatASTC_5x4_HDR: root::MTL::PixelFormat = 223;
        pub const PixelFormat_PixelFormatASTC_5x5_HDR: root::MTL::PixelFormat = 224;
        pub const PixelFormat_PixelFormatASTC_6x5_HDR: root::MTL::PixelFormat = 225;
        pub const PixelFormat_PixelFormatASTC_6x6_HDR: root::MTL::PixelFormat = 226;
        pub const PixelFormat_PixelFormatASTC_8x5_HDR: root::MTL::PixelFormat = 228;
        pub const PixelFormat_PixelFormatASTC_8x6_HDR: root::MTL::PixelFormat = 229;
        pub const PixelFormat_PixelFormatASTC_8x8_HDR: root::MTL::PixelFormat = 230;
        pub const PixelFormat_PixelFormatASTC_10x5_HDR: root::MTL::PixelFormat = 231;
        pub const PixelFormat_PixelFormatASTC_10x6_HDR: root::MTL::PixelFormat = 232;
        pub const PixelFormat_PixelFormatASTC_10x8_HDR: root::MTL::PixelFormat = 233;
        pub const PixelFormat_PixelFormatASTC_10x10_HDR: root::MTL::PixelFormat = 234;
        pub const PixelFormat_PixelFormatASTC_12x10_HDR: root::MTL::PixelFormat = 235;
        pub const PixelFormat_PixelFormatASTC_12x12_HDR: root::MTL::PixelFormat = 236;
        pub const PixelFormat_PixelFormatGBGR422: root::MTL::PixelFormat = 240;
        pub const PixelFormat_PixelFormatBGRG422: root::MTL::PixelFormat = 241;
        pub const PixelFormat_PixelFormatDepth16Unorm: root::MTL::PixelFormat = 250;
        pub const PixelFormat_PixelFormatDepth32Float: root::MTL::PixelFormat = 252;
        pub const PixelFormat_PixelFormatStencil8: root::MTL::PixelFormat = 253;
        pub const PixelFormat_PixelFormatDepth24Unorm_Stencil8: root::MTL::PixelFormat = 255;
        pub const PixelFormat_PixelFormatDepth32Float_Stencil8: root::MTL::PixelFormat = 260;
        pub const PixelFormat_PixelFormatX32_Stencil8: root::MTL::PixelFormat = 261;
        pub const PixelFormat_PixelFormatX24_Stencil8: root::MTL::PixelFormat = 262;
        pub const PixelFormat_PixelFormatBGRA10_XR: root::MTL::PixelFormat = 552;
        pub const PixelFormat_PixelFormatBGRA10_XR_sRGB: root::MTL::PixelFormat = 553;
        pub const PixelFormat_PixelFormatBGR10_XR: root::MTL::PixelFormat = 554;
        pub const PixelFormat_PixelFormatBGR10_XR_sRGB: root::MTL::PixelFormat = 555;
        pub type PixelFormat = root::NS::UInteger;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct Origin {
            pub x: root::NS::UInteger,
            pub y: root::NS::UInteger,
            pub z: root::NS::UInteger,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Origin4MakeEmmm"]
            pub fn Origin_Make(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
            ) -> root::MTL::Origin;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6OriginC1Emmm"]
            pub fn Origin_Origin(
                this: *mut root::MTL::Origin,
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
            );
        }
        impl Origin {
            #[inline]
            pub unsafe fn Make(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
            ) -> root::MTL::Origin {
                Origin_Make(x, y, z)
            }
            #[inline]
            pub unsafe fn new(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Origin_Origin(__bindgen_tmp.as_mut_ptr(), x, y, z);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct Size {
            pub width: root::NS::UInteger,
            pub height: root::NS::UInteger,
            pub depth: root::NS::UInteger,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Size4MakeEmmm"]
            pub fn Size_Make(
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4SizeC1Emmm"]
            pub fn Size_Size(
                this: *mut root::MTL::Size,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            );
        }
        impl Size {
            #[inline]
            pub unsafe fn Make(
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            ) -> root::MTL::Size {
                Size_Make(width, height, depth)
            }
            #[inline]
            pub unsafe fn new(
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Size_Size(__bindgen_tmp.as_mut_ptr(), width, height, depth);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct Region {
            pub origin: root::MTL::Origin,
            pub size: root::MTL::Size,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Region6Make1DEmm"]
            pub fn Region_Make1D(
                x: root::NS::UInteger,
                width: root::NS::UInteger,
            ) -> root::MTL::Region;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Region6Make2DEmmmm"]
            pub fn Region_Make2D(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            ) -> root::MTL::Region;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Region6Make3DEmmmmmm"]
            pub fn Region_Make3D(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            ) -> root::MTL::Region;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6RegionC1Emm"]
            pub fn Region_Region(
                this: *mut root::MTL::Region,
                x: root::NS::UInteger,
                width: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6RegionC1Emmmm"]
            pub fn Region_Region1(
                this: *mut root::MTL::Region,
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6RegionC1Emmmmmm"]
            pub fn Region_Region2(
                this: *mut root::MTL::Region,
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            );
        }
        impl Region {
            #[inline]
            pub unsafe fn Make1D(
                x: root::NS::UInteger,
                width: root::NS::UInteger,
            ) -> root::MTL::Region {
                Region_Make1D(x, width)
            }
            #[inline]
            pub unsafe fn Make2D(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            ) -> root::MTL::Region {
                Region_Make2D(x, y, width, height)
            }
            #[inline]
            pub unsafe fn Make3D(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            ) -> root::MTL::Region {
                Region_Make3D(x, y, z, width, height, depth)
            }
            #[inline]
            pub unsafe fn new(x: root::NS::UInteger, width: root::NS::UInteger) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Region_Region(__bindgen_tmp.as_mut_ptr(), x, width);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Region_Region1(__bindgen_tmp.as_mut_ptr(), x, y, width, height);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(
                x: root::NS::UInteger,
                y: root::NS::UInteger,
                z: root::NS::UInteger,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                depth: root::NS::UInteger,
            ) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Region_Region2(__bindgen_tmp.as_mut_ptr(), x, y, z, width, height, depth);
                __bindgen_tmp.assume_init()
            }
        }
        pub type Coordinate2D = root::MTL::SamplePosition;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct SamplePosition {
            pub x: f32,
            pub y: f32,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14SamplePosition4MakeEff"]
            pub fn SamplePosition_Make(x: f32, y: f32) -> root::MTL::SamplePosition;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14SamplePositionC1Eff"]
            pub fn SamplePosition_SamplePosition(
                this: *mut root::MTL::SamplePosition,
                _x: f32,
                _y: f32,
            );
        }
        impl SamplePosition {
            #[inline]
            pub unsafe fn Make(x: f32, y: f32) -> root::MTL::SamplePosition {
                SamplePosition_Make(x, y)
            }
            #[inline]
            pub unsafe fn new(_x: f32, _y: f32) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                SamplePosition_SamplePosition(__bindgen_tmp.as_mut_ptr(), _x, _y);
                __bindgen_tmp.assume_init()
            }
        }
        pub const TextureType_TextureType1D: root::MTL::TextureType = 0;
        pub const TextureType_TextureType1DArray: root::MTL::TextureType = 1;
        pub const TextureType_TextureType2D: root::MTL::TextureType = 2;
        pub const TextureType_TextureType2DArray: root::MTL::TextureType = 3;
        pub const TextureType_TextureType2DMultisample: root::MTL::TextureType = 4;
        pub const TextureType_TextureTypeCube: root::MTL::TextureType = 5;
        pub const TextureType_TextureTypeCubeArray: root::MTL::TextureType = 6;
        pub const TextureType_TextureType3D: root::MTL::TextureType = 7;
        pub const TextureType_TextureType2DMultisampleArray: root::MTL::TextureType = 8;
        pub const TextureType_TextureTypeTextureBuffer: root::MTL::TextureType = 9;
        pub type TextureType = root::NS::UInteger;
        pub const TextureSwizzle_TextureSwizzleZero: root::MTL::TextureSwizzle = 0;
        pub const TextureSwizzle_TextureSwizzleOne: root::MTL::TextureSwizzle = 1;
        pub const TextureSwizzle_TextureSwizzleRed: root::MTL::TextureSwizzle = 2;
        pub const TextureSwizzle_TextureSwizzleGreen: root::MTL::TextureSwizzle = 3;
        pub const TextureSwizzle_TextureSwizzleBlue: root::MTL::TextureSwizzle = 4;
        pub const TextureSwizzle_TextureSwizzleAlpha: root::MTL::TextureSwizzle = 5;
        pub type TextureSwizzle = u8;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct TextureSwizzleChannels {
            pub red: root::MTL::TextureSwizzle,
            pub green: root::MTL::TextureSwizzle,
            pub blue: root::MTL::TextureSwizzle,
            pub alpha: root::MTL::TextureSwizzle,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct SharedTextureHandle {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19SharedTextureHandle5allocEv"]
            pub fn SharedTextureHandle_alloc() -> *mut root::MTL::SharedTextureHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19SharedTextureHandle4initEv"]
            pub fn SharedTextureHandle_init(
                this: *mut root::MTL::SharedTextureHandle,
            ) -> *mut root::MTL::SharedTextureHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19SharedTextureHandle6deviceEv"]
            pub fn SharedTextureHandle_device(
                this: *const root::MTL::SharedTextureHandle,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19SharedTextureHandle5labelEv"]
            pub fn SharedTextureHandle_label(
                this: *const root::MTL::SharedTextureHandle,
            ) -> *mut root::NS::String;
        }
        impl SharedTextureHandle {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::SharedTextureHandle {
                SharedTextureHandle_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::SharedTextureHandle {
                SharedTextureHandle_init(self)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                SharedTextureHandle_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                SharedTextureHandle_label(self)
            }
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct SharedTextureHandlePrivate {
            pub _address: u8,
        }
        pub type TextureUsage = root::NS::UInteger;
        pub const MTL_TextureUsageUnknown: root::MTL::TextureUsage = 0;
        pub const MTL_TextureUsageShaderRead: root::MTL::TextureUsage = 1;
        pub const MTL_TextureUsageShaderWrite: root::MTL::TextureUsage = 2;
        pub const MTL_TextureUsageRenderTarget: root::MTL::TextureUsage = 4;
        pub const MTL_TextureUsagePixelFormatView: root::MTL::TextureUsage = 16;
        pub type _bindgen_ty_4 = root::MTL::TextureUsage;
        pub const TextureCompressionType_TextureCompressionTypeLossless:
            root::MTL::TextureCompressionType = 0;
        pub const TextureCompressionType_TextureCompressionTypeLossy:
            root::MTL::TextureCompressionType = 1;
        pub type TextureCompressionType = root::NS::Integer;
        #[repr(C)]
        #[derive(Debug)]
        pub struct TextureDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor5allocEv"]
            pub fn TextureDescriptor_alloc() -> *mut root::MTL::TextureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor4initEv"]
            pub fn TextureDescriptor_init(
                this: *mut root::MTL::TextureDescriptor,
            ) -> *mut root::MTL::TextureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor19texture2DDescriptorENS_11PixelFormatEmmb"]
            pub fn TextureDescriptor_texture2DDescriptor(
                pixelFormat: root::MTL::PixelFormat,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                mipmapped: bool,
            ) -> *mut root::MTL::TextureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor21textureCubeDescriptorENS_11PixelFormatEmb"]
            pub fn TextureDescriptor_textureCubeDescriptor(
                pixelFormat: root::MTL::PixelFormat,
                size: root::NS::UInteger,
                mipmapped: bool,
            ) -> *mut root::MTL::TextureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor23textureBufferDescriptorENS_11PixelFormatEmmm"]
            pub fn TextureDescriptor_textureBufferDescriptor(
                pixelFormat: root::MTL::PixelFormat,
                width: root::NS::UInteger,
                resourceOptions: root::MTL::ResourceOptions,
                usage: root::MTL::TextureUsage,
            ) -> *mut root::MTL::TextureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor11textureTypeEv"]
            pub fn TextureDescriptor_textureType(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::TextureType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor14setTextureTypeENS_11TextureTypeE"]
            pub fn TextureDescriptor_setTextureType(
                this: *mut root::MTL::TextureDescriptor,
                textureType: root::MTL::TextureType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor11pixelFormatEv"]
            pub fn TextureDescriptor_pixelFormat(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor14setPixelFormatENS_11PixelFormatE"]
            pub fn TextureDescriptor_setPixelFormat(
                this: *mut root::MTL::TextureDescriptor,
                pixelFormat: root::MTL::PixelFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor5widthEv"]
            pub fn TextureDescriptor_width(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor8setWidthEm"]
            pub fn TextureDescriptor_setWidth(
                this: *mut root::MTL::TextureDescriptor,
                width: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor6heightEv"]
            pub fn TextureDescriptor_height(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor9setHeightEm"]
            pub fn TextureDescriptor_setHeight(
                this: *mut root::MTL::TextureDescriptor,
                height: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor5depthEv"]
            pub fn TextureDescriptor_depth(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor8setDepthEm"]
            pub fn TextureDescriptor_setDepth(
                this: *mut root::MTL::TextureDescriptor,
                depth: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor16mipmapLevelCountEv"]
            pub fn TextureDescriptor_mipmapLevelCount(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor19setMipmapLevelCountEm"]
            pub fn TextureDescriptor_setMipmapLevelCount(
                this: *mut root::MTL::TextureDescriptor,
                mipmapLevelCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor11sampleCountEv"]
            pub fn TextureDescriptor_sampleCount(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor14setSampleCountEm"]
            pub fn TextureDescriptor_setSampleCount(
                this: *mut root::MTL::TextureDescriptor,
                sampleCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor11arrayLengthEv"]
            pub fn TextureDescriptor_arrayLength(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor14setArrayLengthEm"]
            pub fn TextureDescriptor_setArrayLength(
                this: *mut root::MTL::TextureDescriptor,
                arrayLength: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor15resourceOptionsEv"]
            pub fn TextureDescriptor_resourceOptions(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::ResourceOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor18setResourceOptionsEm"]
            pub fn TextureDescriptor_setResourceOptions(
                this: *mut root::MTL::TextureDescriptor,
                resourceOptions: root::MTL::ResourceOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor12cpuCacheModeEv"]
            pub fn TextureDescriptor_cpuCacheMode(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::CPUCacheMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor15setCpuCacheModeENS_12CPUCacheModeE"]
            pub fn TextureDescriptor_setCpuCacheMode(
                this: *mut root::MTL::TextureDescriptor,
                cpuCacheMode: root::MTL::CPUCacheMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor11storageModeEv"]
            pub fn TextureDescriptor_storageMode(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::StorageMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor14setStorageModeENS_11StorageModeE"]
            pub fn TextureDescriptor_setStorageMode(
                this: *mut root::MTL::TextureDescriptor,
                storageMode: root::MTL::StorageMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor18hazardTrackingModeEv"]
            pub fn TextureDescriptor_hazardTrackingMode(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::HazardTrackingMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor21setHazardTrackingModeENS_18HazardTrackingModeE"]
            pub fn TextureDescriptor_setHazardTrackingMode(
                this: *mut root::MTL::TextureDescriptor,
                hazardTrackingMode: root::MTL::HazardTrackingMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor5usageEv"]
            pub fn TextureDescriptor_usage(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::TextureUsage;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor8setUsageEm"]
            pub fn TextureDescriptor_setUsage(
                this: *mut root::MTL::TextureDescriptor,
                usage: root::MTL::TextureUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor25allowGPUOptimizedContentsEv"]
            pub fn TextureDescriptor_allowGPUOptimizedContents(
                this: *const root::MTL::TextureDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor28setAllowGPUOptimizedContentsEb"]
            pub fn TextureDescriptor_setAllowGPUOptimizedContents(
                this: *mut root::MTL::TextureDescriptor,
                allowGPUOptimizedContents: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17TextureDescriptor7swizzleEv"]
            pub fn TextureDescriptor_swizzle(
                this: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::TextureSwizzleChannels;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17TextureDescriptor10setSwizzleENS_22TextureSwizzleChannelsE"]
            pub fn TextureDescriptor_setSwizzle(
                this: *mut root::MTL::TextureDescriptor,
                swizzle: root::MTL::TextureSwizzleChannels,
            );
        }
        impl TextureDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::TextureDescriptor {
                TextureDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::TextureDescriptor {
                TextureDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn texture2DDescriptor(
                pixelFormat: root::MTL::PixelFormat,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
                mipmapped: bool,
            ) -> *mut root::MTL::TextureDescriptor {
                TextureDescriptor_texture2DDescriptor(pixelFormat, width, height, mipmapped)
            }
            #[inline]
            pub unsafe fn textureCubeDescriptor(
                pixelFormat: root::MTL::PixelFormat,
                size: root::NS::UInteger,
                mipmapped: bool,
            ) -> *mut root::MTL::TextureDescriptor {
                TextureDescriptor_textureCubeDescriptor(pixelFormat, size, mipmapped)
            }
            #[inline]
            pub unsafe fn textureBufferDescriptor(
                pixelFormat: root::MTL::PixelFormat,
                width: root::NS::UInteger,
                resourceOptions: root::MTL::ResourceOptions,
                usage: root::MTL::TextureUsage,
            ) -> *mut root::MTL::TextureDescriptor {
                TextureDescriptor_textureBufferDescriptor(
                    pixelFormat,
                    width,
                    resourceOptions,
                    usage,
                )
            }
            #[inline]
            pub unsafe fn textureType(&self) -> root::MTL::TextureType {
                TextureDescriptor_textureType(self)
            }
            #[inline]
            pub unsafe fn setTextureType(&mut self, textureType: root::MTL::TextureType) {
                TextureDescriptor_setTextureType(self, textureType)
            }
            #[inline]
            pub unsafe fn pixelFormat(&self) -> root::MTL::PixelFormat {
                TextureDescriptor_pixelFormat(self)
            }
            #[inline]
            pub unsafe fn setPixelFormat(&mut self, pixelFormat: root::MTL::PixelFormat) {
                TextureDescriptor_setPixelFormat(self, pixelFormat)
            }
            #[inline]
            pub unsafe fn width(&self) -> root::NS::UInteger {
                TextureDescriptor_width(self)
            }
            #[inline]
            pub unsafe fn setWidth(&mut self, width: root::NS::UInteger) {
                TextureDescriptor_setWidth(self, width)
            }
            #[inline]
            pub unsafe fn height(&self) -> root::NS::UInteger {
                TextureDescriptor_height(self)
            }
            #[inline]
            pub unsafe fn setHeight(&mut self, height: root::NS::UInteger) {
                TextureDescriptor_setHeight(self, height)
            }
            #[inline]
            pub unsafe fn depth(&self) -> root::NS::UInteger {
                TextureDescriptor_depth(self)
            }
            #[inline]
            pub unsafe fn setDepth(&mut self, depth: root::NS::UInteger) {
                TextureDescriptor_setDepth(self, depth)
            }
            #[inline]
            pub unsafe fn mipmapLevelCount(&self) -> root::NS::UInteger {
                TextureDescriptor_mipmapLevelCount(self)
            }
            #[inline]
            pub unsafe fn setMipmapLevelCount(&mut self, mipmapLevelCount: root::NS::UInteger) {
                TextureDescriptor_setMipmapLevelCount(self, mipmapLevelCount)
            }
            #[inline]
            pub unsafe fn sampleCount(&self) -> root::NS::UInteger {
                TextureDescriptor_sampleCount(self)
            }
            #[inline]
            pub unsafe fn setSampleCount(&mut self, sampleCount: root::NS::UInteger) {
                TextureDescriptor_setSampleCount(self, sampleCount)
            }
            #[inline]
            pub unsafe fn arrayLength(&self) -> root::NS::UInteger {
                TextureDescriptor_arrayLength(self)
            }
            #[inline]
            pub unsafe fn setArrayLength(&mut self, arrayLength: root::NS::UInteger) {
                TextureDescriptor_setArrayLength(self, arrayLength)
            }
            #[inline]
            pub unsafe fn resourceOptions(&self) -> root::MTL::ResourceOptions {
                TextureDescriptor_resourceOptions(self)
            }
            #[inline]
            pub unsafe fn setResourceOptions(
                &mut self,
                resourceOptions: root::MTL::ResourceOptions,
            ) {
                TextureDescriptor_setResourceOptions(self, resourceOptions)
            }
            #[inline]
            pub unsafe fn cpuCacheMode(&self) -> root::MTL::CPUCacheMode {
                TextureDescriptor_cpuCacheMode(self)
            }
            #[inline]
            pub unsafe fn setCpuCacheMode(&mut self, cpuCacheMode: root::MTL::CPUCacheMode) {
                TextureDescriptor_setCpuCacheMode(self, cpuCacheMode)
            }
            #[inline]
            pub unsafe fn storageMode(&self) -> root::MTL::StorageMode {
                TextureDescriptor_storageMode(self)
            }
            #[inline]
            pub unsafe fn setStorageMode(&mut self, storageMode: root::MTL::StorageMode) {
                TextureDescriptor_setStorageMode(self, storageMode)
            }
            #[inline]
            pub unsafe fn hazardTrackingMode(&self) -> root::MTL::HazardTrackingMode {
                TextureDescriptor_hazardTrackingMode(self)
            }
            #[inline]
            pub unsafe fn setHazardTrackingMode(
                &mut self,
                hazardTrackingMode: root::MTL::HazardTrackingMode,
            ) {
                TextureDescriptor_setHazardTrackingMode(self, hazardTrackingMode)
            }
            #[inline]
            pub unsafe fn usage(&self) -> root::MTL::TextureUsage {
                TextureDescriptor_usage(self)
            }
            #[inline]
            pub unsafe fn setUsage(&mut self, usage: root::MTL::TextureUsage) {
                TextureDescriptor_setUsage(self, usage)
            }
            #[inline]
            pub unsafe fn allowGPUOptimizedContents(&self) -> bool {
                TextureDescriptor_allowGPUOptimizedContents(self)
            }
            #[inline]
            pub unsafe fn setAllowGPUOptimizedContents(&mut self, allowGPUOptimizedContents: bool) {
                TextureDescriptor_setAllowGPUOptimizedContents(self, allowGPUOptimizedContents)
            }
            #[inline]
            pub unsafe fn swizzle(&self) -> root::MTL::TextureSwizzleChannels {
                TextureDescriptor_swizzle(self)
            }
            #[inline]
            pub unsafe fn setSwizzle(&mut self, swizzle: root::MTL::TextureSwizzleChannels) {
                TextureDescriptor_setSwizzle(self, swizzle)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Texture {
            pub _base: root::NS::Referencing<root::MTL::Resource>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture12rootResourceEv"]
            pub fn Texture_rootResource(
                this: *const root::MTL::Texture,
            ) -> *mut root::MTL::Resource;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture13parentTextureEv"]
            pub fn Texture_parentTexture(
                this: *const root::MTL::Texture,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture19parentRelativeLevelEv"]
            pub fn Texture_parentRelativeLevel(
                this: *const root::MTL::Texture,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture19parentRelativeSliceEv"]
            pub fn Texture_parentRelativeSlice(
                this: *const root::MTL::Texture,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture6bufferEv"]
            pub fn Texture_buffer(this: *const root::MTL::Texture) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture12bufferOffsetEv"]
            pub fn Texture_bufferOffset(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture17bufferBytesPerRowEv"]
            pub fn Texture_bufferBytesPerRow(this: *const root::MTL::Texture)
                -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture9iosurfaceEv"]
            pub fn Texture_iosurface(this: *const root::MTL::Texture) -> root::IOSurfaceRef;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture14iosurfacePlaneEv"]
            pub fn Texture_iosurfacePlane(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture11textureTypeEv"]
            pub fn Texture_textureType(this: *const root::MTL::Texture) -> root::MTL::TextureType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture11pixelFormatEv"]
            pub fn Texture_pixelFormat(this: *const root::MTL::Texture) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture5widthEv"]
            pub fn Texture_width(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture6heightEv"]
            pub fn Texture_height(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture5depthEv"]
            pub fn Texture_depth(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture16mipmapLevelCountEv"]
            pub fn Texture_mipmapLevelCount(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture11sampleCountEv"]
            pub fn Texture_sampleCount(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture11arrayLengthEv"]
            pub fn Texture_arrayLength(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture5usageEv"]
            pub fn Texture_usage(this: *const root::MTL::Texture) -> root::MTL::TextureUsage;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture9shareableEv"]
            pub fn Texture_shareable(this: *const root::MTL::Texture) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture15framebufferOnlyEv"]
            pub fn Texture_framebufferOnly(this: *const root::MTL::Texture) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture17firstMipmapInTailEv"]
            pub fn Texture_firstMipmapInTail(this: *const root::MTL::Texture)
                -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture15tailSizeInBytesEv"]
            pub fn Texture_tailSizeInBytes(this: *const root::MTL::Texture) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture8isSparseEv"]
            pub fn Texture_isSparse(this: *const root::MTL::Texture) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture25allowGPUOptimizedContentsEv"]
            pub fn Texture_allowGPUOptimizedContents(this: *const root::MTL::Texture) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture8getBytesEPKvmmNS_6RegionEmm"]
            pub fn Texture_getBytes(
                this: *mut root::MTL::Texture,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
                bytesPerImage: root::NS::UInteger,
                region: root::MTL::Region,
                level: root::NS::UInteger,
                slice: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture13replaceRegionENS_6RegionEmmPKvmm"]
            pub fn Texture_replaceRegion(
                this: *mut root::MTL::Texture,
                region: root::MTL::Region,
                level: root::NS::UInteger,
                slice: root::NS::UInteger,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
                bytesPerImage: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture8getBytesEPKvmNS_6RegionEm"]
            pub fn Texture_getBytes1(
                this: *mut root::MTL::Texture,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
                region: root::MTL::Region,
                level: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture13replaceRegionENS_6RegionEmPKvm"]
            pub fn Texture_replaceRegion1(
                this: *mut root::MTL::Texture,
                region: root::MTL::Region,
                level: root::NS::UInteger,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture14newTextureViewENS_11PixelFormatE"]
            pub fn Texture_newTextureView(
                this: *mut root::MTL::Texture,
                pixelFormat: root::MTL::PixelFormat,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture14newTextureViewENS_11PixelFormatENS_11TextureTypeEN2NS5RangeES4_"]
            pub fn Texture_newTextureView1(
                this: *mut root::MTL::Texture,
                pixelFormat: root::MTL::PixelFormat,
                textureType: root::MTL::TextureType,
                levelRange: root::NS::Range,
                sliceRange: root::NS::Range,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture22newSharedTextureHandleEv"]
            pub fn Texture_newSharedTextureHandle(
                this: *mut root::MTL::Texture,
            ) -> *mut root::MTL::SharedTextureHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture20remoteStorageTextureEv"]
            pub fn Texture_remoteStorageTexture(
                this: *const root::MTL::Texture,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture29newRemoteTextureViewForDeviceEPKNS_6DeviceE"]
            pub fn Texture_newRemoteTextureViewForDevice(
                this: *mut root::MTL::Texture,
                device: *const root::MTL::Device,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Texture7swizzleEv"]
            pub fn Texture_swizzle(
                this: *const root::MTL::Texture,
            ) -> root::MTL::TextureSwizzleChannels;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Texture14newTextureViewENS_11PixelFormatENS_11TextureTypeEN2NS5RangeES4_NS_22TextureSwizzleChannelsE"]
            pub fn Texture_newTextureView2(
                this: *mut root::MTL::Texture,
                pixelFormat: root::MTL::PixelFormat,
                textureType: root::MTL::TextureType,
                levelRange: root::NS::Range,
                sliceRange: root::NS::Range,
                swizzle: root::MTL::TextureSwizzleChannels,
            ) -> *mut root::MTL::Texture;
        }
        impl Texture {
            #[inline]
            pub unsafe fn rootResource(&self) -> *mut root::MTL::Resource {
                Texture_rootResource(self)
            }
            #[inline]
            pub unsafe fn parentTexture(&self) -> *mut root::MTL::Texture {
                Texture_parentTexture(self)
            }
            #[inline]
            pub unsafe fn parentRelativeLevel(&self) -> root::NS::UInteger {
                Texture_parentRelativeLevel(self)
            }
            #[inline]
            pub unsafe fn parentRelativeSlice(&self) -> root::NS::UInteger {
                Texture_parentRelativeSlice(self)
            }
            #[inline]
            pub unsafe fn buffer(&self) -> *mut root::MTL::Buffer {
                Texture_buffer(self)
            }
            #[inline]
            pub unsafe fn bufferOffset(&self) -> root::NS::UInteger {
                Texture_bufferOffset(self)
            }
            #[inline]
            pub unsafe fn bufferBytesPerRow(&self) -> root::NS::UInteger {
                Texture_bufferBytesPerRow(self)
            }
            #[inline]
            pub unsafe fn iosurface(&self) -> root::IOSurfaceRef {
                Texture_iosurface(self)
            }
            #[inline]
            pub unsafe fn iosurfacePlane(&self) -> root::NS::UInteger {
                Texture_iosurfacePlane(self)
            }
            #[inline]
            pub unsafe fn textureType(&self) -> root::MTL::TextureType {
                Texture_textureType(self)
            }
            #[inline]
            pub unsafe fn pixelFormat(&self) -> root::MTL::PixelFormat {
                Texture_pixelFormat(self)
            }
            #[inline]
            pub unsafe fn width(&self) -> root::NS::UInteger {
                Texture_width(self)
            }
            #[inline]
            pub unsafe fn height(&self) -> root::NS::UInteger {
                Texture_height(self)
            }
            #[inline]
            pub unsafe fn depth(&self) -> root::NS::UInteger {
                Texture_depth(self)
            }
            #[inline]
            pub unsafe fn mipmapLevelCount(&self) -> root::NS::UInteger {
                Texture_mipmapLevelCount(self)
            }
            #[inline]
            pub unsafe fn sampleCount(&self) -> root::NS::UInteger {
                Texture_sampleCount(self)
            }
            #[inline]
            pub unsafe fn arrayLength(&self) -> root::NS::UInteger {
                Texture_arrayLength(self)
            }
            #[inline]
            pub unsafe fn usage(&self) -> root::MTL::TextureUsage {
                Texture_usage(self)
            }
            #[inline]
            pub unsafe fn shareable(&self) -> bool {
                Texture_shareable(self)
            }
            #[inline]
            pub unsafe fn framebufferOnly(&self) -> bool {
                Texture_framebufferOnly(self)
            }
            #[inline]
            pub unsafe fn firstMipmapInTail(&self) -> root::NS::UInteger {
                Texture_firstMipmapInTail(self)
            }
            #[inline]
            pub unsafe fn tailSizeInBytes(&self) -> root::NS::UInteger {
                Texture_tailSizeInBytes(self)
            }
            #[inline]
            pub unsafe fn isSparse(&self) -> bool {
                Texture_isSparse(self)
            }
            #[inline]
            pub unsafe fn allowGPUOptimizedContents(&self) -> bool {
                Texture_allowGPUOptimizedContents(self)
            }
            #[inline]
            pub unsafe fn getBytes(
                &mut self,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
                bytesPerImage: root::NS::UInteger,
                region: root::MTL::Region,
                level: root::NS::UInteger,
                slice: root::NS::UInteger,
            ) {
                Texture_getBytes(
                    self,
                    pixelBytes,
                    bytesPerRow,
                    bytesPerImage,
                    region,
                    level,
                    slice,
                )
            }
            #[inline]
            pub unsafe fn replaceRegion(
                &mut self,
                region: root::MTL::Region,
                level: root::NS::UInteger,
                slice: root::NS::UInteger,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
                bytesPerImage: root::NS::UInteger,
            ) {
                Texture_replaceRegion(
                    self,
                    region,
                    level,
                    slice,
                    pixelBytes,
                    bytesPerRow,
                    bytesPerImage,
                )
            }
            #[inline]
            pub unsafe fn getBytes1(
                &mut self,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
                region: root::MTL::Region,
                level: root::NS::UInteger,
            ) {
                Texture_getBytes1(self, pixelBytes, bytesPerRow, region, level)
            }
            #[inline]
            pub unsafe fn replaceRegion1(
                &mut self,
                region: root::MTL::Region,
                level: root::NS::UInteger,
                pixelBytes: *const ::std::os::raw::c_void,
                bytesPerRow: root::NS::UInteger,
            ) {
                Texture_replaceRegion1(self, region, level, pixelBytes, bytesPerRow)
            }
            #[inline]
            pub unsafe fn newTextureView(
                &mut self,
                pixelFormat: root::MTL::PixelFormat,
            ) -> *mut root::MTL::Texture {
                Texture_newTextureView(self, pixelFormat)
            }
            #[inline]
            pub unsafe fn newTextureView1(
                &mut self,
                pixelFormat: root::MTL::PixelFormat,
                textureType: root::MTL::TextureType,
                levelRange: root::NS::Range,
                sliceRange: root::NS::Range,
            ) -> *mut root::MTL::Texture {
                Texture_newTextureView1(self, pixelFormat, textureType, levelRange, sliceRange)
            }
            #[inline]
            pub unsafe fn newSharedTextureHandle(&mut self) -> *mut root::MTL::SharedTextureHandle {
                Texture_newSharedTextureHandle(self)
            }
            #[inline]
            pub unsafe fn remoteStorageTexture(&self) -> *mut root::MTL::Texture {
                Texture_remoteStorageTexture(self)
            }
            #[inline]
            pub unsafe fn newRemoteTextureViewForDevice(
                &mut self,
                device: *const root::MTL::Device,
            ) -> *mut root::MTL::Texture {
                Texture_newRemoteTextureViewForDevice(self, device)
            }
            #[inline]
            pub unsafe fn swizzle(&self) -> root::MTL::TextureSwizzleChannels {
                Texture_swizzle(self)
            }
            #[inline]
            pub unsafe fn newTextureView2(
                &mut self,
                pixelFormat: root::MTL::PixelFormat,
                textureType: root::MTL::TextureType,
                levelRange: root::NS::Range,
                sliceRange: root::NS::Range,
                swizzle: root::MTL::TextureSwizzleChannels,
            ) -> *mut root::MTL::Texture {
                Texture_newTextureView2(
                    self,
                    pixelFormat,
                    textureType,
                    levelRange,
                    sliceRange,
                    swizzle,
                )
            }
        }
        pub const DataType_DataTypeNone: root::MTL::DataType = 0;
        pub const DataType_DataTypeStruct: root::MTL::DataType = 1;
        pub const DataType_DataTypeArray: root::MTL::DataType = 2;
        pub const DataType_DataTypeFloat: root::MTL::DataType = 3;
        pub const DataType_DataTypeFloat2: root::MTL::DataType = 4;
        pub const DataType_DataTypeFloat3: root::MTL::DataType = 5;
        pub const DataType_DataTypeFloat4: root::MTL::DataType = 6;
        pub const DataType_DataTypeFloat2x2: root::MTL::DataType = 7;
        pub const DataType_DataTypeFloat2x3: root::MTL::DataType = 8;
        pub const DataType_DataTypeFloat2x4: root::MTL::DataType = 9;
        pub const DataType_DataTypeFloat3x2: root::MTL::DataType = 10;
        pub const DataType_DataTypeFloat3x3: root::MTL::DataType = 11;
        pub const DataType_DataTypeFloat3x4: root::MTL::DataType = 12;
        pub const DataType_DataTypeFloat4x2: root::MTL::DataType = 13;
        pub const DataType_DataTypeFloat4x3: root::MTL::DataType = 14;
        pub const DataType_DataTypeFloat4x4: root::MTL::DataType = 15;
        pub const DataType_DataTypeHalf: root::MTL::DataType = 16;
        pub const DataType_DataTypeHalf2: root::MTL::DataType = 17;
        pub const DataType_DataTypeHalf3: root::MTL::DataType = 18;
        pub const DataType_DataTypeHalf4: root::MTL::DataType = 19;
        pub const DataType_DataTypeHalf2x2: root::MTL::DataType = 20;
        pub const DataType_DataTypeHalf2x3: root::MTL::DataType = 21;
        pub const DataType_DataTypeHalf2x4: root::MTL::DataType = 22;
        pub const DataType_DataTypeHalf3x2: root::MTL::DataType = 23;
        pub const DataType_DataTypeHalf3x3: root::MTL::DataType = 24;
        pub const DataType_DataTypeHalf3x4: root::MTL::DataType = 25;
        pub const DataType_DataTypeHalf4x2: root::MTL::DataType = 26;
        pub const DataType_DataTypeHalf4x3: root::MTL::DataType = 27;
        pub const DataType_DataTypeHalf4x4: root::MTL::DataType = 28;
        pub const DataType_DataTypeInt: root::MTL::DataType = 29;
        pub const DataType_DataTypeInt2: root::MTL::DataType = 30;
        pub const DataType_DataTypeInt3: root::MTL::DataType = 31;
        pub const DataType_DataTypeInt4: root::MTL::DataType = 32;
        pub const DataType_DataTypeUInt: root::MTL::DataType = 33;
        pub const DataType_DataTypeUInt2: root::MTL::DataType = 34;
        pub const DataType_DataTypeUInt3: root::MTL::DataType = 35;
        pub const DataType_DataTypeUInt4: root::MTL::DataType = 36;
        pub const DataType_DataTypeShort: root::MTL::DataType = 37;
        pub const DataType_DataTypeShort2: root::MTL::DataType = 38;
        pub const DataType_DataTypeShort3: root::MTL::DataType = 39;
        pub const DataType_DataTypeShort4: root::MTL::DataType = 40;
        pub const DataType_DataTypeUShort: root::MTL::DataType = 41;
        pub const DataType_DataTypeUShort2: root::MTL::DataType = 42;
        pub const DataType_DataTypeUShort3: root::MTL::DataType = 43;
        pub const DataType_DataTypeUShort4: root::MTL::DataType = 44;
        pub const DataType_DataTypeChar: root::MTL::DataType = 45;
        pub const DataType_DataTypeChar2: root::MTL::DataType = 46;
        pub const DataType_DataTypeChar3: root::MTL::DataType = 47;
        pub const DataType_DataTypeChar4: root::MTL::DataType = 48;
        pub const DataType_DataTypeUChar: root::MTL::DataType = 49;
        pub const DataType_DataTypeUChar2: root::MTL::DataType = 50;
        pub const DataType_DataTypeUChar3: root::MTL::DataType = 51;
        pub const DataType_DataTypeUChar4: root::MTL::DataType = 52;
        pub const DataType_DataTypeBool: root::MTL::DataType = 53;
        pub const DataType_DataTypeBool2: root::MTL::DataType = 54;
        pub const DataType_DataTypeBool3: root::MTL::DataType = 55;
        pub const DataType_DataTypeBool4: root::MTL::DataType = 56;
        pub const DataType_DataTypeTexture: root::MTL::DataType = 58;
        pub const DataType_DataTypeSampler: root::MTL::DataType = 59;
        pub const DataType_DataTypePointer: root::MTL::DataType = 60;
        pub const DataType_DataTypeR8Unorm: root::MTL::DataType = 62;
        pub const DataType_DataTypeR8Snorm: root::MTL::DataType = 63;
        pub const DataType_DataTypeR16Unorm: root::MTL::DataType = 64;
        pub const DataType_DataTypeR16Snorm: root::MTL::DataType = 65;
        pub const DataType_DataTypeRG8Unorm: root::MTL::DataType = 66;
        pub const DataType_DataTypeRG8Snorm: root::MTL::DataType = 67;
        pub const DataType_DataTypeRG16Unorm: root::MTL::DataType = 68;
        pub const DataType_DataTypeRG16Snorm: root::MTL::DataType = 69;
        pub const DataType_DataTypeRGBA8Unorm: root::MTL::DataType = 70;
        pub const DataType_DataTypeRGBA8Unorm_sRGB: root::MTL::DataType = 71;
        pub const DataType_DataTypeRGBA8Snorm: root::MTL::DataType = 72;
        pub const DataType_DataTypeRGBA16Unorm: root::MTL::DataType = 73;
        pub const DataType_DataTypeRGBA16Snorm: root::MTL::DataType = 74;
        pub const DataType_DataTypeRGB10A2Unorm: root::MTL::DataType = 75;
        pub const DataType_DataTypeRG11B10Float: root::MTL::DataType = 76;
        pub const DataType_DataTypeRGB9E5Float: root::MTL::DataType = 77;
        pub const DataType_DataTypeRenderPipeline: root::MTL::DataType = 78;
        pub const DataType_DataTypeComputePipeline: root::MTL::DataType = 79;
        pub const DataType_DataTypeIndirectCommandBuffer: root::MTL::DataType = 80;
        pub const DataType_DataTypeLong: root::MTL::DataType = 81;
        pub const DataType_DataTypeLong2: root::MTL::DataType = 82;
        pub const DataType_DataTypeLong3: root::MTL::DataType = 83;
        pub const DataType_DataTypeLong4: root::MTL::DataType = 84;
        pub const DataType_DataTypeULong: root::MTL::DataType = 85;
        pub const DataType_DataTypeULong2: root::MTL::DataType = 86;
        pub const DataType_DataTypeULong3: root::MTL::DataType = 87;
        pub const DataType_DataTypeULong4: root::MTL::DataType = 88;
        pub const DataType_DataTypeVisibleFunctionTable: root::MTL::DataType = 115;
        pub const DataType_DataTypeIntersectionFunctionTable: root::MTL::DataType = 116;
        pub const DataType_DataTypePrimitiveAccelerationStructure: root::MTL::DataType = 117;
        pub const DataType_DataTypeInstanceAccelerationStructure: root::MTL::DataType = 118;
        pub type DataType = root::NS::UInteger;
        pub const ArgumentType_ArgumentTypeBuffer: root::MTL::ArgumentType = 0;
        pub const ArgumentType_ArgumentTypeThreadgroupMemory: root::MTL::ArgumentType = 1;
        pub const ArgumentType_ArgumentTypeTexture: root::MTL::ArgumentType = 2;
        pub const ArgumentType_ArgumentTypeSampler: root::MTL::ArgumentType = 3;
        pub const ArgumentType_ArgumentTypeImageblockData: root::MTL::ArgumentType = 16;
        pub const ArgumentType_ArgumentTypeImageblock: root::MTL::ArgumentType = 17;
        pub const ArgumentType_ArgumentTypeVisibleFunctionTable: root::MTL::ArgumentType = 24;
        pub const ArgumentType_ArgumentTypePrimitiveAccelerationStructure: root::MTL::ArgumentType =
            25;
        pub const ArgumentType_ArgumentTypeInstanceAccelerationStructure: root::MTL::ArgumentType =
            26;
        pub const ArgumentType_ArgumentTypeIntersectionFunctionTable: root::MTL::ArgumentType = 27;
        pub type ArgumentType = root::NS::UInteger;
        pub const ArgumentAccess_ArgumentAccessReadOnly: root::MTL::ArgumentAccess = 0;
        pub const ArgumentAccess_ArgumentAccessReadWrite: root::MTL::ArgumentAccess = 1;
        pub const ArgumentAccess_ArgumentAccessWriteOnly: root::MTL::ArgumentAccess = 2;
        pub type ArgumentAccess = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Type {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Type5allocEv"]
            pub fn Type_alloc() -> *mut root::MTL::Type;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Type4initEv"]
            pub fn Type_init(this: *mut root::MTL::Type) -> *mut root::MTL::Type;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Type8dataTypeEv"]
            pub fn Type_dataType(this: *const root::MTL::Type) -> root::MTL::DataType;
        }
        impl Type {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::Type {
                Type_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::Type {
                Type_init(self)
            }
            #[inline]
            pub unsafe fn dataType(&self) -> root::MTL::DataType {
                Type_dataType(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct StructMember {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12StructMember5allocEv"]
            pub fn StructMember_alloc() -> *mut root::MTL::StructMember;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12StructMember4initEv"]
            pub fn StructMember_init(
                this: *mut root::MTL::StructMember,
            ) -> *mut root::MTL::StructMember;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12StructMember4nameEv"]
            pub fn StructMember_name(this: *const root::MTL::StructMember)
                -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12StructMember6offsetEv"]
            pub fn StructMember_offset(this: *const root::MTL::StructMember) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12StructMember8dataTypeEv"]
            pub fn StructMember_dataType(
                this: *const root::MTL::StructMember,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12StructMember10structTypeEv"]
            pub fn StructMember_structType(
                this: *mut root::MTL::StructMember,
            ) -> *mut root::MTL::StructType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12StructMember9arrayTypeEv"]
            pub fn StructMember_arrayType(
                this: *mut root::MTL::StructMember,
            ) -> *mut root::MTL::ArrayType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12StructMember20textureReferenceTypeEv"]
            pub fn StructMember_textureReferenceType(
                this: *mut root::MTL::StructMember,
            ) -> *mut root::MTL::TextureReferenceType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12StructMember11pointerTypeEv"]
            pub fn StructMember_pointerType(
                this: *mut root::MTL::StructMember,
            ) -> *mut root::MTL::PointerType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12StructMember13argumentIndexEv"]
            pub fn StructMember_argumentIndex(
                this: *const root::MTL::StructMember,
            ) -> root::NS::UInteger;
        }
        impl StructMember {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::StructMember {
                StructMember_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::StructMember {
                StructMember_init(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                StructMember_name(self)
            }
            #[inline]
            pub unsafe fn offset(&self) -> root::NS::UInteger {
                StructMember_offset(self)
            }
            #[inline]
            pub unsafe fn dataType(&self) -> root::MTL::DataType {
                StructMember_dataType(self)
            }
            #[inline]
            pub unsafe fn structType(&mut self) -> *mut root::MTL::StructType {
                StructMember_structType(self)
            }
            #[inline]
            pub unsafe fn arrayType(&mut self) -> *mut root::MTL::ArrayType {
                StructMember_arrayType(self)
            }
            #[inline]
            pub unsafe fn textureReferenceType(&mut self) -> *mut root::MTL::TextureReferenceType {
                StructMember_textureReferenceType(self)
            }
            #[inline]
            pub unsafe fn pointerType(&mut self) -> *mut root::MTL::PointerType {
                StructMember_pointerType(self)
            }
            #[inline]
            pub unsafe fn argumentIndex(&self) -> root::NS::UInteger {
                StructMember_argumentIndex(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct StructType {
            pub _base: root::NS::Referencing<root::MTL::Type>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL10StructType5allocEv"]
            pub fn StructType_alloc() -> *mut root::MTL::StructType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL10StructType4initEv"]
            pub fn StructType_init(this: *mut root::MTL::StructType) -> *mut root::MTL::StructType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL10StructType7membersEv"]
            pub fn StructType_members(this: *const root::MTL::StructType) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL10StructType12memberByNameEPKN2NS6StringE"]
            pub fn StructType_memberByName(
                this: *mut root::MTL::StructType,
                name: *const root::NS::String,
            ) -> *mut root::MTL::StructMember;
        }
        impl StructType {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::StructType {
                StructType_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::StructType {
                StructType_init(self)
            }
            #[inline]
            pub unsafe fn members(&self) -> *mut root::NS::Array {
                StructType_members(self)
            }
            #[inline]
            pub unsafe fn memberByName(
                &mut self,
                name: *const root::NS::String,
            ) -> *mut root::MTL::StructMember {
                StructType_memberByName(self, name)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ArrayType {
            pub _base: root::NS::Referencing<root::MTL::Type>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9ArrayType5allocEv"]
            pub fn ArrayType_alloc() -> *mut root::MTL::ArrayType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9ArrayType4initEv"]
            pub fn ArrayType_init(this: *mut root::MTL::ArrayType) -> *mut root::MTL::ArrayType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9ArrayType11elementTypeEv"]
            pub fn ArrayType_elementType(this: *const root::MTL::ArrayType) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9ArrayType11arrayLengthEv"]
            pub fn ArrayType_arrayLength(this: *const root::MTL::ArrayType) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9ArrayType6strideEv"]
            pub fn ArrayType_stride(this: *const root::MTL::ArrayType) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9ArrayType19argumentIndexStrideEv"]
            pub fn ArrayType_argumentIndexStride(
                this: *const root::MTL::ArrayType,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9ArrayType17elementStructTypeEv"]
            pub fn ArrayType_elementStructType(
                this: *mut root::MTL::ArrayType,
            ) -> *mut root::MTL::StructType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9ArrayType16elementArrayTypeEv"]
            pub fn ArrayType_elementArrayType(
                this: *mut root::MTL::ArrayType,
            ) -> *mut root::MTL::ArrayType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9ArrayType27elementTextureReferenceTypeEv"]
            pub fn ArrayType_elementTextureReferenceType(
                this: *mut root::MTL::ArrayType,
            ) -> *mut root::MTL::TextureReferenceType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9ArrayType18elementPointerTypeEv"]
            pub fn ArrayType_elementPointerType(
                this: *mut root::MTL::ArrayType,
            ) -> *mut root::MTL::PointerType;
        }
        impl ArrayType {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ArrayType {
                ArrayType_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::ArrayType {
                ArrayType_init(self)
            }
            #[inline]
            pub unsafe fn elementType(&self) -> root::MTL::DataType {
                ArrayType_elementType(self)
            }
            #[inline]
            pub unsafe fn arrayLength(&self) -> root::NS::UInteger {
                ArrayType_arrayLength(self)
            }
            #[inline]
            pub unsafe fn stride(&self) -> root::NS::UInteger {
                ArrayType_stride(self)
            }
            #[inline]
            pub unsafe fn argumentIndexStride(&self) -> root::NS::UInteger {
                ArrayType_argumentIndexStride(self)
            }
            #[inline]
            pub unsafe fn elementStructType(&mut self) -> *mut root::MTL::StructType {
                ArrayType_elementStructType(self)
            }
            #[inline]
            pub unsafe fn elementArrayType(&mut self) -> *mut root::MTL::ArrayType {
                ArrayType_elementArrayType(self)
            }
            #[inline]
            pub unsafe fn elementTextureReferenceType(
                &mut self,
            ) -> *mut root::MTL::TextureReferenceType {
                ArrayType_elementTextureReferenceType(self)
            }
            #[inline]
            pub unsafe fn elementPointerType(&mut self) -> *mut root::MTL::PointerType {
                ArrayType_elementPointerType(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct PointerType {
            pub _base: root::NS::Referencing<root::MTL::Type>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL11PointerType5allocEv"]
            pub fn PointerType_alloc() -> *mut root::MTL::PointerType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL11PointerType4initEv"]
            pub fn PointerType_init(
                this: *mut root::MTL::PointerType,
            ) -> *mut root::MTL::PointerType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11PointerType11elementTypeEv"]
            pub fn PointerType_elementType(
                this: *const root::MTL::PointerType,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11PointerType6accessEv"]
            pub fn PointerType_access(
                this: *const root::MTL::PointerType,
            ) -> root::MTL::ArgumentAccess;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11PointerType9alignmentEv"]
            pub fn PointerType_alignment(this: *const root::MTL::PointerType)
                -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11PointerType8dataSizeEv"]
            pub fn PointerType_dataSize(this: *const root::MTL::PointerType) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11PointerType23elementIsArgumentBufferEv"]
            pub fn PointerType_elementIsArgumentBuffer(this: *const root::MTL::PointerType)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL11PointerType17elementStructTypeEv"]
            pub fn PointerType_elementStructType(
                this: *mut root::MTL::PointerType,
            ) -> *mut root::MTL::StructType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL11PointerType16elementArrayTypeEv"]
            pub fn PointerType_elementArrayType(
                this: *mut root::MTL::PointerType,
            ) -> *mut root::MTL::ArrayType;
        }
        impl PointerType {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::PointerType {
                PointerType_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::PointerType {
                PointerType_init(self)
            }
            #[inline]
            pub unsafe fn elementType(&self) -> root::MTL::DataType {
                PointerType_elementType(self)
            }
            #[inline]
            pub unsafe fn access(&self) -> root::MTL::ArgumentAccess {
                PointerType_access(self)
            }
            #[inline]
            pub unsafe fn alignment(&self) -> root::NS::UInteger {
                PointerType_alignment(self)
            }
            #[inline]
            pub unsafe fn dataSize(&self) -> root::NS::UInteger {
                PointerType_dataSize(self)
            }
            #[inline]
            pub unsafe fn elementIsArgumentBuffer(&self) -> bool {
                PointerType_elementIsArgumentBuffer(self)
            }
            #[inline]
            pub unsafe fn elementStructType(&mut self) -> *mut root::MTL::StructType {
                PointerType_elementStructType(self)
            }
            #[inline]
            pub unsafe fn elementArrayType(&mut self) -> *mut root::MTL::ArrayType {
                PointerType_elementArrayType(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct TextureReferenceType {
            pub _base: root::NS::Referencing<root::MTL::Type>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20TextureReferenceType5allocEv"]
            pub fn TextureReferenceType_alloc() -> *mut root::MTL::TextureReferenceType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20TextureReferenceType4initEv"]
            pub fn TextureReferenceType_init(
                this: *mut root::MTL::TextureReferenceType,
            ) -> *mut root::MTL::TextureReferenceType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20TextureReferenceType15textureDataTypeEv"]
            pub fn TextureReferenceType_textureDataType(
                this: *const root::MTL::TextureReferenceType,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20TextureReferenceType11textureTypeEv"]
            pub fn TextureReferenceType_textureType(
                this: *const root::MTL::TextureReferenceType,
            ) -> root::MTL::TextureType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20TextureReferenceType6accessEv"]
            pub fn TextureReferenceType_access(
                this: *const root::MTL::TextureReferenceType,
            ) -> root::MTL::ArgumentAccess;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20TextureReferenceType14isDepthTextureEv"]
            pub fn TextureReferenceType_isDepthTexture(
                this: *const root::MTL::TextureReferenceType,
            ) -> bool;
        }
        impl TextureReferenceType {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::TextureReferenceType {
                TextureReferenceType_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::TextureReferenceType {
                TextureReferenceType_init(self)
            }
            #[inline]
            pub unsafe fn textureDataType(&self) -> root::MTL::DataType {
                TextureReferenceType_textureDataType(self)
            }
            #[inline]
            pub unsafe fn textureType(&self) -> root::MTL::TextureType {
                TextureReferenceType_textureType(self)
            }
            #[inline]
            pub unsafe fn access(&self) -> root::MTL::ArgumentAccess {
                TextureReferenceType_access(self)
            }
            #[inline]
            pub unsafe fn isDepthTexture(&self) -> bool {
                TextureReferenceType_isDepthTexture(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Argument {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Argument5allocEv"]
            pub fn Argument_alloc() -> *mut root::MTL::Argument;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Argument4initEv"]
            pub fn Argument_init(this: *mut root::MTL::Argument) -> *mut root::MTL::Argument;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument4nameEv"]
            pub fn Argument_name(this: *const root::MTL::Argument) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument4typeEv"]
            pub fn Argument_type(this: *const root::MTL::Argument) -> root::MTL::ArgumentType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument6accessEv"]
            pub fn Argument_access(this: *const root::MTL::Argument) -> root::MTL::ArgumentAccess;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument5indexEv"]
            pub fn Argument_index(this: *const root::MTL::Argument) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument6activeEv"]
            pub fn Argument_active(this: *const root::MTL::Argument) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument15bufferAlignmentEv"]
            pub fn Argument_bufferAlignment(this: *const root::MTL::Argument)
                -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument14bufferDataSizeEv"]
            pub fn Argument_bufferDataSize(this: *const root::MTL::Argument) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument14bufferDataTypeEv"]
            pub fn Argument_bufferDataType(this: *const root::MTL::Argument)
                -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument16bufferStructTypeEv"]
            pub fn Argument_bufferStructType(
                this: *const root::MTL::Argument,
            ) -> *mut root::MTL::StructType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument17bufferPointerTypeEv"]
            pub fn Argument_bufferPointerType(
                this: *const root::MTL::Argument,
            ) -> *mut root::MTL::PointerType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument26threadgroupMemoryAlignmentEv"]
            pub fn Argument_threadgroupMemoryAlignment(
                this: *const root::MTL::Argument,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument25threadgroupMemoryDataSizeEv"]
            pub fn Argument_threadgroupMemoryDataSize(
                this: *const root::MTL::Argument,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument11textureTypeEv"]
            pub fn Argument_textureType(this: *const root::MTL::Argument)
                -> root::MTL::TextureType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument15textureDataTypeEv"]
            pub fn Argument_textureDataType(
                this: *const root::MTL::Argument,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument14isDepthTextureEv"]
            pub fn Argument_isDepthTexture(this: *const root::MTL::Argument) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Argument11arrayLengthEv"]
            pub fn Argument_arrayLength(this: *const root::MTL::Argument) -> root::NS::UInteger;
        }
        impl Argument {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::Argument {
                Argument_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::Argument {
                Argument_init(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                Argument_name(self)
            }
            #[inline]
            pub unsafe fn type_(&self) -> root::MTL::ArgumentType {
                Argument_type(self)
            }
            #[inline]
            pub unsafe fn access(&self) -> root::MTL::ArgumentAccess {
                Argument_access(self)
            }
            #[inline]
            pub unsafe fn index(&self) -> root::NS::UInteger {
                Argument_index(self)
            }
            #[inline]
            pub unsafe fn active(&self) -> bool {
                Argument_active(self)
            }
            #[inline]
            pub unsafe fn bufferAlignment(&self) -> root::NS::UInteger {
                Argument_bufferAlignment(self)
            }
            #[inline]
            pub unsafe fn bufferDataSize(&self) -> root::NS::UInteger {
                Argument_bufferDataSize(self)
            }
            #[inline]
            pub unsafe fn bufferDataType(&self) -> root::MTL::DataType {
                Argument_bufferDataType(self)
            }
            #[inline]
            pub unsafe fn bufferStructType(&self) -> *mut root::MTL::StructType {
                Argument_bufferStructType(self)
            }
            #[inline]
            pub unsafe fn bufferPointerType(&self) -> *mut root::MTL::PointerType {
                Argument_bufferPointerType(self)
            }
            #[inline]
            pub unsafe fn threadgroupMemoryAlignment(&self) -> root::NS::UInteger {
                Argument_threadgroupMemoryAlignment(self)
            }
            #[inline]
            pub unsafe fn threadgroupMemoryDataSize(&self) -> root::NS::UInteger {
                Argument_threadgroupMemoryDataSize(self)
            }
            #[inline]
            pub unsafe fn textureType(&self) -> root::MTL::TextureType {
                Argument_textureType(self)
            }
            #[inline]
            pub unsafe fn textureDataType(&self) -> root::MTL::DataType {
                Argument_textureDataType(self)
            }
            #[inline]
            pub unsafe fn isDepthTexture(&self) -> bool {
                Argument_isDepthTexture(self)
            }
            #[inline]
            pub unsafe fn arrayLength(&self) -> root::NS::UInteger {
                Argument_arrayLength(self)
            }
        }
        pub type ResourceUsage = root::NS::UInteger;
        pub const MTL_ResourceUsageRead: root::MTL::ResourceUsage = 1;
        pub const MTL_ResourceUsageWrite: root::MTL::ResourceUsage = 2;
        pub const MTL_ResourceUsageSample: root::MTL::ResourceUsage = 4;
        pub type _bindgen_ty_5 = root::MTL::ResourceUsage;
        pub type BarrierScope = root::NS::UInteger;
        pub const MTL_BarrierScopeBuffers: root::MTL::BarrierScope = 1;
        pub const MTL_BarrierScopeTextures: root::MTL::BarrierScope = 2;
        pub const MTL_BarrierScopeRenderTargets: root::MTL::BarrierScope = 4;
        pub type _bindgen_ty_6 = root::MTL::BarrierScope;
        #[repr(C)]
        #[derive(Debug)]
        pub struct CommandEncoder {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CommandEncoder6deviceEv"]
            pub fn CommandEncoder_device(
                this: *const root::MTL::CommandEncoder,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CommandEncoder5labelEv"]
            pub fn CommandEncoder_label(
                this: *const root::MTL::CommandEncoder,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CommandEncoder8setLabelEPKN2NS6StringE"]
            pub fn CommandEncoder_setLabel(
                this: *mut root::MTL::CommandEncoder,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CommandEncoder11endEncodingEv"]
            pub fn CommandEncoder_endEncoding(this: *mut root::MTL::CommandEncoder);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CommandEncoder19insertDebugSignpostEPKN2NS6StringE"]
            pub fn CommandEncoder_insertDebugSignpost(
                this: *mut root::MTL::CommandEncoder,
                string: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CommandEncoder14pushDebugGroupEPKN2NS6StringE"]
            pub fn CommandEncoder_pushDebugGroup(
                this: *mut root::MTL::CommandEncoder,
                string: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CommandEncoder13popDebugGroupEv"]
            pub fn CommandEncoder_popDebugGroup(this: *mut root::MTL::CommandEncoder);
        }
        impl CommandEncoder {
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                CommandEncoder_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                CommandEncoder_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                CommandEncoder_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn endEncoding(&mut self) {
                CommandEncoder_endEncoding(self)
            }
            #[inline]
            pub unsafe fn insertDebugSignpost(&mut self, string: *const root::NS::String) {
                CommandEncoder_insertDebugSignpost(self, string)
            }
            #[inline]
            pub unsafe fn pushDebugGroup(&mut self, string: *const root::NS::String) {
                CommandEncoder_pushDebugGroup(self, string)
            }
            #[inline]
            pub unsafe fn popDebugGroup(&mut self) {
                CommandEncoder_popDebugGroup(self)
            }
        }
        pub const HeapType_HeapTypeAutomatic: root::MTL::HeapType = 0;
        pub const HeapType_HeapTypePlacement: root::MTL::HeapType = 1;
        pub const HeapType_HeapTypeSparse: root::MTL::HeapType = 2;
        pub type HeapType = root::NS::Integer;
        #[repr(C)]
        #[derive(Debug)]
        pub struct HeapDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor5allocEv"]
            pub fn HeapDescriptor_alloc() -> *mut root::MTL::HeapDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor4initEv"]
            pub fn HeapDescriptor_init(
                this: *mut root::MTL::HeapDescriptor,
            ) -> *mut root::MTL::HeapDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14HeapDescriptor4sizeEv"]
            pub fn HeapDescriptor_size(
                this: *const root::MTL::HeapDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor7setSizeEm"]
            pub fn HeapDescriptor_setSize(
                this: *mut root::MTL::HeapDescriptor,
                size: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14HeapDescriptor11storageModeEv"]
            pub fn HeapDescriptor_storageMode(
                this: *const root::MTL::HeapDescriptor,
            ) -> root::MTL::StorageMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor14setStorageModeENS_11StorageModeE"]
            pub fn HeapDescriptor_setStorageMode(
                this: *mut root::MTL::HeapDescriptor,
                storageMode: root::MTL::StorageMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14HeapDescriptor12cpuCacheModeEv"]
            pub fn HeapDescriptor_cpuCacheMode(
                this: *const root::MTL::HeapDescriptor,
            ) -> root::MTL::CPUCacheMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor15setCpuCacheModeENS_12CPUCacheModeE"]
            pub fn HeapDescriptor_setCpuCacheMode(
                this: *mut root::MTL::HeapDescriptor,
                cpuCacheMode: root::MTL::CPUCacheMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14HeapDescriptor18hazardTrackingModeEv"]
            pub fn HeapDescriptor_hazardTrackingMode(
                this: *const root::MTL::HeapDescriptor,
            ) -> root::MTL::HazardTrackingMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor21setHazardTrackingModeENS_18HazardTrackingModeE"]
            pub fn HeapDescriptor_setHazardTrackingMode(
                this: *mut root::MTL::HeapDescriptor,
                hazardTrackingMode: root::MTL::HazardTrackingMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14HeapDescriptor15resourceOptionsEv"]
            pub fn HeapDescriptor_resourceOptions(
                this: *const root::MTL::HeapDescriptor,
            ) -> root::MTL::ResourceOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor18setResourceOptionsEm"]
            pub fn HeapDescriptor_setResourceOptions(
                this: *mut root::MTL::HeapDescriptor,
                resourceOptions: root::MTL::ResourceOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14HeapDescriptor4typeEv"]
            pub fn HeapDescriptor_type(
                this: *const root::MTL::HeapDescriptor,
            ) -> root::MTL::HeapType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14HeapDescriptor7setTypeENS_8HeapTypeE"]
            pub fn HeapDescriptor_setType(
                this: *mut root::MTL::HeapDescriptor,
                type_: root::MTL::HeapType,
            );
        }
        impl HeapDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::HeapDescriptor {
                HeapDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::HeapDescriptor {
                HeapDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn size(&self) -> root::NS::UInteger {
                HeapDescriptor_size(self)
            }
            #[inline]
            pub unsafe fn setSize(&mut self, size: root::NS::UInteger) {
                HeapDescriptor_setSize(self, size)
            }
            #[inline]
            pub unsafe fn storageMode(&self) -> root::MTL::StorageMode {
                HeapDescriptor_storageMode(self)
            }
            #[inline]
            pub unsafe fn setStorageMode(&mut self, storageMode: root::MTL::StorageMode) {
                HeapDescriptor_setStorageMode(self, storageMode)
            }
            #[inline]
            pub unsafe fn cpuCacheMode(&self) -> root::MTL::CPUCacheMode {
                HeapDescriptor_cpuCacheMode(self)
            }
            #[inline]
            pub unsafe fn setCpuCacheMode(&mut self, cpuCacheMode: root::MTL::CPUCacheMode) {
                HeapDescriptor_setCpuCacheMode(self, cpuCacheMode)
            }
            #[inline]
            pub unsafe fn hazardTrackingMode(&self) -> root::MTL::HazardTrackingMode {
                HeapDescriptor_hazardTrackingMode(self)
            }
            #[inline]
            pub unsafe fn setHazardTrackingMode(
                &mut self,
                hazardTrackingMode: root::MTL::HazardTrackingMode,
            ) {
                HeapDescriptor_setHazardTrackingMode(self, hazardTrackingMode)
            }
            #[inline]
            pub unsafe fn resourceOptions(&self) -> root::MTL::ResourceOptions {
                HeapDescriptor_resourceOptions(self)
            }
            #[inline]
            pub unsafe fn setResourceOptions(
                &mut self,
                resourceOptions: root::MTL::ResourceOptions,
            ) {
                HeapDescriptor_setResourceOptions(self, resourceOptions)
            }
            #[inline]
            pub unsafe fn type_(&self) -> root::MTL::HeapType {
                HeapDescriptor_type(self)
            }
            #[inline]
            pub unsafe fn setType(&mut self, type_: root::MTL::HeapType) {
                HeapDescriptor_setType(self, type_)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Heap {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap5labelEv"]
            pub fn Heap_label(this: *const root::MTL::Heap) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Heap8setLabelEPKN2NS6StringE"]
            pub fn Heap_setLabel(this: *mut root::MTL::Heap, label: *const root::NS::String);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap6deviceEv"]
            pub fn Heap_device(this: *const root::MTL::Heap) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap11storageModeEv"]
            pub fn Heap_storageMode(this: *const root::MTL::Heap) -> root::MTL::StorageMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap12cpuCacheModeEv"]
            pub fn Heap_cpuCacheMode(this: *const root::MTL::Heap) -> root::MTL::CPUCacheMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap18hazardTrackingModeEv"]
            pub fn Heap_hazardTrackingMode(
                this: *const root::MTL::Heap,
            ) -> root::MTL::HazardTrackingMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap15resourceOptionsEv"]
            pub fn Heap_resourceOptions(this: *const root::MTL::Heap)
                -> root::MTL::ResourceOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap4sizeEv"]
            pub fn Heap_size(this: *const root::MTL::Heap) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap8usedSizeEv"]
            pub fn Heap_usedSize(this: *const root::MTL::Heap) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap20currentAllocatedSizeEv"]
            pub fn Heap_currentAllocatedSize(this: *const root::MTL::Heap) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Heap16maxAvailableSizeEm"]
            pub fn Heap_maxAvailableSize(
                this: *mut root::MTL::Heap,
                alignment: root::NS::UInteger,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Heap9newBufferEmm"]
            pub fn Heap_newBuffer(
                this: *mut root::MTL::Heap,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Heap10newTextureEPKNS_17TextureDescriptorE"]
            pub fn Heap_newTexture(
                this: *mut root::MTL::Heap,
                desc: *const root::MTL::TextureDescriptor,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Heap17setPurgeableStateENS_14PurgeableStateE"]
            pub fn Heap_setPurgeableState(
                this: *mut root::MTL::Heap,
                state: root::MTL::PurgeableState,
            ) -> root::MTL::PurgeableState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL4Heap4typeEv"]
            pub fn Heap_type(this: *const root::MTL::Heap) -> root::MTL::HeapType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Heap9newBufferEmmm"]
            pub fn Heap_newBuffer1(
                this: *mut root::MTL::Heap,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
                offset: root::NS::UInteger,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL4Heap10newTextureEPKNS_17TextureDescriptorEm"]
            pub fn Heap_newTexture1(
                this: *mut root::MTL::Heap,
                descriptor: *const root::MTL::TextureDescriptor,
                offset: root::NS::UInteger,
            ) -> *mut root::MTL::Texture;
        }
        impl Heap {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                Heap_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                Heap_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                Heap_device(self)
            }
            #[inline]
            pub unsafe fn storageMode(&self) -> root::MTL::StorageMode {
                Heap_storageMode(self)
            }
            #[inline]
            pub unsafe fn cpuCacheMode(&self) -> root::MTL::CPUCacheMode {
                Heap_cpuCacheMode(self)
            }
            #[inline]
            pub unsafe fn hazardTrackingMode(&self) -> root::MTL::HazardTrackingMode {
                Heap_hazardTrackingMode(self)
            }
            #[inline]
            pub unsafe fn resourceOptions(&self) -> root::MTL::ResourceOptions {
                Heap_resourceOptions(self)
            }
            #[inline]
            pub unsafe fn size(&self) -> root::NS::UInteger {
                Heap_size(self)
            }
            #[inline]
            pub unsafe fn usedSize(&self) -> root::NS::UInteger {
                Heap_usedSize(self)
            }
            #[inline]
            pub unsafe fn currentAllocatedSize(&self) -> root::NS::UInteger {
                Heap_currentAllocatedSize(self)
            }
            #[inline]
            pub unsafe fn maxAvailableSize(
                &mut self,
                alignment: root::NS::UInteger,
            ) -> root::NS::UInteger {
                Heap_maxAvailableSize(self, alignment)
            }
            #[inline]
            pub unsafe fn newBuffer(
                &mut self,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::Buffer {
                Heap_newBuffer(self, length, options)
            }
            #[inline]
            pub unsafe fn newTexture(
                &mut self,
                desc: *const root::MTL::TextureDescriptor,
            ) -> *mut root::MTL::Texture {
                Heap_newTexture(self, desc)
            }
            #[inline]
            pub unsafe fn setPurgeableState(
                &mut self,
                state: root::MTL::PurgeableState,
            ) -> root::MTL::PurgeableState {
                Heap_setPurgeableState(self, state)
            }
            #[inline]
            pub unsafe fn type_(&self) -> root::MTL::HeapType {
                Heap_type(self)
            }
            #[inline]
            pub unsafe fn newBuffer1(
                &mut self,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
                offset: root::NS::UInteger,
            ) -> *mut root::MTL::Buffer {
                Heap_newBuffer1(self, length, options, offset)
            }
            #[inline]
            pub unsafe fn newTexture1(
                &mut self,
                descriptor: *const root::MTL::TextureDescriptor,
                offset: root::NS::UInteger,
            ) -> *mut root::MTL::Texture {
                Heap_newTexture1(self, descriptor, offset)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AccelerationStructureCommandEncoder {
            pub _base: root::NS::Referencing<root::MTL::CommandEncoder>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder26buildAccelerationStructureEPKNS_21AccelerationStructureEPKNS_31AccelerationStructureDescriptorEPKNS_6BufferEm"]
            pub fn AccelerationStructureCommandEncoder_buildAccelerationStructure(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
                scratchBuffer: *const root::MTL::Buffer,
                scratchBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder26refitAccelerationStructureEPKNS_21AccelerationStructureEPKNS_31AccelerationStructureDescriptorES3_PKNS_6BufferEm"]
            pub fn AccelerationStructureCommandEncoder_refitAccelerationStructure(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                sourceAccelerationStructure: *const root::MTL::AccelerationStructure,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
                destinationAccelerationStructure: *const root::MTL::AccelerationStructure,
                scratchBuffer: *const root::MTL::Buffer,
                scratchBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder25copyAccelerationStructureEPKNS_21AccelerationStructureES3_"]
            pub fn AccelerationStructureCommandEncoder_copyAccelerationStructure(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                sourceAccelerationStructure: *const root::MTL::AccelerationStructure,
                destinationAccelerationStructure: *const root::MTL::AccelerationStructure,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder39writeCompactedAccelerationStructureSizeEPKNS_21AccelerationStructureEPKNS_6BufferEm"]
            pub fn AccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder39writeCompactedAccelerationStructureSizeEPKNS_21AccelerationStructureEPKNS_6BufferEmNS_8DataTypeE"]
            pub fn AccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize1(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                sizeDataType: root::MTL::DataType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder35copyAndCompactAccelerationStructureEPKNS_21AccelerationStructureES3_"]
            pub fn AccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                sourceAccelerationStructure: *const root::MTL::AccelerationStructure,
                destinationAccelerationStructure: *const root::MTL::AccelerationStructure,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder11updateFenceEPKNS_5FenceE"]
            pub fn AccelerationStructureCommandEncoder_updateFence(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder12waitForFenceEPKNS_5FenceE"]
            pub fn AccelerationStructureCommandEncoder_waitForFence(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder11useResourceEPKNS_8ResourceEm"]
            pub fn AccelerationStructureCommandEncoder_useResource(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder12useResourcesEPPNS_8ResourceEmm"]
            pub fn AccelerationStructureCommandEncoder_useResources(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder7useHeapEPKNS_4HeapE"]
            pub fn AccelerationStructureCommandEncoder_useHeap(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                heap: *const root::MTL::Heap,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder8useHeapsEPPNS_4HeapEm"]
            pub fn AccelerationStructureCommandEncoder_useHeaps(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35AccelerationStructureCommandEncoder22sampleCountersInBufferEPKNS_19CounterSampleBufferEmb"]
            pub fn AccelerationStructureCommandEncoder_sampleCountersInBuffer(
                this: *mut root::MTL::AccelerationStructureCommandEncoder,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            );
        }
        impl AccelerationStructureCommandEncoder {
            #[inline]
            pub unsafe fn buildAccelerationStructure(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
                scratchBuffer: *const root::MTL::Buffer,
                scratchBufferOffset: root::NS::UInteger,
            ) {
                AccelerationStructureCommandEncoder_buildAccelerationStructure(
                    self,
                    accelerationStructure,
                    descriptor,
                    scratchBuffer,
                    scratchBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn refitAccelerationStructure(
                &mut self,
                sourceAccelerationStructure: *const root::MTL::AccelerationStructure,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
                destinationAccelerationStructure: *const root::MTL::AccelerationStructure,
                scratchBuffer: *const root::MTL::Buffer,
                scratchBufferOffset: root::NS::UInteger,
            ) {
                AccelerationStructureCommandEncoder_refitAccelerationStructure(
                    self,
                    sourceAccelerationStructure,
                    descriptor,
                    destinationAccelerationStructure,
                    scratchBuffer,
                    scratchBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn copyAccelerationStructure(
                &mut self,
                sourceAccelerationStructure: *const root::MTL::AccelerationStructure,
                destinationAccelerationStructure: *const root::MTL::AccelerationStructure,
            ) {
                AccelerationStructureCommandEncoder_copyAccelerationStructure(
                    self,
                    sourceAccelerationStructure,
                    destinationAccelerationStructure,
                )
            }
            #[inline]
            pub unsafe fn writeCompactedAccelerationStructureSize(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
            ) {
                AccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize(
                    self,
                    accelerationStructure,
                    buffer,
                    offset,
                )
            }
            #[inline]
            pub unsafe fn writeCompactedAccelerationStructureSize1(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                sizeDataType: root::MTL::DataType,
            ) {
                AccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize1(
                    self,
                    accelerationStructure,
                    buffer,
                    offset,
                    sizeDataType,
                )
            }
            #[inline]
            pub unsafe fn copyAndCompactAccelerationStructure(
                &mut self,
                sourceAccelerationStructure: *const root::MTL::AccelerationStructure,
                destinationAccelerationStructure: *const root::MTL::AccelerationStructure,
            ) {
                AccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure(
                    self,
                    sourceAccelerationStructure,
                    destinationAccelerationStructure,
                )
            }
            #[inline]
            pub unsafe fn updateFence(&mut self, fence: *const root::MTL::Fence) {
                AccelerationStructureCommandEncoder_updateFence(self, fence)
            }
            #[inline]
            pub unsafe fn waitForFence(&mut self, fence: *const root::MTL::Fence) {
                AccelerationStructureCommandEncoder_waitForFence(self, fence)
            }
            #[inline]
            pub unsafe fn useResource(
                &mut self,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
            ) {
                AccelerationStructureCommandEncoder_useResource(self, resource, usage)
            }
            #[inline]
            pub unsafe fn useResources(
                &mut self,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
            ) {
                AccelerationStructureCommandEncoder_useResources(self, resources, count, usage)
            }
            #[inline]
            pub unsafe fn useHeap(&mut self, heap: *const root::MTL::Heap) {
                AccelerationStructureCommandEncoder_useHeap(self, heap)
            }
            #[inline]
            pub unsafe fn useHeaps(
                &mut self,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
            ) {
                AccelerationStructureCommandEncoder_useHeaps(self, heaps, count)
            }
            #[inline]
            pub unsafe fn sampleCountersInBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            ) {
                AccelerationStructureCommandEncoder_sampleCountersInBuffer(
                    self,
                    sampleBuffer,
                    sampleIndex,
                    barrier,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Buffer {
            pub _base: root::NS::Referencing<root::MTL::Resource>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Buffer6lengthEv"]
            pub fn Buffer_length(this: *const root::MTL::Buffer) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Buffer8contentsEv"]
            pub fn Buffer_contents(this: *mut root::MTL::Buffer) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Buffer14didModifyRangeEN2NS5RangeE"]
            pub fn Buffer_didModifyRange(this: *mut root::MTL::Buffer, range: root::NS::Range);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Buffer10newTextureEPKNS_17TextureDescriptorEmm"]
            pub fn Buffer_newTexture(
                this: *mut root::MTL::Buffer,
                descriptor: *const root::MTL::TextureDescriptor,
                offset: root::NS::UInteger,
                bytesPerRow: root::NS::UInteger,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Buffer14addDebugMarkerEPKN2NS6StringENS1_5RangeE"]
            pub fn Buffer_addDebugMarker(
                this: *mut root::MTL::Buffer,
                marker: *const root::NS::String,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Buffer21removeAllDebugMarkersEv"]
            pub fn Buffer_removeAllDebugMarkers(this: *mut root::MTL::Buffer);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Buffer19remoteStorageBufferEv"]
            pub fn Buffer_remoteStorageBuffer(
                this: *const root::MTL::Buffer,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Buffer28newRemoteBufferViewForDeviceEPKNS_6DeviceE"]
            pub fn Buffer_newRemoteBufferViewForDevice(
                this: *mut root::MTL::Buffer,
                device: *const root::MTL::Device,
            ) -> *mut root::MTL::Buffer;
        }
        impl Buffer {
            #[inline]
            pub unsafe fn length(&self) -> root::NS::UInteger {
                Buffer_length(self)
            }
            #[inline]
            pub unsafe fn contents(&mut self) -> *mut ::std::os::raw::c_void {
                Buffer_contents(self)
            }
            #[inline]
            pub unsafe fn didModifyRange(&mut self, range: root::NS::Range) {
                Buffer_didModifyRange(self, range)
            }
            #[inline]
            pub unsafe fn newTexture(
                &mut self,
                descriptor: *const root::MTL::TextureDescriptor,
                offset: root::NS::UInteger,
                bytesPerRow: root::NS::UInteger,
            ) -> *mut root::MTL::Texture {
                Buffer_newTexture(self, descriptor, offset, bytesPerRow)
            }
            #[inline]
            pub unsafe fn addDebugMarker(
                &mut self,
                marker: *const root::NS::String,
                range: root::NS::Range,
            ) {
                Buffer_addDebugMarker(self, marker, range)
            }
            #[inline]
            pub unsafe fn removeAllDebugMarkers(&mut self) {
                Buffer_removeAllDebugMarkers(self)
            }
            #[inline]
            pub unsafe fn remoteStorageBuffer(&self) -> *mut root::MTL::Buffer {
                Buffer_remoteStorageBuffer(self)
            }
            #[inline]
            pub unsafe fn newRemoteBufferViewForDevice(
                &mut self,
                device: *const root::MTL::Device,
            ) -> *mut root::MTL::Buffer {
                Buffer_newRemoteBufferViewForDevice(self, device)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ComputePipelineReflection {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineReflection5allocEv"]
            pub fn ComputePipelineReflection_alloc() -> *mut root::MTL::ComputePipelineReflection;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineReflection4initEv"]
            pub fn ComputePipelineReflection_init(
                this: *mut root::MTL::ComputePipelineReflection,
            ) -> *mut root::MTL::ComputePipelineReflection;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineReflection9argumentsEv"]
            pub fn ComputePipelineReflection_arguments(
                this: *const root::MTL::ComputePipelineReflection,
            ) -> *mut root::NS::Array;
        }
        impl ComputePipelineReflection {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ComputePipelineReflection {
                ComputePipelineReflection_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::ComputePipelineReflection {
                ComputePipelineReflection_init(self)
            }
            #[inline]
            pub unsafe fn arguments(&self) -> *mut root::NS::Array {
                ComputePipelineReflection_arguments(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ComputePipelineDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor5allocEv"]
            pub fn ComputePipelineDescriptor_alloc() -> *mut root::MTL::ComputePipelineDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor4initEv"]
            pub fn ComputePipelineDescriptor_init(
                this: *mut root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::MTL::ComputePipelineDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor5labelEv"]
            pub fn ComputePipelineDescriptor_label(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor8setLabelEPKN2NS6StringE"]
            pub fn ComputePipelineDescriptor_setLabel(
                this: *mut root::MTL::ComputePipelineDescriptor,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor15computeFunctionEv"]
            pub fn ComputePipelineDescriptor_computeFunction(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor18setComputeFunctionEPKNS_8FunctionE"]
            pub fn ComputePipelineDescriptor_setComputeFunction(
                this: *mut root::MTL::ComputePipelineDescriptor,
                computeFunction: *const root::MTL::Function,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor47threadGroupSizeIsMultipleOfThreadExecutionWidthEv"]
            pub fn ComputePipelineDescriptor_threadGroupSizeIsMultipleOfThreadExecutionWidth(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor50setThreadGroupSizeIsMultipleOfThreadExecutionWidthEb"]
            pub fn ComputePipelineDescriptor_setThreadGroupSizeIsMultipleOfThreadExecutionWidth(
                this: *mut root::MTL::ComputePipelineDescriptor,
                threadGroupSizeIsMultipleOfThreadExecutionWidth: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor29maxTotalThreadsPerThreadgroupEv"]
            pub fn ComputePipelineDescriptor_maxTotalThreadsPerThreadgroup(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor32setMaxTotalThreadsPerThreadgroupEm"]
            pub fn ComputePipelineDescriptor_setMaxTotalThreadsPerThreadgroup(
                this: *mut root::MTL::ComputePipelineDescriptor,
                maxTotalThreadsPerThreadgroup: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor20stageInputDescriptorEv"]
            pub fn ComputePipelineDescriptor_stageInputDescriptor(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::MTL::StageInputOutputDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor23setStageInputDescriptorEPKNS_26StageInputOutputDescriptorE"]
            pub fn ComputePipelineDescriptor_setStageInputDescriptor(
                this: *mut root::MTL::ComputePipelineDescriptor,
                stageInputDescriptor: *const root::MTL::StageInputOutputDescriptor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor7buffersEv"]
            pub fn ComputePipelineDescriptor_buffers(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::MTL::PipelineBufferDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor29supportIndirectCommandBuffersEv"]
            pub fn ComputePipelineDescriptor_supportIndirectCommandBuffers(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor32setSupportIndirectCommandBuffersEb"]
            pub fn ComputePipelineDescriptor_setSupportIndirectCommandBuffers(
                this: *mut root::MTL::ComputePipelineDescriptor,
                supportIndirectCommandBuffers: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor15insertLibrariesEv"]
            pub fn ComputePipelineDescriptor_insertLibraries(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor18setInsertLibrariesEPKN2NS5ArrayE"]
            pub fn ComputePipelineDescriptor_setInsertLibraries(
                this: *mut root::MTL::ComputePipelineDescriptor,
                insertLibraries: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor18preloadedLibrariesEv"]
            pub fn ComputePipelineDescriptor_preloadedLibraries(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor21setPreloadedLibrariesEPKN2NS5ArrayE"]
            pub fn ComputePipelineDescriptor_setPreloadedLibraries(
                this: *mut root::MTL::ComputePipelineDescriptor,
                preloadedLibraries: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor14binaryArchivesEv"]
            pub fn ComputePipelineDescriptor_binaryArchives(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor17setBinaryArchivesEPKN2NS5ArrayE"]
            pub fn ComputePipelineDescriptor_setBinaryArchives(
                this: *mut root::MTL::ComputePipelineDescriptor,
                binaryArchives: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor5resetEv"]
            pub fn ComputePipelineDescriptor_reset(this: *mut root::MTL::ComputePipelineDescriptor);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor15linkedFunctionsEv"]
            pub fn ComputePipelineDescriptor_linkedFunctions(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> *mut root::MTL::LinkedFunctions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor18setLinkedFunctionsEPKNS_15LinkedFunctionsE"]
            pub fn ComputePipelineDescriptor_setLinkedFunctions(
                this: *mut root::MTL::ComputePipelineDescriptor,
                linkedFunctions: *const root::MTL::LinkedFunctions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor28supportAddingBinaryFunctionsEv"]
            pub fn ComputePipelineDescriptor_supportAddingBinaryFunctions(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor31setSupportAddingBinaryFunctionsEb"]
            pub fn ComputePipelineDescriptor_setSupportAddingBinaryFunctions(
                this: *mut root::MTL::ComputePipelineDescriptor,
                supportAddingBinaryFunctions: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25ComputePipelineDescriptor17maxCallStackDepthEv"]
            pub fn ComputePipelineDescriptor_maxCallStackDepth(
                this: *const root::MTL::ComputePipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25ComputePipelineDescriptor20setMaxCallStackDepthEm"]
            pub fn ComputePipelineDescriptor_setMaxCallStackDepth(
                this: *mut root::MTL::ComputePipelineDescriptor,
                maxCallStackDepth: root::NS::UInteger,
            );
        }
        impl ComputePipelineDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ComputePipelineDescriptor {
                ComputePipelineDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::ComputePipelineDescriptor {
                ComputePipelineDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                ComputePipelineDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                ComputePipelineDescriptor_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn computeFunction(&self) -> *mut root::MTL::Function {
                ComputePipelineDescriptor_computeFunction(self)
            }
            #[inline]
            pub unsafe fn setComputeFunction(
                &mut self,
                computeFunction: *const root::MTL::Function,
            ) {
                ComputePipelineDescriptor_setComputeFunction(self, computeFunction)
            }
            #[inline]
            pub unsafe fn threadGroupSizeIsMultipleOfThreadExecutionWidth(&self) -> bool {
                ComputePipelineDescriptor_threadGroupSizeIsMultipleOfThreadExecutionWidth(self)
            }
            #[inline]
            pub unsafe fn setThreadGroupSizeIsMultipleOfThreadExecutionWidth(
                &mut self,
                threadGroupSizeIsMultipleOfThreadExecutionWidth: bool,
            ) {
                ComputePipelineDescriptor_setThreadGroupSizeIsMultipleOfThreadExecutionWidth(
                    self,
                    threadGroupSizeIsMultipleOfThreadExecutionWidth,
                )
            }
            #[inline]
            pub unsafe fn maxTotalThreadsPerThreadgroup(&self) -> root::NS::UInteger {
                ComputePipelineDescriptor_maxTotalThreadsPerThreadgroup(self)
            }
            #[inline]
            pub unsafe fn setMaxTotalThreadsPerThreadgroup(
                &mut self,
                maxTotalThreadsPerThreadgroup: root::NS::UInteger,
            ) {
                ComputePipelineDescriptor_setMaxTotalThreadsPerThreadgroup(
                    self,
                    maxTotalThreadsPerThreadgroup,
                )
            }
            #[inline]
            pub unsafe fn stageInputDescriptor(
                &self,
            ) -> *mut root::MTL::StageInputOutputDescriptor {
                ComputePipelineDescriptor_stageInputDescriptor(self)
            }
            #[inline]
            pub unsafe fn setStageInputDescriptor(
                &mut self,
                stageInputDescriptor: *const root::MTL::StageInputOutputDescriptor,
            ) {
                ComputePipelineDescriptor_setStageInputDescriptor(self, stageInputDescriptor)
            }
            #[inline]
            pub unsafe fn buffers(&self) -> *mut root::MTL::PipelineBufferDescriptorArray {
                ComputePipelineDescriptor_buffers(self)
            }
            #[inline]
            pub unsafe fn supportIndirectCommandBuffers(&self) -> bool {
                ComputePipelineDescriptor_supportIndirectCommandBuffers(self)
            }
            #[inline]
            pub unsafe fn setSupportIndirectCommandBuffers(
                &mut self,
                supportIndirectCommandBuffers: bool,
            ) {
                ComputePipelineDescriptor_setSupportIndirectCommandBuffers(
                    self,
                    supportIndirectCommandBuffers,
                )
            }
            #[inline]
            pub unsafe fn insertLibraries(&self) -> *mut root::NS::Array {
                ComputePipelineDescriptor_insertLibraries(self)
            }
            #[inline]
            pub unsafe fn setInsertLibraries(&mut self, insertLibraries: *const root::NS::Array) {
                ComputePipelineDescriptor_setInsertLibraries(self, insertLibraries)
            }
            #[inline]
            pub unsafe fn preloadedLibraries(&self) -> *mut root::NS::Array {
                ComputePipelineDescriptor_preloadedLibraries(self)
            }
            #[inline]
            pub unsafe fn setPreloadedLibraries(
                &mut self,
                preloadedLibraries: *const root::NS::Array,
            ) {
                ComputePipelineDescriptor_setPreloadedLibraries(self, preloadedLibraries)
            }
            #[inline]
            pub unsafe fn binaryArchives(&self) -> *mut root::NS::Array {
                ComputePipelineDescriptor_binaryArchives(self)
            }
            #[inline]
            pub unsafe fn setBinaryArchives(&mut self, binaryArchives: *const root::NS::Array) {
                ComputePipelineDescriptor_setBinaryArchives(self, binaryArchives)
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                ComputePipelineDescriptor_reset(self)
            }
            #[inline]
            pub unsafe fn linkedFunctions(&self) -> *mut root::MTL::LinkedFunctions {
                ComputePipelineDescriptor_linkedFunctions(self)
            }
            #[inline]
            pub unsafe fn setLinkedFunctions(
                &mut self,
                linkedFunctions: *const root::MTL::LinkedFunctions,
            ) {
                ComputePipelineDescriptor_setLinkedFunctions(self, linkedFunctions)
            }
            #[inline]
            pub unsafe fn supportAddingBinaryFunctions(&self) -> bool {
                ComputePipelineDescriptor_supportAddingBinaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setSupportAddingBinaryFunctions(
                &mut self,
                supportAddingBinaryFunctions: bool,
            ) {
                ComputePipelineDescriptor_setSupportAddingBinaryFunctions(
                    self,
                    supportAddingBinaryFunctions,
                )
            }
            #[inline]
            pub unsafe fn maxCallStackDepth(&self) -> root::NS::UInteger {
                ComputePipelineDescriptor_maxCallStackDepth(self)
            }
            #[inline]
            pub unsafe fn setMaxCallStackDepth(&mut self, maxCallStackDepth: root::NS::UInteger) {
                ComputePipelineDescriptor_setMaxCallStackDepth(self, maxCallStackDepth)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ComputePipelineState {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20ComputePipelineState5labelEv"]
            pub fn ComputePipelineState_label(
                this: *const root::MTL::ComputePipelineState,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20ComputePipelineState6deviceEv"]
            pub fn ComputePipelineState_device(
                this: *const root::MTL::ComputePipelineState,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20ComputePipelineState29maxTotalThreadsPerThreadgroupEv"]
            pub fn ComputePipelineState_maxTotalThreadsPerThreadgroup(
                this: *const root::MTL::ComputePipelineState,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20ComputePipelineState20threadExecutionWidthEv"]
            pub fn ComputePipelineState_threadExecutionWidth(
                this: *const root::MTL::ComputePipelineState,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20ComputePipelineState29staticThreadgroupMemoryLengthEv"]
            pub fn ComputePipelineState_staticThreadgroupMemoryLength(
                this: *const root::MTL::ComputePipelineState,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20ComputePipelineState22imageblockMemoryLengthENS_4SizeE"]
            pub fn ComputePipelineState_imageblockMemoryLength(
                this: *mut root::MTL::ComputePipelineState,
                imageblockDimensions: root::MTL::Size,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20ComputePipelineState29supportIndirectCommandBuffersEv"]
            pub fn ComputePipelineState_supportIndirectCommandBuffers(
                this: *const root::MTL::ComputePipelineState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20ComputePipelineState14functionHandleEPKNS_8FunctionE"]
            pub fn ComputePipelineState_functionHandle(
                this: *mut root::MTL::ComputePipelineState,
                function: *const root::MTL::Function,
            ) -> *mut root::MTL::FunctionHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20ComputePipelineState23newComputePipelineStateEPKN2NS5ArrayEPPNS1_5ErrorE"]
            pub fn ComputePipelineState_newComputePipelineState(
                this: *mut root::MTL::ComputePipelineState,
                functions: *const root::NS::Array,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20ComputePipelineState23newVisibleFunctionTableEPKNS_30VisibleFunctionTableDescriptorE"]
            pub fn ComputePipelineState_newVisibleFunctionTable(
                this: *mut root::MTL::ComputePipelineState,
                descriptor: *const root::MTL::VisibleFunctionTableDescriptor,
            ) -> *mut root::MTL::VisibleFunctionTable;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20ComputePipelineState28newIntersectionFunctionTableEPKNS_35IntersectionFunctionTableDescriptorE"]
            pub fn ComputePipelineState_newIntersectionFunctionTable(
                this: *mut root::MTL::ComputePipelineState,
                descriptor: *const root::MTL::IntersectionFunctionTableDescriptor,
            ) -> *mut root::MTL::IntersectionFunctionTable;
        }
        impl ComputePipelineState {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                ComputePipelineState_label(self)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                ComputePipelineState_device(self)
            }
            #[inline]
            pub unsafe fn maxTotalThreadsPerThreadgroup(&self) -> root::NS::UInteger {
                ComputePipelineState_maxTotalThreadsPerThreadgroup(self)
            }
            #[inline]
            pub unsafe fn threadExecutionWidth(&self) -> root::NS::UInteger {
                ComputePipelineState_threadExecutionWidth(self)
            }
            #[inline]
            pub unsafe fn staticThreadgroupMemoryLength(&self) -> root::NS::UInteger {
                ComputePipelineState_staticThreadgroupMemoryLength(self)
            }
            #[inline]
            pub unsafe fn imageblockMemoryLength(
                &mut self,
                imageblockDimensions: root::MTL::Size,
            ) -> root::NS::UInteger {
                ComputePipelineState_imageblockMemoryLength(self, imageblockDimensions)
            }
            #[inline]
            pub unsafe fn supportIndirectCommandBuffers(&self) -> bool {
                ComputePipelineState_supportIndirectCommandBuffers(self)
            }
            #[inline]
            pub unsafe fn functionHandle(
                &mut self,
                function: *const root::MTL::Function,
            ) -> *mut root::MTL::FunctionHandle {
                ComputePipelineState_functionHandle(self, function)
            }
            #[inline]
            pub unsafe fn newComputePipelineState(
                &mut self,
                functions: *const root::NS::Array,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState {
                ComputePipelineState_newComputePipelineState(self, functions, error)
            }
            #[inline]
            pub unsafe fn newVisibleFunctionTable(
                &mut self,
                descriptor: *const root::MTL::VisibleFunctionTableDescriptor,
            ) -> *mut root::MTL::VisibleFunctionTable {
                ComputePipelineState_newVisibleFunctionTable(self, descriptor)
            }
            #[inline]
            pub unsafe fn newIntersectionFunctionTable(
                &mut self,
                descriptor: *const root::MTL::IntersectionFunctionTableDescriptor,
            ) -> *mut root::MTL::IntersectionFunctionTable {
                ComputePipelineState_newIntersectionFunctionTable(self, descriptor)
            }
        }
        pub type IndirectCommandType = root::NS::UInteger;
        pub const MTL_IndirectCommandTypeDraw: root::MTL::IndirectCommandType = 1;
        pub const MTL_IndirectCommandTypeDrawIndexed: root::MTL::IndirectCommandType = 2;
        pub const MTL_IndirectCommandTypeDrawPatches: root::MTL::IndirectCommandType = 4;
        pub const MTL_IndirectCommandTypeDrawIndexedPatches: root::MTL::IndirectCommandType = 8;
        pub const MTL_IndirectCommandTypeConcurrentDispatch: root::MTL::IndirectCommandType = 32;
        pub const MTL_IndirectCommandTypeConcurrentDispatchThreads: root::MTL::IndirectCommandType =
            64;
        pub type _bindgen_ty_7 = root::MTL::IndirectCommandType;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct IndirectCommandBufferExecutionRange {
            pub location: u32,
            pub length: u32,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct IndirectCommandBufferDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor5allocEv"]
            pub fn IndirectCommandBufferDescriptor_alloc(
            ) -> *mut root::MTL::IndirectCommandBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor4initEv"]
            pub fn IndirectCommandBufferDescriptor_init(
                this: *mut root::MTL::IndirectCommandBufferDescriptor,
            ) -> *mut root::MTL::IndirectCommandBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL31IndirectCommandBufferDescriptor12commandTypesEv"]
            pub fn IndirectCommandBufferDescriptor_commandTypes(
                this: *const root::MTL::IndirectCommandBufferDescriptor,
            ) -> root::MTL::IndirectCommandType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor15setCommandTypesEm"]
            pub fn IndirectCommandBufferDescriptor_setCommandTypes(
                this: *mut root::MTL::IndirectCommandBufferDescriptor,
                commandTypes: root::MTL::IndirectCommandType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL31IndirectCommandBufferDescriptor20inheritPipelineStateEv"]
            pub fn IndirectCommandBufferDescriptor_inheritPipelineState(
                this: *const root::MTL::IndirectCommandBufferDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor23setInheritPipelineStateEb"]
            pub fn IndirectCommandBufferDescriptor_setInheritPipelineState(
                this: *mut root::MTL::IndirectCommandBufferDescriptor,
                inheritPipelineState: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL31IndirectCommandBufferDescriptor14inheritBuffersEv"]
            pub fn IndirectCommandBufferDescriptor_inheritBuffers(
                this: *const root::MTL::IndirectCommandBufferDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor17setInheritBuffersEb"]
            pub fn IndirectCommandBufferDescriptor_setInheritBuffers(
                this: *mut root::MTL::IndirectCommandBufferDescriptor,
                inheritBuffers: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL31IndirectCommandBufferDescriptor24maxVertexBufferBindCountEv"]
            pub fn IndirectCommandBufferDescriptor_maxVertexBufferBindCount(
                this: *const root::MTL::IndirectCommandBufferDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor27setMaxVertexBufferBindCountEm"]
            pub fn IndirectCommandBufferDescriptor_setMaxVertexBufferBindCount(
                this: *mut root::MTL::IndirectCommandBufferDescriptor,
                maxVertexBufferBindCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL31IndirectCommandBufferDescriptor26maxFragmentBufferBindCountEv"]
            pub fn IndirectCommandBufferDescriptor_maxFragmentBufferBindCount(
                this: *const root::MTL::IndirectCommandBufferDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor29setMaxFragmentBufferBindCountEm"]
            pub fn IndirectCommandBufferDescriptor_setMaxFragmentBufferBindCount(
                this: *mut root::MTL::IndirectCommandBufferDescriptor,
                maxFragmentBufferBindCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL31IndirectCommandBufferDescriptor24maxKernelBufferBindCountEv"]
            pub fn IndirectCommandBufferDescriptor_maxKernelBufferBindCount(
                this: *const root::MTL::IndirectCommandBufferDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL31IndirectCommandBufferDescriptor27setMaxKernelBufferBindCountEm"]
            pub fn IndirectCommandBufferDescriptor_setMaxKernelBufferBindCount(
                this: *mut root::MTL::IndirectCommandBufferDescriptor,
                maxKernelBufferBindCount: root::NS::UInteger,
            );
        }
        impl IndirectCommandBufferDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::IndirectCommandBufferDescriptor {
                IndirectCommandBufferDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::IndirectCommandBufferDescriptor {
                IndirectCommandBufferDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn commandTypes(&self) -> root::MTL::IndirectCommandType {
                IndirectCommandBufferDescriptor_commandTypes(self)
            }
            #[inline]
            pub unsafe fn setCommandTypes(&mut self, commandTypes: root::MTL::IndirectCommandType) {
                IndirectCommandBufferDescriptor_setCommandTypes(self, commandTypes)
            }
            #[inline]
            pub unsafe fn inheritPipelineState(&self) -> bool {
                IndirectCommandBufferDescriptor_inheritPipelineState(self)
            }
            #[inline]
            pub unsafe fn setInheritPipelineState(&mut self, inheritPipelineState: bool) {
                IndirectCommandBufferDescriptor_setInheritPipelineState(self, inheritPipelineState)
            }
            #[inline]
            pub unsafe fn inheritBuffers(&self) -> bool {
                IndirectCommandBufferDescriptor_inheritBuffers(self)
            }
            #[inline]
            pub unsafe fn setInheritBuffers(&mut self, inheritBuffers: bool) {
                IndirectCommandBufferDescriptor_setInheritBuffers(self, inheritBuffers)
            }
            #[inline]
            pub unsafe fn maxVertexBufferBindCount(&self) -> root::NS::UInteger {
                IndirectCommandBufferDescriptor_maxVertexBufferBindCount(self)
            }
            #[inline]
            pub unsafe fn setMaxVertexBufferBindCount(
                &mut self,
                maxVertexBufferBindCount: root::NS::UInteger,
            ) {
                IndirectCommandBufferDescriptor_setMaxVertexBufferBindCount(
                    self,
                    maxVertexBufferBindCount,
                )
            }
            #[inline]
            pub unsafe fn maxFragmentBufferBindCount(&self) -> root::NS::UInteger {
                IndirectCommandBufferDescriptor_maxFragmentBufferBindCount(self)
            }
            #[inline]
            pub unsafe fn setMaxFragmentBufferBindCount(
                &mut self,
                maxFragmentBufferBindCount: root::NS::UInteger,
            ) {
                IndirectCommandBufferDescriptor_setMaxFragmentBufferBindCount(
                    self,
                    maxFragmentBufferBindCount,
                )
            }
            #[inline]
            pub unsafe fn maxKernelBufferBindCount(&self) -> root::NS::UInteger {
                IndirectCommandBufferDescriptor_maxKernelBufferBindCount(self)
            }
            #[inline]
            pub unsafe fn setMaxKernelBufferBindCount(
                &mut self,
                maxKernelBufferBindCount: root::NS::UInteger,
            ) {
                IndirectCommandBufferDescriptor_setMaxKernelBufferBindCount(
                    self,
                    maxKernelBufferBindCount,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct IndirectCommandBuffer {
            pub _base: root::NS::Referencing<root::MTL::Resource>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL21IndirectCommandBuffer4sizeEv"]
            pub fn IndirectCommandBuffer_size(
                this: *const root::MTL::IndirectCommandBuffer,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectCommandBuffer5resetEN2NS5RangeE"]
            pub fn IndirectCommandBuffer_reset(
                this: *mut root::MTL::IndirectCommandBuffer,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectCommandBuffer21indirectRenderCommandEm"]
            pub fn IndirectCommandBuffer_indirectRenderCommand(
                this: *mut root::MTL::IndirectCommandBuffer,
                commandIndex: root::NS::UInteger,
            ) -> *mut root::MTL::IndirectRenderCommand;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectCommandBuffer22indirectComputeCommandEm"]
            pub fn IndirectCommandBuffer_indirectComputeCommand(
                this: *mut root::MTL::IndirectCommandBuffer,
                commandIndex: root::NS::UInteger,
            ) -> *mut root::MTL::IndirectComputeCommand;
        }
        impl IndirectCommandBuffer {
            #[inline]
            pub unsafe fn size(&self) -> root::NS::UInteger {
                IndirectCommandBuffer_size(self)
            }
            #[inline]
            pub unsafe fn reset(&mut self, range: root::NS::Range) {
                IndirectCommandBuffer_reset(self, range)
            }
            #[inline]
            pub unsafe fn indirectRenderCommand(
                &mut self,
                commandIndex: root::NS::UInteger,
            ) -> *mut root::MTL::IndirectRenderCommand {
                IndirectCommandBuffer_indirectRenderCommand(self, commandIndex)
            }
            #[inline]
            pub unsafe fn indirectComputeCommand(
                &mut self,
                commandIndex: root::NS::UInteger,
            ) -> *mut root::MTL::IndirectComputeCommand {
                IndirectCommandBuffer_indirectComputeCommand(self, commandIndex)
            }
        }
        pub type FunctionOptions = root::NS::UInteger;
        pub const MTL_FunctionOptionNone: root::MTL::FunctionOptions = 0;
        pub const MTL_FunctionOptionCompileToBinary: root::MTL::FunctionOptions = 1;
        pub type _bindgen_ty_8 = root::MTL::FunctionOptions;
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor5allocEv"]
            pub fn FunctionDescriptor_alloc() -> *mut root::MTL::FunctionDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor4initEv"]
            pub fn FunctionDescriptor_init(
                this: *mut root::MTL::FunctionDescriptor,
            ) -> *mut root::MTL::FunctionDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor18functionDescriptorEv"]
            pub fn FunctionDescriptor_functionDescriptor() -> *mut root::MTL::FunctionDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18FunctionDescriptor4nameEv"]
            pub fn FunctionDescriptor_name(
                this: *const root::MTL::FunctionDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor7setNameEPKN2NS6StringE"]
            pub fn FunctionDescriptor_setName(
                this: *mut root::MTL::FunctionDescriptor,
                name: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18FunctionDescriptor15specializedNameEv"]
            pub fn FunctionDescriptor_specializedName(
                this: *const root::MTL::FunctionDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor18setSpecializedNameEPKN2NS6StringE"]
            pub fn FunctionDescriptor_setSpecializedName(
                this: *mut root::MTL::FunctionDescriptor,
                specializedName: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18FunctionDescriptor14constantValuesEv"]
            pub fn FunctionDescriptor_constantValues(
                this: *const root::MTL::FunctionDescriptor,
            ) -> *mut root::MTL::FunctionConstantValues;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor17setConstantValuesEPKNS_22FunctionConstantValuesE"]
            pub fn FunctionDescriptor_setConstantValues(
                this: *mut root::MTL::FunctionDescriptor,
                constantValues: *const root::MTL::FunctionConstantValues,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18FunctionDescriptor7optionsEv"]
            pub fn FunctionDescriptor_options(
                this: *const root::MTL::FunctionDescriptor,
            ) -> root::MTL::FunctionOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor10setOptionsEm"]
            pub fn FunctionDescriptor_setOptions(
                this: *mut root::MTL::FunctionDescriptor,
                options: root::MTL::FunctionOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18FunctionDescriptor14binaryArchivesEv"]
            pub fn FunctionDescriptor_binaryArchives(
                this: *const root::MTL::FunctionDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18FunctionDescriptor17setBinaryArchivesEPKN2NS5ArrayE"]
            pub fn FunctionDescriptor_setBinaryArchives(
                this: *mut root::MTL::FunctionDescriptor,
                binaryArchives: *const root::NS::Array,
            );
        }
        impl FunctionDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::FunctionDescriptor {
                FunctionDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::FunctionDescriptor {
                FunctionDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn functionDescriptor() -> *mut root::MTL::FunctionDescriptor {
                FunctionDescriptor_functionDescriptor()
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                FunctionDescriptor_name(self)
            }
            #[inline]
            pub unsafe fn setName(&mut self, name: *const root::NS::String) {
                FunctionDescriptor_setName(self, name)
            }
            #[inline]
            pub unsafe fn specializedName(&self) -> *mut root::NS::String {
                FunctionDescriptor_specializedName(self)
            }
            #[inline]
            pub unsafe fn setSpecializedName(&mut self, specializedName: *const root::NS::String) {
                FunctionDescriptor_setSpecializedName(self, specializedName)
            }
            #[inline]
            pub unsafe fn constantValues(&self) -> *mut root::MTL::FunctionConstantValues {
                FunctionDescriptor_constantValues(self)
            }
            #[inline]
            pub unsafe fn setConstantValues(
                &mut self,
                constantValues: *const root::MTL::FunctionConstantValues,
            ) {
                FunctionDescriptor_setConstantValues(self, constantValues)
            }
            #[inline]
            pub unsafe fn options(&self) -> root::MTL::FunctionOptions {
                FunctionDescriptor_options(self)
            }
            #[inline]
            pub unsafe fn setOptions(&mut self, options: root::MTL::FunctionOptions) {
                FunctionDescriptor_setOptions(self, options)
            }
            #[inline]
            pub unsafe fn binaryArchives(&self) -> *mut root::NS::Array {
                FunctionDescriptor_binaryArchives(self)
            }
            #[inline]
            pub unsafe fn setBinaryArchives(&mut self, binaryArchives: *const root::NS::Array) {
                FunctionDescriptor_setBinaryArchives(self, binaryArchives)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct IntersectionFunctionDescriptor {
            pub _base: root::NS::Copying<root::MTL::FunctionDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30IntersectionFunctionDescriptor5allocEv"]
            pub fn IntersectionFunctionDescriptor_alloc(
            ) -> *mut root::MTL::IntersectionFunctionDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30IntersectionFunctionDescriptor4initEv"]
            pub fn IntersectionFunctionDescriptor_init(
                this: *mut root::MTL::IntersectionFunctionDescriptor,
            ) -> *mut root::MTL::IntersectionFunctionDescriptor;
        }
        impl IntersectionFunctionDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::IntersectionFunctionDescriptor {
                IntersectionFunctionDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::IntersectionFunctionDescriptor {
                IntersectionFunctionDescriptor_init(self)
            }
        }
        pub const PatchType_PatchTypeNone: root::MTL::PatchType = 0;
        pub const PatchType_PatchTypeTriangle: root::MTL::PatchType = 1;
        pub const PatchType_PatchTypeQuad: root::MTL::PatchType = 2;
        pub type PatchType = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct VertexAttribute {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15VertexAttribute5allocEv"]
            pub fn VertexAttribute_alloc() -> *mut root::MTL::VertexAttribute;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15VertexAttribute4initEv"]
            pub fn VertexAttribute_init(
                this: *mut root::MTL::VertexAttribute,
            ) -> *mut root::MTL::VertexAttribute;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15VertexAttribute4nameEv"]
            pub fn VertexAttribute_name(
                this: *const root::MTL::VertexAttribute,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15VertexAttribute14attributeIndexEv"]
            pub fn VertexAttribute_attributeIndex(
                this: *const root::MTL::VertexAttribute,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15VertexAttribute13attributeTypeEv"]
            pub fn VertexAttribute_attributeType(
                this: *const root::MTL::VertexAttribute,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15VertexAttribute6activeEv"]
            pub fn VertexAttribute_active(this: *const root::MTL::VertexAttribute) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15VertexAttribute9patchDataEv"]
            pub fn VertexAttribute_patchData(this: *const root::MTL::VertexAttribute) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15VertexAttribute21patchControlPointDataEv"]
            pub fn VertexAttribute_patchControlPointData(
                this: *const root::MTL::VertexAttribute,
            ) -> bool;
        }
        impl VertexAttribute {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::VertexAttribute {
                VertexAttribute_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::VertexAttribute {
                VertexAttribute_init(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                VertexAttribute_name(self)
            }
            #[inline]
            pub unsafe fn attributeIndex(&self) -> root::NS::UInteger {
                VertexAttribute_attributeIndex(self)
            }
            #[inline]
            pub unsafe fn attributeType(&self) -> root::MTL::DataType {
                VertexAttribute_attributeType(self)
            }
            #[inline]
            pub unsafe fn active(&self) -> bool {
                VertexAttribute_active(self)
            }
            #[inline]
            pub unsafe fn patchData(&self) -> bool {
                VertexAttribute_patchData(self)
            }
            #[inline]
            pub unsafe fn patchControlPointData(&self) -> bool {
                VertexAttribute_patchControlPointData(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Attribute {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9Attribute5allocEv"]
            pub fn Attribute_alloc() -> *mut root::MTL::Attribute;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL9Attribute4initEv"]
            pub fn Attribute_init(this: *mut root::MTL::Attribute) -> *mut root::MTL::Attribute;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9Attribute4nameEv"]
            pub fn Attribute_name(this: *const root::MTL::Attribute) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9Attribute14attributeIndexEv"]
            pub fn Attribute_attributeIndex(
                this: *const root::MTL::Attribute,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9Attribute13attributeTypeEv"]
            pub fn Attribute_attributeType(
                this: *const root::MTL::Attribute,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9Attribute6activeEv"]
            pub fn Attribute_active(this: *const root::MTL::Attribute) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9Attribute9patchDataEv"]
            pub fn Attribute_patchData(this: *const root::MTL::Attribute) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL9Attribute21patchControlPointDataEv"]
            pub fn Attribute_patchControlPointData(this: *const root::MTL::Attribute) -> bool;
        }
        impl Attribute {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::Attribute {
                Attribute_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::Attribute {
                Attribute_init(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                Attribute_name(self)
            }
            #[inline]
            pub unsafe fn attributeIndex(&self) -> root::NS::UInteger {
                Attribute_attributeIndex(self)
            }
            #[inline]
            pub unsafe fn attributeType(&self) -> root::MTL::DataType {
                Attribute_attributeType(self)
            }
            #[inline]
            pub unsafe fn active(&self) -> bool {
                Attribute_active(self)
            }
            #[inline]
            pub unsafe fn patchData(&self) -> bool {
                Attribute_patchData(self)
            }
            #[inline]
            pub unsafe fn patchControlPointData(&self) -> bool {
                Attribute_patchControlPointData(self)
            }
        }
        pub const FunctionType_FunctionTypeVertex: root::MTL::FunctionType = 1;
        pub const FunctionType_FunctionTypeFragment: root::MTL::FunctionType = 2;
        pub const FunctionType_FunctionTypeKernel: root::MTL::FunctionType = 3;
        pub const FunctionType_FunctionTypeVisible: root::MTL::FunctionType = 5;
        pub const FunctionType_FunctionTypeIntersection: root::MTL::FunctionType = 6;
        pub type FunctionType = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionConstant {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL16FunctionConstant5allocEv"]
            pub fn FunctionConstant_alloc() -> *mut root::MTL::FunctionConstant;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL16FunctionConstant4initEv"]
            pub fn FunctionConstant_init(
                this: *mut root::MTL::FunctionConstant,
            ) -> *mut root::MTL::FunctionConstant;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL16FunctionConstant4nameEv"]
            pub fn FunctionConstant_name(
                this: *const root::MTL::FunctionConstant,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL16FunctionConstant4typeEv"]
            pub fn FunctionConstant_type(
                this: *const root::MTL::FunctionConstant,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL16FunctionConstant5indexEv"]
            pub fn FunctionConstant_index(
                this: *const root::MTL::FunctionConstant,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL16FunctionConstant8requiredEv"]
            pub fn FunctionConstant_required(this: *const root::MTL::FunctionConstant) -> bool;
        }
        impl FunctionConstant {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::FunctionConstant {
                FunctionConstant_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::FunctionConstant {
                FunctionConstant_init(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                FunctionConstant_name(self)
            }
            #[inline]
            pub unsafe fn type_(&self) -> root::MTL::DataType {
                FunctionConstant_type(self)
            }
            #[inline]
            pub unsafe fn index(&self) -> root::NS::UInteger {
                FunctionConstant_index(self)
            }
            #[inline]
            pub unsafe fn required(&self) -> bool {
                FunctionConstant_required(self)
            }
        }
        pub type AutoreleasedArgument = *mut root::MTL::Argument;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Function {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function5labelEv"]
            pub fn Function_label(this: *const root::MTL::Function) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Function8setLabelEPKN2NS6StringE"]
            pub fn Function_setLabel(
                this: *mut root::MTL::Function,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function6deviceEv"]
            pub fn Function_device(this: *const root::MTL::Function) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function12functionTypeEv"]
            pub fn Function_functionType(
                this: *const root::MTL::Function,
            ) -> root::MTL::FunctionType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function9patchTypeEv"]
            pub fn Function_patchType(this: *const root::MTL::Function) -> root::MTL::PatchType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function22patchControlPointCountEv"]
            pub fn Function_patchControlPointCount(
                this: *const root::MTL::Function,
            ) -> root::NS::Integer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function16vertexAttributesEv"]
            pub fn Function_vertexAttributes(
                this: *const root::MTL::Function,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function20stageInputAttributesEv"]
            pub fn Function_stageInputAttributes(
                this: *const root::MTL::Function,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function4nameEv"]
            pub fn Function_name(this: *const root::MTL::Function) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function27functionConstantsDictionaryEv"]
            pub fn Function_functionConstantsDictionary(
                this: *const root::MTL::Function,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Function18newArgumentEncoderEm"]
            pub fn Function_newArgumentEncoder(
                this: *mut root::MTL::Function,
                bufferIndex: root::NS::UInteger,
            ) -> *mut root::MTL::ArgumentEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Function18newArgumentEncoderEmPKPNS_8ArgumentE"]
            pub fn Function_newArgumentEncoder1(
                this: *mut root::MTL::Function,
                bufferIndex: root::NS::UInteger,
                reflection: *const root::MTL::AutoreleasedArgument,
            ) -> *mut root::MTL::ArgumentEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Function7optionsEv"]
            pub fn Function_options(this: *const root::MTL::Function)
                -> root::MTL::FunctionOptions;
        }
        impl Function {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                Function_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                Function_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                Function_device(self)
            }
            #[inline]
            pub unsafe fn functionType(&self) -> root::MTL::FunctionType {
                Function_functionType(self)
            }
            #[inline]
            pub unsafe fn patchType(&self) -> root::MTL::PatchType {
                Function_patchType(self)
            }
            #[inline]
            pub unsafe fn patchControlPointCount(&self) -> root::NS::Integer {
                Function_patchControlPointCount(self)
            }
            #[inline]
            pub unsafe fn vertexAttributes(&self) -> *mut root::NS::Array {
                Function_vertexAttributes(self)
            }
            #[inline]
            pub unsafe fn stageInputAttributes(&self) -> *mut root::NS::Array {
                Function_stageInputAttributes(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                Function_name(self)
            }
            #[inline]
            pub unsafe fn functionConstantsDictionary(&self) -> *mut root::NS::Dictionary {
                Function_functionConstantsDictionary(self)
            }
            #[inline]
            pub unsafe fn newArgumentEncoder(
                &mut self,
                bufferIndex: root::NS::UInteger,
            ) -> *mut root::MTL::ArgumentEncoder {
                Function_newArgumentEncoder(self, bufferIndex)
            }
            #[inline]
            pub unsafe fn newArgumentEncoder1(
                &mut self,
                bufferIndex: root::NS::UInteger,
                reflection: *const root::MTL::AutoreleasedArgument,
            ) -> *mut root::MTL::ArgumentEncoder {
                Function_newArgumentEncoder1(self, bufferIndex, reflection)
            }
            #[inline]
            pub unsafe fn options(&self) -> root::MTL::FunctionOptions {
                Function_options(self)
            }
        }
        pub const LanguageVersion_LanguageVersion1_0: root::MTL::LanguageVersion = 65536;
        pub const LanguageVersion_LanguageVersion1_1: root::MTL::LanguageVersion = 65537;
        pub const LanguageVersion_LanguageVersion1_2: root::MTL::LanguageVersion = 65538;
        pub const LanguageVersion_LanguageVersion2_0: root::MTL::LanguageVersion = 131072;
        pub const LanguageVersion_LanguageVersion2_1: root::MTL::LanguageVersion = 131073;
        pub const LanguageVersion_LanguageVersion2_2: root::MTL::LanguageVersion = 131074;
        pub const LanguageVersion_LanguageVersion2_3: root::MTL::LanguageVersion = 131075;
        pub const LanguageVersion_LanguageVersion2_4: root::MTL::LanguageVersion = 131076;
        pub type LanguageVersion = root::NS::UInteger;
        pub const LibraryType_LibraryTypeExecutable: root::MTL::LibraryType = 0;
        pub const LibraryType_LibraryTypeDynamic: root::MTL::LibraryType = 1;
        pub type LibraryType = root::NS::Integer;
        #[repr(C)]
        #[derive(Debug)]
        pub struct CompileOptions {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions5allocEv"]
            pub fn CompileOptions_alloc() -> *mut root::MTL::CompileOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions4initEv"]
            pub fn CompileOptions_init(
                this: *mut root::MTL::CompileOptions,
            ) -> *mut root::MTL::CompileOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CompileOptions18preprocessorMacrosEv"]
            pub fn CompileOptions_preprocessorMacros(
                this: *const root::MTL::CompileOptions,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions21setPreprocessorMacrosEPKN2NS10DictionaryE"]
            pub fn CompileOptions_setPreprocessorMacros(
                this: *mut root::MTL::CompileOptions,
                preprocessorMacros: *const root::NS::Dictionary,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CompileOptions15fastMathEnabledEv"]
            pub fn CompileOptions_fastMathEnabled(this: *const root::MTL::CompileOptions) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions18setFastMathEnabledEb"]
            pub fn CompileOptions_setFastMathEnabled(
                this: *mut root::MTL::CompileOptions,
                fastMathEnabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CompileOptions15languageVersionEv"]
            pub fn CompileOptions_languageVersion(
                this: *const root::MTL::CompileOptions,
            ) -> root::MTL::LanguageVersion;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions18setLanguageVersionENS_15LanguageVersionE"]
            pub fn CompileOptions_setLanguageVersion(
                this: *mut root::MTL::CompileOptions,
                languageVersion: root::MTL::LanguageVersion,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CompileOptions11libraryTypeEv"]
            pub fn CompileOptions_libraryType(
                this: *const root::MTL::CompileOptions,
            ) -> root::MTL::LibraryType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions14setLibraryTypeENS_11LibraryTypeE"]
            pub fn CompileOptions_setLibraryType(
                this: *mut root::MTL::CompileOptions,
                libraryType: root::MTL::LibraryType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CompileOptions11installNameEv"]
            pub fn CompileOptions_installName(
                this: *const root::MTL::CompileOptions,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions14setInstallNameEPKN2NS6StringE"]
            pub fn CompileOptions_setInstallName(
                this: *mut root::MTL::CompileOptions,
                installName: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CompileOptions9librariesEv"]
            pub fn CompileOptions_libraries(
                this: *const root::MTL::CompileOptions,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions12setLibrariesEPKN2NS5ArrayE"]
            pub fn CompileOptions_setLibraries(
                this: *mut root::MTL::CompileOptions,
                libraries: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CompileOptions18preserveInvarianceEv"]
            pub fn CompileOptions_preserveInvariance(
                this: *const root::MTL::CompileOptions,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CompileOptions21setPreserveInvarianceEb"]
            pub fn CompileOptions_setPreserveInvariance(
                this: *mut root::MTL::CompileOptions,
                preserveInvariance: bool,
            );
        }
        impl CompileOptions {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::CompileOptions {
                CompileOptions_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::CompileOptions {
                CompileOptions_init(self)
            }
            #[inline]
            pub unsafe fn preprocessorMacros(&self) -> *mut root::NS::Dictionary {
                CompileOptions_preprocessorMacros(self)
            }
            #[inline]
            pub unsafe fn setPreprocessorMacros(
                &mut self,
                preprocessorMacros: *const root::NS::Dictionary,
            ) {
                CompileOptions_setPreprocessorMacros(self, preprocessorMacros)
            }
            #[inline]
            pub unsafe fn fastMathEnabled(&self) -> bool {
                CompileOptions_fastMathEnabled(self)
            }
            #[inline]
            pub unsafe fn setFastMathEnabled(&mut self, fastMathEnabled: bool) {
                CompileOptions_setFastMathEnabled(self, fastMathEnabled)
            }
            #[inline]
            pub unsafe fn languageVersion(&self) -> root::MTL::LanguageVersion {
                CompileOptions_languageVersion(self)
            }
            #[inline]
            pub unsafe fn setLanguageVersion(
                &mut self,
                languageVersion: root::MTL::LanguageVersion,
            ) {
                CompileOptions_setLanguageVersion(self, languageVersion)
            }
            #[inline]
            pub unsafe fn libraryType(&self) -> root::MTL::LibraryType {
                CompileOptions_libraryType(self)
            }
            #[inline]
            pub unsafe fn setLibraryType(&mut self, libraryType: root::MTL::LibraryType) {
                CompileOptions_setLibraryType(self, libraryType)
            }
            #[inline]
            pub unsafe fn installName(&self) -> *mut root::NS::String {
                CompileOptions_installName(self)
            }
            #[inline]
            pub unsafe fn setInstallName(&mut self, installName: *const root::NS::String) {
                CompileOptions_setInstallName(self, installName)
            }
            #[inline]
            pub unsafe fn libraries(&self) -> *mut root::NS::Array {
                CompileOptions_libraries(self)
            }
            #[inline]
            pub unsafe fn setLibraries(&mut self, libraries: *const root::NS::Array) {
                CompileOptions_setLibraries(self, libraries)
            }
            #[inline]
            pub unsafe fn preserveInvariance(&self) -> bool {
                CompileOptions_preserveInvariance(self)
            }
            #[inline]
            pub unsafe fn setPreserveInvariance(&mut self, preserveInvariance: bool) {
                CompileOptions_setPreserveInvariance(self, preserveInvariance)
            }
        }
        pub const LibraryError_LibraryErrorUnsupported: root::MTL::LibraryError = 1;
        pub const LibraryError_LibraryErrorCompileFailure: root::MTL::LibraryError = 3;
        pub const LibraryError_LibraryErrorCompileWarning: root::MTL::LibraryError = 4;
        pub const LibraryError_LibraryErrorFunctionNotFound: root::MTL::LibraryError = 5;
        pub const LibraryError_LibraryErrorFileNotFound: root::MTL::LibraryError = 6;
        pub type LibraryError = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Library {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library11newFunctionEPKN2NS6StringEPKNS_22FunctionConstantValuesERKNSt3__18functionIFvPNS_8FunctionEPNS1_5ErrorEEEE"]
            pub fn Library_newFunction(
                this: *mut root::MTL::Library,
                pFunctionName: *const root::NS::String,
                pConstantValues: *const root::MTL::FunctionConstantValues,
                completionHandler: *const [u64; 4usize],
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library11newFunctionEPKNS_18FunctionDescriptorERKNSt3__18functionIFvPNS_8FunctionEPN2NS5ErrorEEEE"]
            pub fn Library_newFunction1(
                this: *mut root::MTL::Library,
                pDescriptor: *const root::MTL::FunctionDescriptor,
                completionHandler: *const [u64; 4usize],
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library23newIntersectionFunctionEPKNS_30IntersectionFunctionDescriptorERKNSt3__18functionIFvPNS_8FunctionEPN2NS5ErrorEEEE"]
            pub fn Library_newIntersectionFunction(
                this: *mut root::MTL::Library,
                pDescriptor: *const root::MTL::IntersectionFunctionDescriptor,
                completionHandler: *const [u64; 4usize],
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Library5labelEv"]
            pub fn Library_label(this: *const root::MTL::Library) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library8setLabelEPKN2NS6StringE"]
            pub fn Library_setLabel(this: *mut root::MTL::Library, label: *const root::NS::String);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Library6deviceEv"]
            pub fn Library_device(this: *const root::MTL::Library) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library11newFunctionEPKN2NS6StringE"]
            pub fn Library_newFunction2(
                this: *mut root::MTL::Library,
                functionName: *const root::NS::String,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library11newFunctionEPKN2NS6StringEPKNS_22FunctionConstantValuesEPPNS1_5ErrorE"]
            pub fn Library_newFunction3(
                this: *mut root::MTL::Library,
                name: *const root::NS::String,
                constantValues: *const root::MTL::FunctionConstantValues,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library11newFunctionEPKN2NS6StringEPKNS_22FunctionConstantValuesEU13block_pointerFvPNS_8FunctionEPNS1_5ErrorEE"]
            pub fn Library_newFunction4(
                this: *mut root::MTL::Library,
                name: *const root::NS::String,
                constantValues: *const root::MTL::FunctionConstantValues,
                completionHandler: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library11newFunctionEPKNS_18FunctionDescriptorEU13block_pointerFvPNS_8FunctionEPN2NS5ErrorEE"]
            pub fn Library_newFunction5(
                this: *mut root::MTL::Library,
                descriptor: *const root::MTL::FunctionDescriptor,
                completionHandler: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library11newFunctionEPKNS_18FunctionDescriptorEPPN2NS5ErrorE"]
            pub fn Library_newFunction6(
                this: *mut root::MTL::Library,
                descriptor: *const root::MTL::FunctionDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library23newIntersectionFunctionEPKNS_30IntersectionFunctionDescriptorEU13block_pointerFvPNS_8FunctionEPN2NS5ErrorEE"]
            pub fn Library_newIntersectionFunction1(
                this: *mut root::MTL::Library,
                descriptor: *const root::MTL::IntersectionFunctionDescriptor,
                completionHandler: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL7Library23newIntersectionFunctionEPKNS_30IntersectionFunctionDescriptorEPPN2NS5ErrorE"]
            pub fn Library_newIntersectionFunction2(
                this: *mut root::MTL::Library,
                descriptor: *const root::MTL::IntersectionFunctionDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Library13functionNamesEv"]
            pub fn Library_functionNames(this: *const root::MTL::Library) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Library4typeEv"]
            pub fn Library_type(this: *const root::MTL::Library) -> root::MTL::LibraryType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Library11installNameEv"]
            pub fn Library_installName(this: *const root::MTL::Library) -> *mut root::NS::String;
        }
        impl Library {
            #[inline]
            pub unsafe fn newFunction(
                &mut self,
                pFunctionName: *const root::NS::String,
                pConstantValues: *const root::MTL::FunctionConstantValues,
                completionHandler: *const [u64; 4usize],
            ) {
                Library_newFunction(self, pFunctionName, pConstantValues, completionHandler)
            }
            #[inline]
            pub unsafe fn newFunction1(
                &mut self,
                pDescriptor: *const root::MTL::FunctionDescriptor,
                completionHandler: *const [u64; 4usize],
            ) {
                Library_newFunction1(self, pDescriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn newIntersectionFunction(
                &mut self,
                pDescriptor: *const root::MTL::IntersectionFunctionDescriptor,
                completionHandler: *const [u64; 4usize],
            ) {
                Library_newIntersectionFunction(self, pDescriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                Library_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                Library_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                Library_device(self)
            }
            #[inline]
            pub unsafe fn newFunction2(
                &mut self,
                functionName: *const root::NS::String,
            ) -> *mut root::MTL::Function {
                Library_newFunction2(self, functionName)
            }
            #[inline]
            pub unsafe fn newFunction3(
                &mut self,
                name: *const root::NS::String,
                constantValues: *const root::MTL::FunctionConstantValues,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Function {
                Library_newFunction3(self, name, constantValues, error)
            }
            #[inline]
            pub unsafe fn newFunction4(
                &mut self,
                name: *const root::NS::String,
                constantValues: *const root::MTL::FunctionConstantValues,
                completionHandler: *mut ::std::os::raw::c_void,
            ) {
                Library_newFunction4(self, name, constantValues, completionHandler)
            }
            #[inline]
            pub unsafe fn newFunction5(
                &mut self,
                descriptor: *const root::MTL::FunctionDescriptor,
                completionHandler: *mut ::std::os::raw::c_void,
            ) {
                Library_newFunction5(self, descriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn newFunction6(
                &mut self,
                descriptor: *const root::MTL::FunctionDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Function {
                Library_newFunction6(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn newIntersectionFunction1(
                &mut self,
                descriptor: *const root::MTL::IntersectionFunctionDescriptor,
                completionHandler: *mut ::std::os::raw::c_void,
            ) {
                Library_newIntersectionFunction1(self, descriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn newIntersectionFunction2(
                &mut self,
                descriptor: *const root::MTL::IntersectionFunctionDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Function {
                Library_newIntersectionFunction2(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn functionNames(&self) -> *mut root::NS::Array {
                Library_functionNames(self)
            }
            #[inline]
            pub unsafe fn type_(&self) -> root::MTL::LibraryType {
                Library_type(self)
            }
            #[inline]
            pub unsafe fn installName(&self) -> *mut root::NS::String {
                Library_installName(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionHandle {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14FunctionHandle12functionTypeEv"]
            pub fn FunctionHandle_functionType(
                this: *const root::MTL::FunctionHandle,
            ) -> root::MTL::FunctionType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14FunctionHandle4nameEv"]
            pub fn FunctionHandle_name(
                this: *const root::MTL::FunctionHandle,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14FunctionHandle6deviceEv"]
            pub fn FunctionHandle_device(
                this: *const root::MTL::FunctionHandle,
            ) -> *mut root::MTL::Device;
        }
        impl FunctionHandle {
            #[inline]
            pub unsafe fn functionType(&self) -> root::MTL::FunctionType {
                FunctionHandle_functionType(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                FunctionHandle_name(self)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                FunctionHandle_device(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct VisibleFunctionTableDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VisibleFunctionTableDescriptor5allocEv"]
            pub fn VisibleFunctionTableDescriptor_alloc(
            ) -> *mut root::MTL::VisibleFunctionTableDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VisibleFunctionTableDescriptor4initEv"]
            pub fn VisibleFunctionTableDescriptor_init(
                this: *mut root::MTL::VisibleFunctionTableDescriptor,
            ) -> *mut root::MTL::VisibleFunctionTableDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VisibleFunctionTableDescriptor30visibleFunctionTableDescriptorEv"]
            pub fn VisibleFunctionTableDescriptor_visibleFunctionTableDescriptor(
            ) -> *mut root::MTL::VisibleFunctionTableDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30VisibleFunctionTableDescriptor13functionCountEv"]
            pub fn VisibleFunctionTableDescriptor_functionCount(
                this: *const root::MTL::VisibleFunctionTableDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VisibleFunctionTableDescriptor16setFunctionCountEm"]
            pub fn VisibleFunctionTableDescriptor_setFunctionCount(
                this: *mut root::MTL::VisibleFunctionTableDescriptor,
                functionCount: root::NS::UInteger,
            );
        }
        impl VisibleFunctionTableDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::VisibleFunctionTableDescriptor {
                VisibleFunctionTableDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::VisibleFunctionTableDescriptor {
                VisibleFunctionTableDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn visibleFunctionTableDescriptor(
            ) -> *mut root::MTL::VisibleFunctionTableDescriptor {
                VisibleFunctionTableDescriptor_visibleFunctionTableDescriptor()
            }
            #[inline]
            pub unsafe fn functionCount(&self) -> root::NS::UInteger {
                VisibleFunctionTableDescriptor_functionCount(self)
            }
            #[inline]
            pub unsafe fn setFunctionCount(&mut self, functionCount: root::NS::UInteger) {
                VisibleFunctionTableDescriptor_setFunctionCount(self, functionCount)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct VisibleFunctionTable {
            pub _base: root::NS::Referencing<root::MTL::Resource>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20VisibleFunctionTable11setFunctionEPKNS_14FunctionHandleEm"]
            pub fn VisibleFunctionTable_setFunction(
                this: *mut root::MTL::VisibleFunctionTable,
                function: *const root::MTL::FunctionHandle,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20VisibleFunctionTable12setFunctionsEPPKNS_14FunctionHandleEN2NS5RangeE"]
            pub fn VisibleFunctionTable_setFunctions(
                this: *mut root::MTL::VisibleFunctionTable,
                functions: *mut *const root::MTL::FunctionHandle,
                range: root::NS::Range,
            );
        }
        impl VisibleFunctionTable {
            #[inline]
            pub unsafe fn setFunction(
                &mut self,
                function: *const root::MTL::FunctionHandle,
                index: root::NS::UInteger,
            ) {
                VisibleFunctionTable_setFunction(self, function, index)
            }
            #[inline]
            pub unsafe fn setFunctions(
                &mut self,
                functions: *mut *const root::MTL::FunctionHandle,
                range: root::NS::Range,
            ) {
                VisibleFunctionTable_setFunctions(self, functions, range)
            }
        }
        pub type IntersectionFunctionSignature = root::NS::UInteger;
        pub const MTL_IntersectionFunctionSignatureNone: root::MTL::IntersectionFunctionSignature =
            0;
        pub const MTL_IntersectionFunctionSignatureInstancing:
            root::MTL::IntersectionFunctionSignature = 1;
        pub const MTL_IntersectionFunctionSignatureTriangleData:
            root::MTL::IntersectionFunctionSignature = 2;
        pub const MTL_IntersectionFunctionSignatureWorldSpaceData:
            root::MTL::IntersectionFunctionSignature = 4;
        pub const MTL_IntersectionFunctionSignatureInstanceMotion:
            root::MTL::IntersectionFunctionSignature = 8;
        pub const MTL_IntersectionFunctionSignaturePrimitiveMotion:
            root::MTL::IntersectionFunctionSignature = 16;
        pub const MTL_IntersectionFunctionSignatureExtendedLimits:
            root::MTL::IntersectionFunctionSignature = 32;
        pub type _bindgen_ty_9 = root::MTL::IntersectionFunctionSignature;
        #[repr(C)]
        #[derive(Debug)]
        pub struct IntersectionFunctionTableDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35IntersectionFunctionTableDescriptor5allocEv"]
            pub fn IntersectionFunctionTableDescriptor_alloc(
            ) -> *mut root::MTL::IntersectionFunctionTableDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35IntersectionFunctionTableDescriptor4initEv"]
            pub fn IntersectionFunctionTableDescriptor_init(
                this: *mut root::MTL::IntersectionFunctionTableDescriptor,
            ) -> *mut root::MTL::IntersectionFunctionTableDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35IntersectionFunctionTableDescriptor35intersectionFunctionTableDescriptorEv"]
            pub fn IntersectionFunctionTableDescriptor_intersectionFunctionTableDescriptor(
            ) -> *mut root::MTL::IntersectionFunctionTableDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL35IntersectionFunctionTableDescriptor13functionCountEv"]
            pub fn IntersectionFunctionTableDescriptor_functionCount(
                this: *const root::MTL::IntersectionFunctionTableDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35IntersectionFunctionTableDescriptor16setFunctionCountEm"]
            pub fn IntersectionFunctionTableDescriptor_setFunctionCount(
                this: *mut root::MTL::IntersectionFunctionTableDescriptor,
                functionCount: root::NS::UInteger,
            );
        }
        impl IntersectionFunctionTableDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::IntersectionFunctionTableDescriptor {
                IntersectionFunctionTableDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::IntersectionFunctionTableDescriptor {
                IntersectionFunctionTableDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn intersectionFunctionTableDescriptor(
            ) -> *mut root::MTL::IntersectionFunctionTableDescriptor {
                IntersectionFunctionTableDescriptor_intersectionFunctionTableDescriptor()
            }
            #[inline]
            pub unsafe fn functionCount(&self) -> root::NS::UInteger {
                IntersectionFunctionTableDescriptor_functionCount(self)
            }
            #[inline]
            pub unsafe fn setFunctionCount(&mut self, functionCount: root::NS::UInteger) {
                IntersectionFunctionTableDescriptor_setFunctionCount(self, functionCount)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct IntersectionFunctionTable {
            pub _base: root::NS::Referencing<root::MTL::Resource>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable9setBufferEPKNS_6BufferEmm"]
            pub fn IntersectionFunctionTable_setBuffer(
                this: *mut root::MTL::IntersectionFunctionTable,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable10setBuffersEPPKNS_6BufferEPKmN2NS5RangeE"]
            pub fn IntersectionFunctionTable_setBuffers(
                this: *mut root::MTL::IntersectionFunctionTable,
                buffers: *mut *const root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable11setFunctionEPKNS_14FunctionHandleEm"]
            pub fn IntersectionFunctionTable_setFunction(
                this: *mut root::MTL::IntersectionFunctionTable,
                function: *const root::MTL::FunctionHandle,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable12setFunctionsEPPKNS_14FunctionHandleEN2NS5RangeE"]
            pub fn IntersectionFunctionTable_setFunctions(
                this: *mut root::MTL::IntersectionFunctionTable,
                functions: *mut *const root::MTL::FunctionHandle,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable37setOpaqueTriangleIntersectionFunctionEmm"]
            pub fn IntersectionFunctionTable_setOpaqueTriangleIntersectionFunction(
                this: *mut root::MTL::IntersectionFunctionTable,
                signature: root::MTL::IntersectionFunctionSignature,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable37setOpaqueTriangleIntersectionFunctionEmN2NS5RangeE"]
            pub fn IntersectionFunctionTable_setOpaqueTriangleIntersectionFunction1(
                this: *mut root::MTL::IntersectionFunctionTable,
                signature: root::MTL::IntersectionFunctionSignature,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable23setVisibleFunctionTableEPKNS_20VisibleFunctionTableEm"]
            pub fn IntersectionFunctionTable_setVisibleFunctionTable(
                this: *mut root::MTL::IntersectionFunctionTable,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25IntersectionFunctionTable24setVisibleFunctionTablesEPPKNS_20VisibleFunctionTableEN2NS5RangeE"]
            pub fn IntersectionFunctionTable_setVisibleFunctionTables(
                this: *mut root::MTL::IntersectionFunctionTable,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                bufferRange: root::NS::Range,
            );
        }
        impl IntersectionFunctionTable {
            #[inline]
            pub unsafe fn setBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                IntersectionFunctionTable_setBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn setBuffers(
                &mut self,
                buffers: *mut *const root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            ) {
                IntersectionFunctionTable_setBuffers(self, buffers, offsets, range)
            }
            #[inline]
            pub unsafe fn setFunction(
                &mut self,
                function: *const root::MTL::FunctionHandle,
                index: root::NS::UInteger,
            ) {
                IntersectionFunctionTable_setFunction(self, function, index)
            }
            #[inline]
            pub unsafe fn setFunctions(
                &mut self,
                functions: *mut *const root::MTL::FunctionHandle,
                range: root::NS::Range,
            ) {
                IntersectionFunctionTable_setFunctions(self, functions, range)
            }
            #[inline]
            pub unsafe fn setOpaqueTriangleIntersectionFunction(
                &mut self,
                signature: root::MTL::IntersectionFunctionSignature,
                index: root::NS::UInteger,
            ) {
                IntersectionFunctionTable_setOpaqueTriangleIntersectionFunction(
                    self, signature, index,
                )
            }
            #[inline]
            pub unsafe fn setOpaqueTriangleIntersectionFunction1(
                &mut self,
                signature: root::MTL::IntersectionFunctionSignature,
                range: root::NS::Range,
            ) {
                IntersectionFunctionTable_setOpaqueTriangleIntersectionFunction1(
                    self, signature, range,
                )
            }
            #[inline]
            pub unsafe fn setVisibleFunctionTable(
                &mut self,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                IntersectionFunctionTable_setVisibleFunctionTable(self, functionTable, bufferIndex)
            }
            #[inline]
            pub unsafe fn setVisibleFunctionTables(
                &mut self,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                bufferRange: root::NS::Range,
            ) {
                IntersectionFunctionTable_setVisibleFunctionTables(
                    self,
                    functionTables,
                    bufferRange,
                )
            }
        }
        pub const LoadAction_LoadActionDontCare: root::MTL::LoadAction = 0;
        pub const LoadAction_LoadActionLoad: root::MTL::LoadAction = 1;
        pub const LoadAction_LoadActionClear: root::MTL::LoadAction = 2;
        pub type LoadAction = root::NS::UInteger;
        pub const StoreAction_StoreActionDontCare: root::MTL::StoreAction = 0;
        pub const StoreAction_StoreActionStore: root::MTL::StoreAction = 1;
        pub const StoreAction_StoreActionMultisampleResolve: root::MTL::StoreAction = 2;
        pub const StoreAction_StoreActionStoreAndMultisampleResolve: root::MTL::StoreAction = 3;
        pub const StoreAction_StoreActionUnknown: root::MTL::StoreAction = 4;
        pub const StoreAction_StoreActionCustomSampleDepthStore: root::MTL::StoreAction = 5;
        pub type StoreAction = root::NS::UInteger;
        pub type StoreActionOptions = root::NS::UInteger;
        pub const MTL_StoreActionOptionNone: root::MTL::StoreActionOptions = 0;
        pub const MTL_StoreActionOptionValidMask: root::MTL::StoreActionOptions = 1;
        pub const MTL_StoreActionOptionCustomSamplePositions: root::MTL::StoreActionOptions = 1;
        pub type _bindgen_ty_10 = root::MTL::StoreActionOptions;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct ClearColor {
            pub red: f64,
            pub green: f64,
            pub blue: f64,
            pub alpha: f64,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL10ClearColor4MakeEdddd"]
            pub fn ClearColor_Make(
                red: f64,
                green: f64,
                blue: f64,
                alpha: f64,
            ) -> root::MTL::ClearColor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL10ClearColorC1Edddd"]
            pub fn ClearColor_ClearColor(
                this: *mut root::MTL::ClearColor,
                red: f64,
                green: f64,
                blue: f64,
                alpha: f64,
            );
        }
        impl ClearColor {
            #[inline]
            pub unsafe fn Make(
                red: f64,
                green: f64,
                blue: f64,
                alpha: f64,
            ) -> root::MTL::ClearColor {
                ClearColor_Make(red, green, blue, alpha)
            }
            #[inline]
            pub unsafe fn new(red: f64, green: f64, blue: f64, alpha: f64) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                ClearColor_ClearColor(__bindgen_tmp.as_mut_ptr(), red, green, blue, alpha);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassAttachmentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor5allocEv"]
            pub fn RenderPassAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::RenderPassAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor4initEv"]
            pub fn RenderPassAttachmentDescriptor_init(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
            ) -> *mut root::MTL::RenderPassAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor7textureEv"]
            pub fn RenderPassAttachmentDescriptor_texture(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor10setTextureEPKNS_7TextureE"]
            pub fn RenderPassAttachmentDescriptor_setTexture(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                texture: *const root::MTL::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor5levelEv"]
            pub fn RenderPassAttachmentDescriptor_level(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor8setLevelEm"]
            pub fn RenderPassAttachmentDescriptor_setLevel(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                level: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor5sliceEv"]
            pub fn RenderPassAttachmentDescriptor_slice(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor8setSliceEm"]
            pub fn RenderPassAttachmentDescriptor_setSlice(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                slice: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor10depthPlaneEv"]
            pub fn RenderPassAttachmentDescriptor_depthPlane(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor13setDepthPlaneEm"]
            pub fn RenderPassAttachmentDescriptor_setDepthPlane(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                depthPlane: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor14resolveTextureEv"]
            pub fn RenderPassAttachmentDescriptor_resolveTexture(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor17setResolveTextureEPKNS_7TextureE"]
            pub fn RenderPassAttachmentDescriptor_setResolveTexture(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                resolveTexture: *const root::MTL::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor12resolveLevelEv"]
            pub fn RenderPassAttachmentDescriptor_resolveLevel(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor15setResolveLevelEm"]
            pub fn RenderPassAttachmentDescriptor_setResolveLevel(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                resolveLevel: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor12resolveSliceEv"]
            pub fn RenderPassAttachmentDescriptor_resolveSlice(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor15setResolveSliceEm"]
            pub fn RenderPassAttachmentDescriptor_setResolveSlice(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                resolveSlice: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor17resolveDepthPlaneEv"]
            pub fn RenderPassAttachmentDescriptor_resolveDepthPlane(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor20setResolveDepthPlaneEm"]
            pub fn RenderPassAttachmentDescriptor_setResolveDepthPlane(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                resolveDepthPlane: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor10loadActionEv"]
            pub fn RenderPassAttachmentDescriptor_loadAction(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::MTL::LoadAction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor13setLoadActionENS_10LoadActionE"]
            pub fn RenderPassAttachmentDescriptor_setLoadAction(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                loadAction: root::MTL::LoadAction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor11storeActionEv"]
            pub fn RenderPassAttachmentDescriptor_storeAction(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::MTL::StoreAction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor14setStoreActionENS_11StoreActionE"]
            pub fn RenderPassAttachmentDescriptor_setStoreAction(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                storeAction: root::MTL::StoreAction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RenderPassAttachmentDescriptor18storeActionOptionsEv"]
            pub fn RenderPassAttachmentDescriptor_storeActionOptions(
                this: *const root::MTL::RenderPassAttachmentDescriptor,
            ) -> root::MTL::StoreActionOptions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RenderPassAttachmentDescriptor21setStoreActionOptionsEm"]
            pub fn RenderPassAttachmentDescriptor_setStoreActionOptions(
                this: *mut root::MTL::RenderPassAttachmentDescriptor,
                storeActionOptions: root::MTL::StoreActionOptions,
            );
        }
        impl RenderPassAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassAttachmentDescriptor {
                RenderPassAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPassAttachmentDescriptor {
                RenderPassAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn texture(&self) -> *mut root::MTL::Texture {
                RenderPassAttachmentDescriptor_texture(self)
            }
            #[inline]
            pub unsafe fn setTexture(&mut self, texture: *const root::MTL::Texture) {
                RenderPassAttachmentDescriptor_setTexture(self, texture)
            }
            #[inline]
            pub unsafe fn level(&self) -> root::NS::UInteger {
                RenderPassAttachmentDescriptor_level(self)
            }
            #[inline]
            pub unsafe fn setLevel(&mut self, level: root::NS::UInteger) {
                RenderPassAttachmentDescriptor_setLevel(self, level)
            }
            #[inline]
            pub unsafe fn slice(&self) -> root::NS::UInteger {
                RenderPassAttachmentDescriptor_slice(self)
            }
            #[inline]
            pub unsafe fn setSlice(&mut self, slice: root::NS::UInteger) {
                RenderPassAttachmentDescriptor_setSlice(self, slice)
            }
            #[inline]
            pub unsafe fn depthPlane(&self) -> root::NS::UInteger {
                RenderPassAttachmentDescriptor_depthPlane(self)
            }
            #[inline]
            pub unsafe fn setDepthPlane(&mut self, depthPlane: root::NS::UInteger) {
                RenderPassAttachmentDescriptor_setDepthPlane(self, depthPlane)
            }
            #[inline]
            pub unsafe fn resolveTexture(&self) -> *mut root::MTL::Texture {
                RenderPassAttachmentDescriptor_resolveTexture(self)
            }
            #[inline]
            pub unsafe fn setResolveTexture(&mut self, resolveTexture: *const root::MTL::Texture) {
                RenderPassAttachmentDescriptor_setResolveTexture(self, resolveTexture)
            }
            #[inline]
            pub unsafe fn resolveLevel(&self) -> root::NS::UInteger {
                RenderPassAttachmentDescriptor_resolveLevel(self)
            }
            #[inline]
            pub unsafe fn setResolveLevel(&mut self, resolveLevel: root::NS::UInteger) {
                RenderPassAttachmentDescriptor_setResolveLevel(self, resolveLevel)
            }
            #[inline]
            pub unsafe fn resolveSlice(&self) -> root::NS::UInteger {
                RenderPassAttachmentDescriptor_resolveSlice(self)
            }
            #[inline]
            pub unsafe fn setResolveSlice(&mut self, resolveSlice: root::NS::UInteger) {
                RenderPassAttachmentDescriptor_setResolveSlice(self, resolveSlice)
            }
            #[inline]
            pub unsafe fn resolveDepthPlane(&self) -> root::NS::UInteger {
                RenderPassAttachmentDescriptor_resolveDepthPlane(self)
            }
            #[inline]
            pub unsafe fn setResolveDepthPlane(&mut self, resolveDepthPlane: root::NS::UInteger) {
                RenderPassAttachmentDescriptor_setResolveDepthPlane(self, resolveDepthPlane)
            }
            #[inline]
            pub unsafe fn loadAction(&self) -> root::MTL::LoadAction {
                RenderPassAttachmentDescriptor_loadAction(self)
            }
            #[inline]
            pub unsafe fn setLoadAction(&mut self, loadAction: root::MTL::LoadAction) {
                RenderPassAttachmentDescriptor_setLoadAction(self, loadAction)
            }
            #[inline]
            pub unsafe fn storeAction(&self) -> root::MTL::StoreAction {
                RenderPassAttachmentDescriptor_storeAction(self)
            }
            #[inline]
            pub unsafe fn setStoreAction(&mut self, storeAction: root::MTL::StoreAction) {
                RenderPassAttachmentDescriptor_setStoreAction(self, storeAction)
            }
            #[inline]
            pub unsafe fn storeActionOptions(&self) -> root::MTL::StoreActionOptions {
                RenderPassAttachmentDescriptor_storeActionOptions(self)
            }
            #[inline]
            pub unsafe fn setStoreActionOptions(
                &mut self,
                storeActionOptions: root::MTL::StoreActionOptions,
            ) {
                RenderPassAttachmentDescriptor_setStoreActionOptions(self, storeActionOptions)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassColorAttachmentDescriptor {
            pub _base: root::NS::Copying<root::MTL::RenderPassAttachmentDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35RenderPassColorAttachmentDescriptor5allocEv"]
            pub fn RenderPassColorAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35RenderPassColorAttachmentDescriptor4initEv"]
            pub fn RenderPassColorAttachmentDescriptor_init(
                this: *mut root::MTL::RenderPassColorAttachmentDescriptor,
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL35RenderPassColorAttachmentDescriptor10clearColorEv"]
            pub fn RenderPassColorAttachmentDescriptor_clearColor(
                this: *const root::MTL::RenderPassColorAttachmentDescriptor,
            ) -> root::MTL::ClearColor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35RenderPassColorAttachmentDescriptor13setClearColorENS_10ClearColorE"]
            pub fn RenderPassColorAttachmentDescriptor_setClearColor(
                this: *mut root::MTL::RenderPassColorAttachmentDescriptor,
                clearColor: root::MTL::ClearColor,
            );
        }
        impl RenderPassColorAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassColorAttachmentDescriptor {
                RenderPassColorAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPassColorAttachmentDescriptor {
                RenderPassColorAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn clearColor(&self) -> root::MTL::ClearColor {
                RenderPassColorAttachmentDescriptor_clearColor(self)
            }
            #[inline]
            pub unsafe fn setClearColor(&mut self, clearColor: root::MTL::ClearColor) {
                RenderPassColorAttachmentDescriptor_setClearColor(self, clearColor)
            }
        }
        pub const MultisampleDepthResolveFilter_MultisampleDepthResolveFilterSample0:
            root::MTL::MultisampleDepthResolveFilter = 0;
        pub const MultisampleDepthResolveFilter_MultisampleDepthResolveFilterMin:
            root::MTL::MultisampleDepthResolveFilter = 1;
        pub const MultisampleDepthResolveFilter_MultisampleDepthResolveFilterMax:
            root::MTL::MultisampleDepthResolveFilter = 2;
        pub type MultisampleDepthResolveFilter = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassDepthAttachmentDescriptor {
            pub _base: root::NS::Copying<root::MTL::RenderPassAttachmentDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35RenderPassDepthAttachmentDescriptor5allocEv"]
            pub fn RenderPassDepthAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::RenderPassDepthAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35RenderPassDepthAttachmentDescriptor4initEv"]
            pub fn RenderPassDepthAttachmentDescriptor_init(
                this: *mut root::MTL::RenderPassDepthAttachmentDescriptor,
            ) -> *mut root::MTL::RenderPassDepthAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL35RenderPassDepthAttachmentDescriptor10clearDepthEv"]
            pub fn RenderPassDepthAttachmentDescriptor_clearDepth(
                this: *const root::MTL::RenderPassDepthAttachmentDescriptor,
            ) -> f64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35RenderPassDepthAttachmentDescriptor13setClearDepthEd"]
            pub fn RenderPassDepthAttachmentDescriptor_setClearDepth(
                this: *mut root::MTL::RenderPassDepthAttachmentDescriptor,
                clearDepth: f64,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL35RenderPassDepthAttachmentDescriptor18depthResolveFilterEv"]
            pub fn RenderPassDepthAttachmentDescriptor_depthResolveFilter(
                this: *const root::MTL::RenderPassDepthAttachmentDescriptor,
            ) -> root::MTL::MultisampleDepthResolveFilter;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL35RenderPassDepthAttachmentDescriptor21setDepthResolveFilterENS_29MultisampleDepthResolveFilterE"]
            pub fn RenderPassDepthAttachmentDescriptor_setDepthResolveFilter(
                this: *mut root::MTL::RenderPassDepthAttachmentDescriptor,
                depthResolveFilter: root::MTL::MultisampleDepthResolveFilter,
            );
        }
        impl RenderPassDepthAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassDepthAttachmentDescriptor {
                RenderPassDepthAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPassDepthAttachmentDescriptor {
                RenderPassDepthAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn clearDepth(&self) -> f64 {
                RenderPassDepthAttachmentDescriptor_clearDepth(self)
            }
            #[inline]
            pub unsafe fn setClearDepth(&mut self, clearDepth: f64) {
                RenderPassDepthAttachmentDescriptor_setClearDepth(self, clearDepth)
            }
            #[inline]
            pub unsafe fn depthResolveFilter(&self) -> root::MTL::MultisampleDepthResolveFilter {
                RenderPassDepthAttachmentDescriptor_depthResolveFilter(self)
            }
            #[inline]
            pub unsafe fn setDepthResolveFilter(
                &mut self,
                depthResolveFilter: root::MTL::MultisampleDepthResolveFilter,
            ) {
                RenderPassDepthAttachmentDescriptor_setDepthResolveFilter(self, depthResolveFilter)
            }
        }
        pub const MultisampleStencilResolveFilter_MultisampleStencilResolveFilterSample0:
            root::MTL::MultisampleStencilResolveFilter = 0;
        pub const MultisampleStencilResolveFilter_MultisampleStencilResolveFilterDepthResolvedSample : root :: MTL :: MultisampleStencilResolveFilter = 1 ;
        pub type MultisampleStencilResolveFilter = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassStencilAttachmentDescriptor {
            pub _base: root::NS::Copying<root::MTL::RenderPassAttachmentDescriptor>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL37RenderPassStencilAttachmentDescriptor5allocEv"]
            pub fn RenderPassStencilAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::RenderPassStencilAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL37RenderPassStencilAttachmentDescriptor4initEv"]
            pub fn RenderPassStencilAttachmentDescriptor_init(
                this: *mut root::MTL::RenderPassStencilAttachmentDescriptor,
            ) -> *mut root::MTL::RenderPassStencilAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL37RenderPassStencilAttachmentDescriptor12clearStencilEv"]
            pub fn RenderPassStencilAttachmentDescriptor_clearStencil(
                this: *const root::MTL::RenderPassStencilAttachmentDescriptor,
            ) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL37RenderPassStencilAttachmentDescriptor15setClearStencilEj"]
            pub fn RenderPassStencilAttachmentDescriptor_setClearStencil(
                this: *mut root::MTL::RenderPassStencilAttachmentDescriptor,
                clearStencil: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL37RenderPassStencilAttachmentDescriptor20stencilResolveFilterEv"]
            pub fn RenderPassStencilAttachmentDescriptor_stencilResolveFilter(
                this: *const root::MTL::RenderPassStencilAttachmentDescriptor,
            ) -> root::MTL::MultisampleStencilResolveFilter;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL37RenderPassStencilAttachmentDescriptor23setStencilResolveFilterENS_31MultisampleStencilResolveFilterE"]
            pub fn RenderPassStencilAttachmentDescriptor_setStencilResolveFilter(
                this: *mut root::MTL::RenderPassStencilAttachmentDescriptor,
                stencilResolveFilter: root::MTL::MultisampleStencilResolveFilter,
            );
        }
        impl RenderPassStencilAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassStencilAttachmentDescriptor {
                RenderPassStencilAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPassStencilAttachmentDescriptor {
                RenderPassStencilAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn clearStencil(&self) -> u32 {
                RenderPassStencilAttachmentDescriptor_clearStencil(self)
            }
            #[inline]
            pub unsafe fn setClearStencil(&mut self, clearStencil: u32) {
                RenderPassStencilAttachmentDescriptor_setClearStencil(self, clearStencil)
            }
            #[inline]
            pub unsafe fn stencilResolveFilter(
                &self,
            ) -> root::MTL::MultisampleStencilResolveFilter {
                RenderPassStencilAttachmentDescriptor_stencilResolveFilter(self)
            }
            #[inline]
            pub unsafe fn setStencilResolveFilter(
                &mut self,
                stencilResolveFilter: root::MTL::MultisampleStencilResolveFilter,
            ) {
                RenderPassStencilAttachmentDescriptor_setStencilResolveFilter(
                    self,
                    stencilResolveFilter,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassColorAttachmentDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40RenderPassColorAttachmentDescriptorArray5allocEv"]
            pub fn RenderPassColorAttachmentDescriptorArray_alloc(
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40RenderPassColorAttachmentDescriptorArray4initEv"]
            pub fn RenderPassColorAttachmentDescriptorArray_init(
                this: *mut root::MTL::RenderPassColorAttachmentDescriptorArray,
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40RenderPassColorAttachmentDescriptorArray6objectEm"]
            pub fn RenderPassColorAttachmentDescriptorArray_object(
                this: *mut root::MTL::RenderPassColorAttachmentDescriptorArray,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40RenderPassColorAttachmentDescriptorArray9setObjectEPKNS_35RenderPassColorAttachmentDescriptorEm"]
            pub fn RenderPassColorAttachmentDescriptorArray_setObject(
                this: *mut root::MTL::RenderPassColorAttachmentDescriptorArray,
                attachment: *const root::MTL::RenderPassColorAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            );
        }
        impl RenderPassColorAttachmentDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassColorAttachmentDescriptorArray {
                RenderPassColorAttachmentDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptorArray {
                RenderPassColorAttachmentDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptor {
                RenderPassColorAttachmentDescriptorArray_object(self, attachmentIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attachment: *const root::MTL::RenderPassColorAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            ) {
                RenderPassColorAttachmentDescriptorArray_setObject(
                    self,
                    attachment,
                    attachmentIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassSampleBufferAttachmentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL42RenderPassSampleBufferAttachmentDescriptor5allocEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL42RenderPassSampleBufferAttachmentDescriptor4initEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_init(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL42RenderPassSampleBufferAttachmentDescriptor12sampleBufferEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_sampleBuffer(
                this: *const root::MTL::RenderPassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::CounterSampleBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL42RenderPassSampleBufferAttachmentDescriptor15setSampleBufferEPKNS_19CounterSampleBufferE"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_setSampleBuffer(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL42RenderPassSampleBufferAttachmentDescriptor24startOfVertexSampleIndexEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_startOfVertexSampleIndex(
                this: *const root::MTL::RenderPassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL42RenderPassSampleBufferAttachmentDescriptor27setStartOfVertexSampleIndexEm"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_setStartOfVertexSampleIndex(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor,
                startOfVertexSampleIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL42RenderPassSampleBufferAttachmentDescriptor22endOfVertexSampleIndexEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_endOfVertexSampleIndex(
                this: *const root::MTL::RenderPassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL42RenderPassSampleBufferAttachmentDescriptor25setEndOfVertexSampleIndexEm"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_setEndOfVertexSampleIndex(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor,
                endOfVertexSampleIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL42RenderPassSampleBufferAttachmentDescriptor26startOfFragmentSampleIndexEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_startOfFragmentSampleIndex(
                this: *const root::MTL::RenderPassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL42RenderPassSampleBufferAttachmentDescriptor29setStartOfFragmentSampleIndexEm"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_setStartOfFragmentSampleIndex(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor,
                startOfFragmentSampleIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL42RenderPassSampleBufferAttachmentDescriptor24endOfFragmentSampleIndexEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_endOfFragmentSampleIndex(
                this: *const root::MTL::RenderPassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL42RenderPassSampleBufferAttachmentDescriptor27setEndOfFragmentSampleIndexEm"]
            pub fn RenderPassSampleBufferAttachmentDescriptor_setEndOfFragmentSampleIndex(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor,
                endOfFragmentSampleIndex: root::NS::UInteger,
            );
        }
        impl RenderPassSampleBufferAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor {
                RenderPassSampleBufferAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor {
                RenderPassSampleBufferAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn sampleBuffer(&self) -> *mut root::MTL::CounterSampleBuffer {
                RenderPassSampleBufferAttachmentDescriptor_sampleBuffer(self)
            }
            #[inline]
            pub unsafe fn setSampleBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            ) {
                RenderPassSampleBufferAttachmentDescriptor_setSampleBuffer(self, sampleBuffer)
            }
            #[inline]
            pub unsafe fn startOfVertexSampleIndex(&self) -> root::NS::UInteger {
                RenderPassSampleBufferAttachmentDescriptor_startOfVertexSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setStartOfVertexSampleIndex(
                &mut self,
                startOfVertexSampleIndex: root::NS::UInteger,
            ) {
                RenderPassSampleBufferAttachmentDescriptor_setStartOfVertexSampleIndex(
                    self,
                    startOfVertexSampleIndex,
                )
            }
            #[inline]
            pub unsafe fn endOfVertexSampleIndex(&self) -> root::NS::UInteger {
                RenderPassSampleBufferAttachmentDescriptor_endOfVertexSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setEndOfVertexSampleIndex(
                &mut self,
                endOfVertexSampleIndex: root::NS::UInteger,
            ) {
                RenderPassSampleBufferAttachmentDescriptor_setEndOfVertexSampleIndex(
                    self,
                    endOfVertexSampleIndex,
                )
            }
            #[inline]
            pub unsafe fn startOfFragmentSampleIndex(&self) -> root::NS::UInteger {
                RenderPassSampleBufferAttachmentDescriptor_startOfFragmentSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setStartOfFragmentSampleIndex(
                &mut self,
                startOfFragmentSampleIndex: root::NS::UInteger,
            ) {
                RenderPassSampleBufferAttachmentDescriptor_setStartOfFragmentSampleIndex(
                    self,
                    startOfFragmentSampleIndex,
                )
            }
            #[inline]
            pub unsafe fn endOfFragmentSampleIndex(&self) -> root::NS::UInteger {
                RenderPassSampleBufferAttachmentDescriptor_endOfFragmentSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setEndOfFragmentSampleIndex(
                &mut self,
                endOfFragmentSampleIndex: root::NS::UInteger,
            ) {
                RenderPassSampleBufferAttachmentDescriptor_setEndOfFragmentSampleIndex(
                    self,
                    endOfFragmentSampleIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassSampleBufferAttachmentDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47RenderPassSampleBufferAttachmentDescriptorArray5allocEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptorArray_alloc(
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47RenderPassSampleBufferAttachmentDescriptorArray4initEv"]
            pub fn RenderPassSampleBufferAttachmentDescriptorArray_init(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47RenderPassSampleBufferAttachmentDescriptorArray6objectEm"]
            pub fn RenderPassSampleBufferAttachmentDescriptorArray_object(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL47RenderPassSampleBufferAttachmentDescriptorArray9setObjectEPKNS_42RenderPassSampleBufferAttachmentDescriptorEm"]
            pub fn RenderPassSampleBufferAttachmentDescriptorArray_setObject(
                this: *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray,
                attachment: *const root::MTL::RenderPassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            );
        }
        impl RenderPassSampleBufferAttachmentDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray
            {
                RenderPassSampleBufferAttachmentDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray {
                RenderPassSampleBufferAttachmentDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptor {
                RenderPassSampleBufferAttachmentDescriptorArray_object(self, attachmentIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attachment: *const root::MTL::RenderPassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            ) {
                RenderPassSampleBufferAttachmentDescriptorArray_setObject(
                    self,
                    attachment,
                    attachmentIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPassDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor5allocEv"]
            pub fn RenderPassDescriptor_alloc() -> *mut root::MTL::RenderPassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor4initEv"]
            pub fn RenderPassDescriptor_init(
                this: *mut root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RenderPassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor20renderPassDescriptorEv"]
            pub fn RenderPassDescriptor_renderPassDescriptor(
            ) -> *mut root::MTL::RenderPassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor16colorAttachmentsEv"]
            pub fn RenderPassDescriptor_colorAttachments(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor15depthAttachmentEv"]
            pub fn RenderPassDescriptor_depthAttachment(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RenderPassDepthAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor18setDepthAttachmentEPKNS_35RenderPassDepthAttachmentDescriptorE"]
            pub fn RenderPassDescriptor_setDepthAttachment(
                this: *mut root::MTL::RenderPassDescriptor,
                depthAttachment: *const root::MTL::RenderPassDepthAttachmentDescriptor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor17stencilAttachmentEv"]
            pub fn RenderPassDescriptor_stencilAttachment(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RenderPassStencilAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor20setStencilAttachmentEPKNS_37RenderPassStencilAttachmentDescriptorE"]
            pub fn RenderPassDescriptor_setStencilAttachment(
                this: *mut root::MTL::RenderPassDescriptor,
                stencilAttachment: *const root::MTL::RenderPassStencilAttachmentDescriptor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor22visibilityResultBufferEv"]
            pub fn RenderPassDescriptor_visibilityResultBuffer(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor25setVisibilityResultBufferEPKNS_6BufferE"]
            pub fn RenderPassDescriptor_setVisibilityResultBuffer(
                this: *mut root::MTL::RenderPassDescriptor,
                visibilityResultBuffer: *const root::MTL::Buffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor23renderTargetArrayLengthEv"]
            pub fn RenderPassDescriptor_renderTargetArrayLength(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor26setRenderTargetArrayLengthEm"]
            pub fn RenderPassDescriptor_setRenderTargetArrayLength(
                this: *mut root::MTL::RenderPassDescriptor,
                renderTargetArrayLength: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor22imageblockSampleLengthEv"]
            pub fn RenderPassDescriptor_imageblockSampleLength(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor25setImageblockSampleLengthEm"]
            pub fn RenderPassDescriptor_setImageblockSampleLength(
                this: *mut root::MTL::RenderPassDescriptor,
                imageblockSampleLength: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor23threadgroupMemoryLengthEv"]
            pub fn RenderPassDescriptor_threadgroupMemoryLength(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor26setThreadgroupMemoryLengthEm"]
            pub fn RenderPassDescriptor_setThreadgroupMemoryLength(
                this: *mut root::MTL::RenderPassDescriptor,
                threadgroupMemoryLength: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor9tileWidthEv"]
            pub fn RenderPassDescriptor_tileWidth(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor12setTileWidthEm"]
            pub fn RenderPassDescriptor_setTileWidth(
                this: *mut root::MTL::RenderPassDescriptor,
                tileWidth: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor10tileHeightEv"]
            pub fn RenderPassDescriptor_tileHeight(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor13setTileHeightEm"]
            pub fn RenderPassDescriptor_setTileHeight(
                this: *mut root::MTL::RenderPassDescriptor,
                tileHeight: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor24defaultRasterSampleCountEv"]
            pub fn RenderPassDescriptor_defaultRasterSampleCount(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor27setDefaultRasterSampleCountEm"]
            pub fn RenderPassDescriptor_setDefaultRasterSampleCount(
                this: *mut root::MTL::RenderPassDescriptor,
                defaultRasterSampleCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor17renderTargetWidthEv"]
            pub fn RenderPassDescriptor_renderTargetWidth(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor20setRenderTargetWidthEm"]
            pub fn RenderPassDescriptor_setRenderTargetWidth(
                this: *mut root::MTL::RenderPassDescriptor,
                renderTargetWidth: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor18renderTargetHeightEv"]
            pub fn RenderPassDescriptor_renderTargetHeight(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor21setRenderTargetHeightEm"]
            pub fn RenderPassDescriptor_setRenderTargetHeight(
                this: *mut root::MTL::RenderPassDescriptor,
                renderTargetHeight: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor18setSamplePositionsEPKNS_14SamplePositionEm"]
            pub fn RenderPassDescriptor_setSamplePositions(
                this: *mut root::MTL::RenderPassDescriptor,
                positions: *const root::MTL::SamplePosition,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor18getSamplePositionsEPNS_14SamplePositionEm"]
            pub fn RenderPassDescriptor_getSamplePositions(
                this: *mut root::MTL::RenderPassDescriptor,
                positions: *mut root::MTL::SamplePosition,
                count: root::NS::UInteger,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor20rasterizationRateMapEv"]
            pub fn RenderPassDescriptor_rasterizationRateMap(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RasterizationRateMap;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderPassDescriptor23setRasterizationRateMapEPKNS_20RasterizationRateMapE"]
            pub fn RenderPassDescriptor_setRasterizationRateMap(
                this: *mut root::MTL::RenderPassDescriptor,
                rasterizationRateMap: *const root::MTL::RasterizationRateMap,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderPassDescriptor23sampleBufferAttachmentsEv"]
            pub fn RenderPassDescriptor_sampleBufferAttachments(
                this: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray;
        }
        impl RenderPassDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPassDescriptor {
                RenderPassDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPassDescriptor {
                RenderPassDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn renderPassDescriptor() -> *mut root::MTL::RenderPassDescriptor {
                RenderPassDescriptor_renderPassDescriptor()
            }
            #[inline]
            pub unsafe fn colorAttachments(
                &self,
            ) -> *mut root::MTL::RenderPassColorAttachmentDescriptorArray {
                RenderPassDescriptor_colorAttachments(self)
            }
            #[inline]
            pub unsafe fn depthAttachment(
                &self,
            ) -> *mut root::MTL::RenderPassDepthAttachmentDescriptor {
                RenderPassDescriptor_depthAttachment(self)
            }
            #[inline]
            pub unsafe fn setDepthAttachment(
                &mut self,
                depthAttachment: *const root::MTL::RenderPassDepthAttachmentDescriptor,
            ) {
                RenderPassDescriptor_setDepthAttachment(self, depthAttachment)
            }
            #[inline]
            pub unsafe fn stencilAttachment(
                &self,
            ) -> *mut root::MTL::RenderPassStencilAttachmentDescriptor {
                RenderPassDescriptor_stencilAttachment(self)
            }
            #[inline]
            pub unsafe fn setStencilAttachment(
                &mut self,
                stencilAttachment: *const root::MTL::RenderPassStencilAttachmentDescriptor,
            ) {
                RenderPassDescriptor_setStencilAttachment(self, stencilAttachment)
            }
            #[inline]
            pub unsafe fn visibilityResultBuffer(&self) -> *mut root::MTL::Buffer {
                RenderPassDescriptor_visibilityResultBuffer(self)
            }
            #[inline]
            pub unsafe fn setVisibilityResultBuffer(
                &mut self,
                visibilityResultBuffer: *const root::MTL::Buffer,
            ) {
                RenderPassDescriptor_setVisibilityResultBuffer(self, visibilityResultBuffer)
            }
            #[inline]
            pub unsafe fn renderTargetArrayLength(&self) -> root::NS::UInteger {
                RenderPassDescriptor_renderTargetArrayLength(self)
            }
            #[inline]
            pub unsafe fn setRenderTargetArrayLength(
                &mut self,
                renderTargetArrayLength: root::NS::UInteger,
            ) {
                RenderPassDescriptor_setRenderTargetArrayLength(self, renderTargetArrayLength)
            }
            #[inline]
            pub unsafe fn imageblockSampleLength(&self) -> root::NS::UInteger {
                RenderPassDescriptor_imageblockSampleLength(self)
            }
            #[inline]
            pub unsafe fn setImageblockSampleLength(
                &mut self,
                imageblockSampleLength: root::NS::UInteger,
            ) {
                RenderPassDescriptor_setImageblockSampleLength(self, imageblockSampleLength)
            }
            #[inline]
            pub unsafe fn threadgroupMemoryLength(&self) -> root::NS::UInteger {
                RenderPassDescriptor_threadgroupMemoryLength(self)
            }
            #[inline]
            pub unsafe fn setThreadgroupMemoryLength(
                &mut self,
                threadgroupMemoryLength: root::NS::UInteger,
            ) {
                RenderPassDescriptor_setThreadgroupMemoryLength(self, threadgroupMemoryLength)
            }
            #[inline]
            pub unsafe fn tileWidth(&self) -> root::NS::UInteger {
                RenderPassDescriptor_tileWidth(self)
            }
            #[inline]
            pub unsafe fn setTileWidth(&mut self, tileWidth: root::NS::UInteger) {
                RenderPassDescriptor_setTileWidth(self, tileWidth)
            }
            #[inline]
            pub unsafe fn tileHeight(&self) -> root::NS::UInteger {
                RenderPassDescriptor_tileHeight(self)
            }
            #[inline]
            pub unsafe fn setTileHeight(&mut self, tileHeight: root::NS::UInteger) {
                RenderPassDescriptor_setTileHeight(self, tileHeight)
            }
            #[inline]
            pub unsafe fn defaultRasterSampleCount(&self) -> root::NS::UInteger {
                RenderPassDescriptor_defaultRasterSampleCount(self)
            }
            #[inline]
            pub unsafe fn setDefaultRasterSampleCount(
                &mut self,
                defaultRasterSampleCount: root::NS::UInteger,
            ) {
                RenderPassDescriptor_setDefaultRasterSampleCount(self, defaultRasterSampleCount)
            }
            #[inline]
            pub unsafe fn renderTargetWidth(&self) -> root::NS::UInteger {
                RenderPassDescriptor_renderTargetWidth(self)
            }
            #[inline]
            pub unsafe fn setRenderTargetWidth(&mut self, renderTargetWidth: root::NS::UInteger) {
                RenderPassDescriptor_setRenderTargetWidth(self, renderTargetWidth)
            }
            #[inline]
            pub unsafe fn renderTargetHeight(&self) -> root::NS::UInteger {
                RenderPassDescriptor_renderTargetHeight(self)
            }
            #[inline]
            pub unsafe fn setRenderTargetHeight(&mut self, renderTargetHeight: root::NS::UInteger) {
                RenderPassDescriptor_setRenderTargetHeight(self, renderTargetHeight)
            }
            #[inline]
            pub unsafe fn setSamplePositions(
                &mut self,
                positions: *const root::MTL::SamplePosition,
                count: root::NS::UInteger,
            ) {
                RenderPassDescriptor_setSamplePositions(self, positions, count)
            }
            #[inline]
            pub unsafe fn getSamplePositions(
                &mut self,
                positions: *mut root::MTL::SamplePosition,
                count: root::NS::UInteger,
            ) -> root::NS::UInteger {
                RenderPassDescriptor_getSamplePositions(self, positions, count)
            }
            #[inline]
            pub unsafe fn rasterizationRateMap(&self) -> *mut root::MTL::RasterizationRateMap {
                RenderPassDescriptor_rasterizationRateMap(self)
            }
            #[inline]
            pub unsafe fn setRasterizationRateMap(
                &mut self,
                rasterizationRateMap: *const root::MTL::RasterizationRateMap,
            ) {
                RenderPassDescriptor_setRasterizationRateMap(self, rasterizationRateMap)
            }
            #[inline]
            pub unsafe fn sampleBufferAttachments(
                &self,
            ) -> *mut root::MTL::RenderPassSampleBufferAttachmentDescriptorArray {
                RenderPassDescriptor_sampleBufferAttachments(self)
            }
        }
        pub const CompareFunction_CompareFunctionNever: root::MTL::CompareFunction = 0;
        pub const CompareFunction_CompareFunctionLess: root::MTL::CompareFunction = 1;
        pub const CompareFunction_CompareFunctionEqual: root::MTL::CompareFunction = 2;
        pub const CompareFunction_CompareFunctionLessEqual: root::MTL::CompareFunction = 3;
        pub const CompareFunction_CompareFunctionGreater: root::MTL::CompareFunction = 4;
        pub const CompareFunction_CompareFunctionNotEqual: root::MTL::CompareFunction = 5;
        pub const CompareFunction_CompareFunctionGreaterEqual: root::MTL::CompareFunction = 6;
        pub const CompareFunction_CompareFunctionAlways: root::MTL::CompareFunction = 7;
        pub type CompareFunction = root::NS::UInteger;
        pub const StencilOperation_StencilOperationKeep: root::MTL::StencilOperation = 0;
        pub const StencilOperation_StencilOperationZero: root::MTL::StencilOperation = 1;
        pub const StencilOperation_StencilOperationReplace: root::MTL::StencilOperation = 2;
        pub const StencilOperation_StencilOperationIncrementClamp: root::MTL::StencilOperation = 3;
        pub const StencilOperation_StencilOperationDecrementClamp: root::MTL::StencilOperation = 4;
        pub const StencilOperation_StencilOperationInvert: root::MTL::StencilOperation = 5;
        pub const StencilOperation_StencilOperationIncrementWrap: root::MTL::StencilOperation = 6;
        pub const StencilOperation_StencilOperationDecrementWrap: root::MTL::StencilOperation = 7;
        pub type StencilOperation = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct StencilDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor5allocEv"]
            pub fn StencilDescriptor_alloc() -> *mut root::MTL::StencilDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor4initEv"]
            pub fn StencilDescriptor_init(
                this: *mut root::MTL::StencilDescriptor,
            ) -> *mut root::MTL::StencilDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17StencilDescriptor22stencilCompareFunctionEv"]
            pub fn StencilDescriptor_stencilCompareFunction(
                this: *const root::MTL::StencilDescriptor,
            ) -> root::MTL::CompareFunction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor25setStencilCompareFunctionENS_15CompareFunctionE"]
            pub fn StencilDescriptor_setStencilCompareFunction(
                this: *mut root::MTL::StencilDescriptor,
                stencilCompareFunction: root::MTL::CompareFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17StencilDescriptor23stencilFailureOperationEv"]
            pub fn StencilDescriptor_stencilFailureOperation(
                this: *const root::MTL::StencilDescriptor,
            ) -> root::MTL::StencilOperation;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor26setStencilFailureOperationENS_16StencilOperationE"]
            pub fn StencilDescriptor_setStencilFailureOperation(
                this: *mut root::MTL::StencilDescriptor,
                stencilFailureOperation: root::MTL::StencilOperation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17StencilDescriptor21depthFailureOperationEv"]
            pub fn StencilDescriptor_depthFailureOperation(
                this: *const root::MTL::StencilDescriptor,
            ) -> root::MTL::StencilOperation;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor24setDepthFailureOperationENS_16StencilOperationE"]
            pub fn StencilDescriptor_setDepthFailureOperation(
                this: *mut root::MTL::StencilDescriptor,
                depthFailureOperation: root::MTL::StencilOperation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17StencilDescriptor25depthStencilPassOperationEv"]
            pub fn StencilDescriptor_depthStencilPassOperation(
                this: *const root::MTL::StencilDescriptor,
            ) -> root::MTL::StencilOperation;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor28setDepthStencilPassOperationENS_16StencilOperationE"]
            pub fn StencilDescriptor_setDepthStencilPassOperation(
                this: *mut root::MTL::StencilDescriptor,
                depthStencilPassOperation: root::MTL::StencilOperation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17StencilDescriptor8readMaskEv"]
            pub fn StencilDescriptor_readMask(this: *const root::MTL::StencilDescriptor) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor11setReadMaskEj"]
            pub fn StencilDescriptor_setReadMask(
                this: *mut root::MTL::StencilDescriptor,
                readMask: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17StencilDescriptor9writeMaskEv"]
            pub fn StencilDescriptor_writeMask(this: *const root::MTL::StencilDescriptor) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17StencilDescriptor12setWriteMaskEj"]
            pub fn StencilDescriptor_setWriteMask(
                this: *mut root::MTL::StencilDescriptor,
                writeMask: u32,
            );
        }
        impl StencilDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::StencilDescriptor {
                StencilDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::StencilDescriptor {
                StencilDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn stencilCompareFunction(&self) -> root::MTL::CompareFunction {
                StencilDescriptor_stencilCompareFunction(self)
            }
            #[inline]
            pub unsafe fn setStencilCompareFunction(
                &mut self,
                stencilCompareFunction: root::MTL::CompareFunction,
            ) {
                StencilDescriptor_setStencilCompareFunction(self, stencilCompareFunction)
            }
            #[inline]
            pub unsafe fn stencilFailureOperation(&self) -> root::MTL::StencilOperation {
                StencilDescriptor_stencilFailureOperation(self)
            }
            #[inline]
            pub unsafe fn setStencilFailureOperation(
                &mut self,
                stencilFailureOperation: root::MTL::StencilOperation,
            ) {
                StencilDescriptor_setStencilFailureOperation(self, stencilFailureOperation)
            }
            #[inline]
            pub unsafe fn depthFailureOperation(&self) -> root::MTL::StencilOperation {
                StencilDescriptor_depthFailureOperation(self)
            }
            #[inline]
            pub unsafe fn setDepthFailureOperation(
                &mut self,
                depthFailureOperation: root::MTL::StencilOperation,
            ) {
                StencilDescriptor_setDepthFailureOperation(self, depthFailureOperation)
            }
            #[inline]
            pub unsafe fn depthStencilPassOperation(&self) -> root::MTL::StencilOperation {
                StencilDescriptor_depthStencilPassOperation(self)
            }
            #[inline]
            pub unsafe fn setDepthStencilPassOperation(
                &mut self,
                depthStencilPassOperation: root::MTL::StencilOperation,
            ) {
                StencilDescriptor_setDepthStencilPassOperation(self, depthStencilPassOperation)
            }
            #[inline]
            pub unsafe fn readMask(&self) -> u32 {
                StencilDescriptor_readMask(self)
            }
            #[inline]
            pub unsafe fn setReadMask(&mut self, readMask: u32) {
                StencilDescriptor_setReadMask(self, readMask)
            }
            #[inline]
            pub unsafe fn writeMask(&self) -> u32 {
                StencilDescriptor_writeMask(self)
            }
            #[inline]
            pub unsafe fn setWriteMask(&mut self, writeMask: u32) {
                StencilDescriptor_setWriteMask(self, writeMask)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct DepthStencilDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22DepthStencilDescriptor5allocEv"]
            pub fn DepthStencilDescriptor_alloc() -> *mut root::MTL::DepthStencilDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22DepthStencilDescriptor4initEv"]
            pub fn DepthStencilDescriptor_init(
                this: *mut root::MTL::DepthStencilDescriptor,
            ) -> *mut root::MTL::DepthStencilDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22DepthStencilDescriptor20depthCompareFunctionEv"]
            pub fn DepthStencilDescriptor_depthCompareFunction(
                this: *const root::MTL::DepthStencilDescriptor,
            ) -> root::MTL::CompareFunction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22DepthStencilDescriptor23setDepthCompareFunctionENS_15CompareFunctionE"]
            pub fn DepthStencilDescriptor_setDepthCompareFunction(
                this: *mut root::MTL::DepthStencilDescriptor,
                depthCompareFunction: root::MTL::CompareFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22DepthStencilDescriptor17depthWriteEnabledEv"]
            pub fn DepthStencilDescriptor_depthWriteEnabled(
                this: *const root::MTL::DepthStencilDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22DepthStencilDescriptor20setDepthWriteEnabledEb"]
            pub fn DepthStencilDescriptor_setDepthWriteEnabled(
                this: *mut root::MTL::DepthStencilDescriptor,
                depthWriteEnabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22DepthStencilDescriptor16frontFaceStencilEv"]
            pub fn DepthStencilDescriptor_frontFaceStencil(
                this: *const root::MTL::DepthStencilDescriptor,
            ) -> *mut root::MTL::StencilDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22DepthStencilDescriptor19setFrontFaceStencilEPKNS_17StencilDescriptorE"]
            pub fn DepthStencilDescriptor_setFrontFaceStencil(
                this: *mut root::MTL::DepthStencilDescriptor,
                frontFaceStencil: *const root::MTL::StencilDescriptor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22DepthStencilDescriptor15backFaceStencilEv"]
            pub fn DepthStencilDescriptor_backFaceStencil(
                this: *const root::MTL::DepthStencilDescriptor,
            ) -> *mut root::MTL::StencilDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22DepthStencilDescriptor18setBackFaceStencilEPKNS_17StencilDescriptorE"]
            pub fn DepthStencilDescriptor_setBackFaceStencil(
                this: *mut root::MTL::DepthStencilDescriptor,
                backFaceStencil: *const root::MTL::StencilDescriptor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22DepthStencilDescriptor5labelEv"]
            pub fn DepthStencilDescriptor_label(
                this: *const root::MTL::DepthStencilDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22DepthStencilDescriptor8setLabelEPKN2NS6StringE"]
            pub fn DepthStencilDescriptor_setLabel(
                this: *mut root::MTL::DepthStencilDescriptor,
                label: *const root::NS::String,
            );
        }
        impl DepthStencilDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::DepthStencilDescriptor {
                DepthStencilDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::DepthStencilDescriptor {
                DepthStencilDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn depthCompareFunction(&self) -> root::MTL::CompareFunction {
                DepthStencilDescriptor_depthCompareFunction(self)
            }
            #[inline]
            pub unsafe fn setDepthCompareFunction(
                &mut self,
                depthCompareFunction: root::MTL::CompareFunction,
            ) {
                DepthStencilDescriptor_setDepthCompareFunction(self, depthCompareFunction)
            }
            #[inline]
            pub unsafe fn depthWriteEnabled(&self) -> bool {
                DepthStencilDescriptor_depthWriteEnabled(self)
            }
            #[inline]
            pub unsafe fn setDepthWriteEnabled(&mut self, depthWriteEnabled: bool) {
                DepthStencilDescriptor_setDepthWriteEnabled(self, depthWriteEnabled)
            }
            #[inline]
            pub unsafe fn frontFaceStencil(&self) -> *mut root::MTL::StencilDescriptor {
                DepthStencilDescriptor_frontFaceStencil(self)
            }
            #[inline]
            pub unsafe fn setFrontFaceStencil(
                &mut self,
                frontFaceStencil: *const root::MTL::StencilDescriptor,
            ) {
                DepthStencilDescriptor_setFrontFaceStencil(self, frontFaceStencil)
            }
            #[inline]
            pub unsafe fn backFaceStencil(&self) -> *mut root::MTL::StencilDescriptor {
                DepthStencilDescriptor_backFaceStencil(self)
            }
            #[inline]
            pub unsafe fn setBackFaceStencil(
                &mut self,
                backFaceStencil: *const root::MTL::StencilDescriptor,
            ) {
                DepthStencilDescriptor_setBackFaceStencil(self, backFaceStencil)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                DepthStencilDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                DepthStencilDescriptor_setLabel(self, label)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct DepthStencilState {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17DepthStencilState5labelEv"]
            pub fn DepthStencilState_label(
                this: *const root::MTL::DepthStencilState,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17DepthStencilState6deviceEv"]
            pub fn DepthStencilState_device(
                this: *const root::MTL::DepthStencilState,
            ) -> *mut root::MTL::Device;
        }
        impl DepthStencilState {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                DepthStencilState_label(self)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                DepthStencilState_device(self)
            }
        }
        pub const SamplerMinMagFilter_SamplerMinMagFilterNearest: root::MTL::SamplerMinMagFilter =
            0;
        pub const SamplerMinMagFilter_SamplerMinMagFilterLinear: root::MTL::SamplerMinMagFilter = 1;
        pub type SamplerMinMagFilter = root::NS::UInteger;
        pub const SamplerMipFilter_SamplerMipFilterNotMipmapped: root::MTL::SamplerMipFilter = 0;
        pub const SamplerMipFilter_SamplerMipFilterNearest: root::MTL::SamplerMipFilter = 1;
        pub const SamplerMipFilter_SamplerMipFilterLinear: root::MTL::SamplerMipFilter = 2;
        pub type SamplerMipFilter = root::NS::UInteger;
        pub const SamplerAddressMode_SamplerAddressModeClampToEdge: root::MTL::SamplerAddressMode =
            0;
        pub const SamplerAddressMode_SamplerAddressModeMirrorClampToEdge:
            root::MTL::SamplerAddressMode = 1;
        pub const SamplerAddressMode_SamplerAddressModeRepeat: root::MTL::SamplerAddressMode = 2;
        pub const SamplerAddressMode_SamplerAddressModeMirrorRepeat: root::MTL::SamplerAddressMode =
            3;
        pub const SamplerAddressMode_SamplerAddressModeClampToZero: root::MTL::SamplerAddressMode =
            4;
        pub const SamplerAddressMode_SamplerAddressModeClampToBorderColor:
            root::MTL::SamplerAddressMode = 5;
        pub type SamplerAddressMode = root::NS::UInteger;
        pub const SamplerBorderColor_SamplerBorderColorTransparentBlack:
            root::MTL::SamplerBorderColor = 0;
        pub const SamplerBorderColor_SamplerBorderColorOpaqueBlack: root::MTL::SamplerBorderColor =
            1;
        pub const SamplerBorderColor_SamplerBorderColorOpaqueWhite: root::MTL::SamplerBorderColor =
            2;
        pub type SamplerBorderColor = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct SamplerDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor5allocEv"]
            pub fn SamplerDescriptor_alloc() -> *mut root::MTL::SamplerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor4initEv"]
            pub fn SamplerDescriptor_init(
                this: *mut root::MTL::SamplerDescriptor,
            ) -> *mut root::MTL::SamplerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor9minFilterEv"]
            pub fn SamplerDescriptor_minFilter(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::SamplerMinMagFilter;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor12setMinFilterENS_19SamplerMinMagFilterE"]
            pub fn SamplerDescriptor_setMinFilter(
                this: *mut root::MTL::SamplerDescriptor,
                minFilter: root::MTL::SamplerMinMagFilter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor9magFilterEv"]
            pub fn SamplerDescriptor_magFilter(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::SamplerMinMagFilter;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor12setMagFilterENS_19SamplerMinMagFilterE"]
            pub fn SamplerDescriptor_setMagFilter(
                this: *mut root::MTL::SamplerDescriptor,
                magFilter: root::MTL::SamplerMinMagFilter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor9mipFilterEv"]
            pub fn SamplerDescriptor_mipFilter(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::SamplerMipFilter;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor12setMipFilterENS_16SamplerMipFilterE"]
            pub fn SamplerDescriptor_setMipFilter(
                this: *mut root::MTL::SamplerDescriptor,
                mipFilter: root::MTL::SamplerMipFilter,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor13maxAnisotropyEv"]
            pub fn SamplerDescriptor_maxAnisotropy(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor16setMaxAnisotropyEm"]
            pub fn SamplerDescriptor_setMaxAnisotropy(
                this: *mut root::MTL::SamplerDescriptor,
                maxAnisotropy: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor12sAddressModeEv"]
            pub fn SamplerDescriptor_sAddressMode(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::SamplerAddressMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor15setSAddressModeENS_18SamplerAddressModeE"]
            pub fn SamplerDescriptor_setSAddressMode(
                this: *mut root::MTL::SamplerDescriptor,
                sAddressMode: root::MTL::SamplerAddressMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor12tAddressModeEv"]
            pub fn SamplerDescriptor_tAddressMode(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::SamplerAddressMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor15setTAddressModeENS_18SamplerAddressModeE"]
            pub fn SamplerDescriptor_setTAddressMode(
                this: *mut root::MTL::SamplerDescriptor,
                tAddressMode: root::MTL::SamplerAddressMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor12rAddressModeEv"]
            pub fn SamplerDescriptor_rAddressMode(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::SamplerAddressMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor15setRAddressModeENS_18SamplerAddressModeE"]
            pub fn SamplerDescriptor_setRAddressMode(
                this: *mut root::MTL::SamplerDescriptor,
                rAddressMode: root::MTL::SamplerAddressMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor11borderColorEv"]
            pub fn SamplerDescriptor_borderColor(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::SamplerBorderColor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor14setBorderColorENS_18SamplerBorderColorE"]
            pub fn SamplerDescriptor_setBorderColor(
                this: *mut root::MTL::SamplerDescriptor,
                borderColor: root::MTL::SamplerBorderColor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor21normalizedCoordinatesEv"]
            pub fn SamplerDescriptor_normalizedCoordinates(
                this: *const root::MTL::SamplerDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor24setNormalizedCoordinatesEb"]
            pub fn SamplerDescriptor_setNormalizedCoordinates(
                this: *mut root::MTL::SamplerDescriptor,
                normalizedCoordinates: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor11lodMinClampEv"]
            pub fn SamplerDescriptor_lodMinClamp(this: *const root::MTL::SamplerDescriptor) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor14setLodMinClampEf"]
            pub fn SamplerDescriptor_setLodMinClamp(
                this: *mut root::MTL::SamplerDescriptor,
                lodMinClamp: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor11lodMaxClampEv"]
            pub fn SamplerDescriptor_lodMaxClamp(this: *const root::MTL::SamplerDescriptor) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor14setLodMaxClampEf"]
            pub fn SamplerDescriptor_setLodMaxClamp(
                this: *mut root::MTL::SamplerDescriptor,
                lodMaxClamp: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor10lodAverageEv"]
            pub fn SamplerDescriptor_lodAverage(this: *const root::MTL::SamplerDescriptor) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor13setLodAverageEb"]
            pub fn SamplerDescriptor_setLodAverage(
                this: *mut root::MTL::SamplerDescriptor,
                lodAverage: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor15compareFunctionEv"]
            pub fn SamplerDescriptor_compareFunction(
                this: *const root::MTL::SamplerDescriptor,
            ) -> root::MTL::CompareFunction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor18setCompareFunctionENS_15CompareFunctionE"]
            pub fn SamplerDescriptor_setCompareFunction(
                this: *mut root::MTL::SamplerDescriptor,
                compareFunction: root::MTL::CompareFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor22supportArgumentBuffersEv"]
            pub fn SamplerDescriptor_supportArgumentBuffers(
                this: *const root::MTL::SamplerDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor25setSupportArgumentBuffersEb"]
            pub fn SamplerDescriptor_setSupportArgumentBuffers(
                this: *mut root::MTL::SamplerDescriptor,
                supportArgumentBuffers: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SamplerDescriptor5labelEv"]
            pub fn SamplerDescriptor_label(
                this: *const root::MTL::SamplerDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SamplerDescriptor8setLabelEPKN2NS6StringE"]
            pub fn SamplerDescriptor_setLabel(
                this: *mut root::MTL::SamplerDescriptor,
                label: *const root::NS::String,
            );
        }
        impl SamplerDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::SamplerDescriptor {
                SamplerDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::SamplerDescriptor {
                SamplerDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn minFilter(&self) -> root::MTL::SamplerMinMagFilter {
                SamplerDescriptor_minFilter(self)
            }
            #[inline]
            pub unsafe fn setMinFilter(&mut self, minFilter: root::MTL::SamplerMinMagFilter) {
                SamplerDescriptor_setMinFilter(self, minFilter)
            }
            #[inline]
            pub unsafe fn magFilter(&self) -> root::MTL::SamplerMinMagFilter {
                SamplerDescriptor_magFilter(self)
            }
            #[inline]
            pub unsafe fn setMagFilter(&mut self, magFilter: root::MTL::SamplerMinMagFilter) {
                SamplerDescriptor_setMagFilter(self, magFilter)
            }
            #[inline]
            pub unsafe fn mipFilter(&self) -> root::MTL::SamplerMipFilter {
                SamplerDescriptor_mipFilter(self)
            }
            #[inline]
            pub unsafe fn setMipFilter(&mut self, mipFilter: root::MTL::SamplerMipFilter) {
                SamplerDescriptor_setMipFilter(self, mipFilter)
            }
            #[inline]
            pub unsafe fn maxAnisotropy(&self) -> root::NS::UInteger {
                SamplerDescriptor_maxAnisotropy(self)
            }
            #[inline]
            pub unsafe fn setMaxAnisotropy(&mut self, maxAnisotropy: root::NS::UInteger) {
                SamplerDescriptor_setMaxAnisotropy(self, maxAnisotropy)
            }
            #[inline]
            pub unsafe fn sAddressMode(&self) -> root::MTL::SamplerAddressMode {
                SamplerDescriptor_sAddressMode(self)
            }
            #[inline]
            pub unsafe fn setSAddressMode(&mut self, sAddressMode: root::MTL::SamplerAddressMode) {
                SamplerDescriptor_setSAddressMode(self, sAddressMode)
            }
            #[inline]
            pub unsafe fn tAddressMode(&self) -> root::MTL::SamplerAddressMode {
                SamplerDescriptor_tAddressMode(self)
            }
            #[inline]
            pub unsafe fn setTAddressMode(&mut self, tAddressMode: root::MTL::SamplerAddressMode) {
                SamplerDescriptor_setTAddressMode(self, tAddressMode)
            }
            #[inline]
            pub unsafe fn rAddressMode(&self) -> root::MTL::SamplerAddressMode {
                SamplerDescriptor_rAddressMode(self)
            }
            #[inline]
            pub unsafe fn setRAddressMode(&mut self, rAddressMode: root::MTL::SamplerAddressMode) {
                SamplerDescriptor_setRAddressMode(self, rAddressMode)
            }
            #[inline]
            pub unsafe fn borderColor(&self) -> root::MTL::SamplerBorderColor {
                SamplerDescriptor_borderColor(self)
            }
            #[inline]
            pub unsafe fn setBorderColor(&mut self, borderColor: root::MTL::SamplerBorderColor) {
                SamplerDescriptor_setBorderColor(self, borderColor)
            }
            #[inline]
            pub unsafe fn normalizedCoordinates(&self) -> bool {
                SamplerDescriptor_normalizedCoordinates(self)
            }
            #[inline]
            pub unsafe fn setNormalizedCoordinates(&mut self, normalizedCoordinates: bool) {
                SamplerDescriptor_setNormalizedCoordinates(self, normalizedCoordinates)
            }
            #[inline]
            pub unsafe fn lodMinClamp(&self) -> f32 {
                SamplerDescriptor_lodMinClamp(self)
            }
            #[inline]
            pub unsafe fn setLodMinClamp(&mut self, lodMinClamp: f32) {
                SamplerDescriptor_setLodMinClamp(self, lodMinClamp)
            }
            #[inline]
            pub unsafe fn lodMaxClamp(&self) -> f32 {
                SamplerDescriptor_lodMaxClamp(self)
            }
            #[inline]
            pub unsafe fn setLodMaxClamp(&mut self, lodMaxClamp: f32) {
                SamplerDescriptor_setLodMaxClamp(self, lodMaxClamp)
            }
            #[inline]
            pub unsafe fn lodAverage(&self) -> bool {
                SamplerDescriptor_lodAverage(self)
            }
            #[inline]
            pub unsafe fn setLodAverage(&mut self, lodAverage: bool) {
                SamplerDescriptor_setLodAverage(self, lodAverage)
            }
            #[inline]
            pub unsafe fn compareFunction(&self) -> root::MTL::CompareFunction {
                SamplerDescriptor_compareFunction(self)
            }
            #[inline]
            pub unsafe fn setCompareFunction(
                &mut self,
                compareFunction: root::MTL::CompareFunction,
            ) {
                SamplerDescriptor_setCompareFunction(self, compareFunction)
            }
            #[inline]
            pub unsafe fn supportArgumentBuffers(&self) -> bool {
                SamplerDescriptor_supportArgumentBuffers(self)
            }
            #[inline]
            pub unsafe fn setSupportArgumentBuffers(&mut self, supportArgumentBuffers: bool) {
                SamplerDescriptor_setSupportArgumentBuffers(self, supportArgumentBuffers)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                SamplerDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                SamplerDescriptor_setLabel(self, label)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct SamplerState {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12SamplerState5labelEv"]
            pub fn SamplerState_label(
                this: *const root::MTL::SamplerState,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12SamplerState6deviceEv"]
            pub fn SamplerState_device(
                this: *const root::MTL::SamplerState,
            ) -> *mut root::MTL::Device;
        }
        impl SamplerState {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                SamplerState_label(self)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                SamplerState_device(self)
            }
        }
        pub const PrimitiveType_PrimitiveTypePoint: root::MTL::PrimitiveType = 0;
        pub const PrimitiveType_PrimitiveTypeLine: root::MTL::PrimitiveType = 1;
        pub const PrimitiveType_PrimitiveTypeLineStrip: root::MTL::PrimitiveType = 2;
        pub const PrimitiveType_PrimitiveTypeTriangle: root::MTL::PrimitiveType = 3;
        pub const PrimitiveType_PrimitiveTypeTriangleStrip: root::MTL::PrimitiveType = 4;
        pub type PrimitiveType = root::NS::UInteger;
        pub const VisibilityResultMode_VisibilityResultModeDisabled:
            root::MTL::VisibilityResultMode = 0;
        pub const VisibilityResultMode_VisibilityResultModeBoolean:
            root::MTL::VisibilityResultMode = 1;
        pub const VisibilityResultMode_VisibilityResultModeCounting:
            root::MTL::VisibilityResultMode = 2;
        pub type VisibilityResultMode = root::NS::UInteger;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct ScissorRect {
            pub x: root::NS::UInteger,
            pub y: root::NS::UInteger,
            pub width: root::NS::UInteger,
            pub height: root::NS::UInteger,
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct Viewport {
            pub originX: f64,
            pub originY: f64,
            pub width: f64,
            pub height: f64,
            pub znear: f64,
            pub zfar: f64,
        }
        pub const CullMode_CullModeNone: root::MTL::CullMode = 0;
        pub const CullMode_CullModeFront: root::MTL::CullMode = 1;
        pub const CullMode_CullModeBack: root::MTL::CullMode = 2;
        pub type CullMode = root::NS::UInteger;
        pub const Winding_WindingClockwise: root::MTL::Winding = 0;
        pub const Winding_WindingCounterClockwise: root::MTL::Winding = 1;
        pub type Winding = root::NS::UInteger;
        pub const DepthClipMode_DepthClipModeClip: root::MTL::DepthClipMode = 0;
        pub const DepthClipMode_DepthClipModeClamp: root::MTL::DepthClipMode = 1;
        pub type DepthClipMode = root::NS::UInteger;
        pub const TriangleFillMode_TriangleFillModeFill: root::MTL::TriangleFillMode = 0;
        pub const TriangleFillMode_TriangleFillModeLines: root::MTL::TriangleFillMode = 1;
        pub type TriangleFillMode = root::NS::UInteger;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct DrawPrimitivesIndirectArguments {
            pub vertexCount: u32,
            pub instanceCount: u32,
            pub vertexStart: u32,
            pub baseInstance: u32,
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct DrawIndexedPrimitivesIndirectArguments {
            pub indexCount: u32,
            pub instanceCount: u32,
            pub indexStart: u32,
            pub baseVertex: i32,
            pub baseInstance: u32,
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct VertexAmplificationViewMapping {
            pub viewportArrayIndexOffset: u32,
            pub renderTargetArrayIndexOffset: u32,
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct DrawPatchIndirectArguments {
            pub patchCount: u32,
            pub instanceCount: u32,
            pub patchStart: u32,
            pub baseInstance: u32,
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct QuadTessellationFactorsHalf {
            pub edgeTessellationFactor: [u16; 4usize],
            pub insideTessellationFactor: [u16; 2usize],
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct TriangleTessellationFactorsHalf {
            pub edgeTessellationFactor: [u16; 3usize],
            pub insideTessellationFactor: u16,
        }
        pub type RenderStages = root::NS::UInteger;
        pub const MTL_RenderStageVertex: root::MTL::RenderStages = 1;
        pub const MTL_RenderStageFragment: root::MTL::RenderStages = 2;
        pub const MTL_RenderStageTile: root::MTL::RenderStages = 4;
        pub type _bindgen_ty_11 = root::MTL::RenderStages;
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderCommandEncoder {
            pub _base: root::NS::Referencing<root::MTL::CommandEncoder>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder22setRenderPipelineStateEPKNS_19RenderPipelineStateE"]
            pub fn RenderCommandEncoder_setRenderPipelineState(
                this: *mut root::MTL::RenderCommandEncoder,
                pipelineState: *const root::MTL::RenderPipelineState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14setVertexBytesEPKvmm"]
            pub fn RenderCommandEncoder_setVertexBytes(
                this: *mut root::MTL::RenderCommandEncoder,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder15setVertexBufferEPKNS_6BufferEmm"]
            pub fn RenderCommandEncoder_setVertexBuffer(
                this: *mut root::MTL::RenderCommandEncoder,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21setVertexBufferOffsetEmm"]
            pub fn RenderCommandEncoder_setVertexBufferOffset(
                this: *mut root::MTL::RenderCommandEncoder,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder16setVertexBuffersEPPNS_6BufferEPKmN2NS5RangeE"]
            pub fn RenderCommandEncoder_setVertexBuffers(
                this: *mut root::MTL::RenderCommandEncoder,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder16setVertexTextureEPKNS_7TextureEm"]
            pub fn RenderCommandEncoder_setVertexTexture(
                this: *mut root::MTL::RenderCommandEncoder,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder17setVertexTexturesEPPNS_7TextureEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setVertexTextures(
                this: *mut root::MTL::RenderCommandEncoder,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21setVertexSamplerStateEPKNS_12SamplerStateEm"]
            pub fn RenderCommandEncoder_setVertexSamplerState(
                this: *mut root::MTL::RenderCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder22setVertexSamplerStatesEPPNS_12SamplerStateEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setVertexSamplerStates(
                this: *mut root::MTL::RenderCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21setVertexSamplerStateEPKNS_12SamplerStateEffm"]
            pub fn RenderCommandEncoder_setVertexSamplerState1(
                this: *mut root::MTL::RenderCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder22setVertexSamplerStatesEPPNS_12SamplerStateEPKfS5_N2NS5RangeE"]
            pub fn RenderCommandEncoder_setVertexSamplerStates1(
                this: *mut root::MTL::RenderCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder29setVertexVisibleFunctionTableEPKNS_20VisibleFunctionTableEm"]
            pub fn RenderCommandEncoder_setVertexVisibleFunctionTable(
                this: *mut root::MTL::RenderCommandEncoder,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder30setVertexVisibleFunctionTablesEPPKNS_20VisibleFunctionTableEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setVertexVisibleFunctionTables(
                this: *mut root::MTL::RenderCommandEncoder,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder34setVertexIntersectionFunctionTableEPKNS_25IntersectionFunctionTableEm"]
            pub fn RenderCommandEncoder_setVertexIntersectionFunctionTable(
                this: *mut root::MTL::RenderCommandEncoder,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder35setVertexIntersectionFunctionTablesEPPKNS_25IntersectionFunctionTableEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setVertexIntersectionFunctionTables(
                this: *mut root::MTL::RenderCommandEncoder,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder30setVertexAccelerationStructureEPKNS_21AccelerationStructureEm"]
            pub fn RenderCommandEncoder_setVertexAccelerationStructure(
                this: *mut root::MTL::RenderCommandEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder11setViewportENS_8ViewportE"]
            pub fn RenderCommandEncoder_setViewport(
                this: *mut root::MTL::RenderCommandEncoder,
                viewport: root::MTL::Viewport,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder12setViewportsEPKNS_8ViewportEm"]
            pub fn RenderCommandEncoder_setViewports(
                this: *mut root::MTL::RenderCommandEncoder,
                viewports: *const root::MTL::Viewport,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21setFrontFacingWindingENS_7WindingE"]
            pub fn RenderCommandEncoder_setFrontFacingWinding(
                this: *mut root::MTL::RenderCommandEncoder,
                frontFacingWinding: root::MTL::Winding,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder27setVertexAmplificationCountEmPKNS_30VertexAmplificationViewMappingE"]
            pub fn RenderCommandEncoder_setVertexAmplificationCount(
                this: *mut root::MTL::RenderCommandEncoder,
                count: root::NS::UInteger,
                viewMappings: *const root::MTL::VertexAmplificationViewMapping,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder11setCullModeENS_8CullModeE"]
            pub fn RenderCommandEncoder_setCullMode(
                this: *mut root::MTL::RenderCommandEncoder,
                cullMode: root::MTL::CullMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder16setDepthClipModeENS_13DepthClipModeE"]
            pub fn RenderCommandEncoder_setDepthClipMode(
                this: *mut root::MTL::RenderCommandEncoder,
                depthClipMode: root::MTL::DepthClipMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder12setDepthBiasEfff"]
            pub fn RenderCommandEncoder_setDepthBias(
                this: *mut root::MTL::RenderCommandEncoder,
                depthBias: f32,
                slopeScale: f32,
                clamp: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14setScissorRectENS_11ScissorRectE"]
            pub fn RenderCommandEncoder_setScissorRect(
                this: *mut root::MTL::RenderCommandEncoder,
                rect: root::MTL::ScissorRect,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder15setScissorRectsEPKNS_11ScissorRectEm"]
            pub fn RenderCommandEncoder_setScissorRects(
                this: *mut root::MTL::RenderCommandEncoder,
                scissorRects: *const root::MTL::ScissorRect,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder19setTriangleFillModeENS_16TriangleFillModeE"]
            pub fn RenderCommandEncoder_setTriangleFillMode(
                this: *mut root::MTL::RenderCommandEncoder,
                fillMode: root::MTL::TriangleFillMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder16setFragmentBytesEPKvmm"]
            pub fn RenderCommandEncoder_setFragmentBytes(
                this: *mut root::MTL::RenderCommandEncoder,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder17setFragmentBufferEPKNS_6BufferEmm"]
            pub fn RenderCommandEncoder_setFragmentBuffer(
                this: *mut root::MTL::RenderCommandEncoder,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder23setFragmentBufferOffsetEmm"]
            pub fn RenderCommandEncoder_setFragmentBufferOffset(
                this: *mut root::MTL::RenderCommandEncoder,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder18setFragmentBuffersEPPNS_6BufferEPKmN2NS5RangeE"]
            pub fn RenderCommandEncoder_setFragmentBuffers(
                this: *mut root::MTL::RenderCommandEncoder,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder18setFragmentTextureEPKNS_7TextureEm"]
            pub fn RenderCommandEncoder_setFragmentTexture(
                this: *mut root::MTL::RenderCommandEncoder,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder19setFragmentTexturesEPPNS_7TextureEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setFragmentTextures(
                this: *mut root::MTL::RenderCommandEncoder,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder23setFragmentSamplerStateEPKNS_12SamplerStateEm"]
            pub fn RenderCommandEncoder_setFragmentSamplerState(
                this: *mut root::MTL::RenderCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder24setFragmentSamplerStatesEPPNS_12SamplerStateEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setFragmentSamplerStates(
                this: *mut root::MTL::RenderCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder23setFragmentSamplerStateEPKNS_12SamplerStateEffm"]
            pub fn RenderCommandEncoder_setFragmentSamplerState1(
                this: *mut root::MTL::RenderCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder24setFragmentSamplerStatesEPPNS_12SamplerStateEPKfS5_N2NS5RangeE"]
            pub fn RenderCommandEncoder_setFragmentSamplerStates1(
                this: *mut root::MTL::RenderCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder31setFragmentVisibleFunctionTableEPKNS_20VisibleFunctionTableEm"]
            pub fn RenderCommandEncoder_setFragmentVisibleFunctionTable(
                this: *mut root::MTL::RenderCommandEncoder,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder32setFragmentVisibleFunctionTablesEPPKNS_20VisibleFunctionTableEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setFragmentVisibleFunctionTables(
                this: *mut root::MTL::RenderCommandEncoder,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder36setFragmentIntersectionFunctionTableEPKNS_25IntersectionFunctionTableEm"]
            pub fn RenderCommandEncoder_setFragmentIntersectionFunctionTable(
                this: *mut root::MTL::RenderCommandEncoder,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder37setFragmentIntersectionFunctionTablesEPPKNS_25IntersectionFunctionTableEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setFragmentIntersectionFunctionTables(
                this: *mut root::MTL::RenderCommandEncoder,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder32setFragmentAccelerationStructureEPKNS_21AccelerationStructureEm"]
            pub fn RenderCommandEncoder_setFragmentAccelerationStructure(
                this: *mut root::MTL::RenderCommandEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder16setBlendColorRedEffff"]
            pub fn RenderCommandEncoder_setBlendColorRed(
                this: *mut root::MTL::RenderCommandEncoder,
                red: f32,
                green: f32,
                blue: f32,
                alpha: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder20setDepthStencilStateEPKNS_17DepthStencilStateE"]
            pub fn RenderCommandEncoder_setDepthStencilState(
                this: *mut root::MTL::RenderCommandEncoder,
                depthStencilState: *const root::MTL::DepthStencilState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder24setStencilReferenceValueEj"]
            pub fn RenderCommandEncoder_setStencilReferenceValue(
                this: *mut root::MTL::RenderCommandEncoder,
                referenceValue: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder29setStencilFrontReferenceValueEjj"]
            pub fn RenderCommandEncoder_setStencilFrontReferenceValue(
                this: *mut root::MTL::RenderCommandEncoder,
                frontReferenceValue: u32,
                backReferenceValue: u32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder23setVisibilityResultModeENS_20VisibilityResultModeEm"]
            pub fn RenderCommandEncoder_setVisibilityResultMode(
                this: *mut root::MTL::RenderCommandEncoder,
                mode: root::MTL::VisibilityResultMode,
                offset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder19setColorStoreActionENS_11StoreActionEm"]
            pub fn RenderCommandEncoder_setColorStoreAction(
                this: *mut root::MTL::RenderCommandEncoder,
                storeAction: root::MTL::StoreAction,
                colorAttachmentIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder19setDepthStoreActionENS_11StoreActionE"]
            pub fn RenderCommandEncoder_setDepthStoreAction(
                this: *mut root::MTL::RenderCommandEncoder,
                storeAction: root::MTL::StoreAction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21setStencilStoreActionENS_11StoreActionE"]
            pub fn RenderCommandEncoder_setStencilStoreAction(
                this: *mut root::MTL::RenderCommandEncoder,
                storeAction: root::MTL::StoreAction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder26setColorStoreActionOptionsEmm"]
            pub fn RenderCommandEncoder_setColorStoreActionOptions(
                this: *mut root::MTL::RenderCommandEncoder,
                storeActionOptions: root::MTL::StoreActionOptions,
                colorAttachmentIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder26setDepthStoreActionOptionsEm"]
            pub fn RenderCommandEncoder_setDepthStoreActionOptions(
                this: *mut root::MTL::RenderCommandEncoder,
                storeActionOptions: root::MTL::StoreActionOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder28setStencilStoreActionOptionsEm"]
            pub fn RenderCommandEncoder_setStencilStoreActionOptions(
                this: *mut root::MTL::RenderCommandEncoder,
                storeActionOptions: root::MTL::StoreActionOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14drawPrimitivesENS_13PrimitiveTypeEmmm"]
            pub fn RenderCommandEncoder_drawPrimitives(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14drawPrimitivesENS_13PrimitiveTypeEmm"]
            pub fn RenderCommandEncoder_drawPrimitives1(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21drawIndexedPrimitivesENS_13PrimitiveTypeEmNS_9IndexTypeEPKNS_6BufferEmm"]
            pub fn RenderCommandEncoder_drawIndexedPrimitives(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21drawIndexedPrimitivesENS_13PrimitiveTypeEmNS_9IndexTypeEPKNS_6BufferEm"]
            pub fn RenderCommandEncoder_drawIndexedPrimitives1(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14drawPrimitivesENS_13PrimitiveTypeEmmmm"]
            pub fn RenderCommandEncoder_drawPrimitives2(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21drawIndexedPrimitivesENS_13PrimitiveTypeEmNS_9IndexTypeEPKNS_6BufferEmmlm"]
            pub fn RenderCommandEncoder_drawIndexedPrimitives2(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseVertex: root::NS::Integer,
                baseInstance: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14drawPrimitivesENS_13PrimitiveTypeEPKNS_6BufferEm"]
            pub fn RenderCommandEncoder_drawPrimitives3(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder21drawIndexedPrimitivesENS_13PrimitiveTypeENS_9IndexTypeEPKNS_6BufferEmS5_m"]
            pub fn RenderCommandEncoder_drawIndexedPrimitives3(
                this: *mut root::MTL::RenderCommandEncoder,
                primitiveType: root::MTL::PrimitiveType,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14textureBarrierEv"]
            pub fn RenderCommandEncoder_textureBarrier(this: *mut root::MTL::RenderCommandEncoder);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder11updateFenceEPKNS_5FenceEm"]
            pub fn RenderCommandEncoder_updateFence(
                this: *mut root::MTL::RenderCommandEncoder,
                fence: *const root::MTL::Fence,
                stages: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder12waitForFenceEPKNS_5FenceEm"]
            pub fn RenderCommandEncoder_waitForFence(
                this: *mut root::MTL::RenderCommandEncoder,
                fence: *const root::MTL::Fence,
                stages: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder27setTessellationFactorBufferEPKNS_6BufferEmm"]
            pub fn RenderCommandEncoder_setTessellationFactorBuffer(
                this: *mut root::MTL::RenderCommandEncoder,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                instanceStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder26setTessellationFactorScaleEf"]
            pub fn RenderCommandEncoder_setTessellationFactorScale(
                this: *mut root::MTL::RenderCommandEncoder,
                scale: f32,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder11drawPatchesEmmmPKNS_6BufferEmmm"]
            pub fn RenderCommandEncoder_drawPatches(
                this: *mut root::MTL::RenderCommandEncoder,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder11drawPatchesEmPKNS_6BufferEmS3_m"]
            pub fn RenderCommandEncoder_drawPatches1(
                this: *mut root::MTL::RenderCommandEncoder,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder18drawIndexedPatchesEmmmPKNS_6BufferEmS3_mmm"]
            pub fn RenderCommandEncoder_drawIndexedPatches(
                this: *mut root::MTL::RenderCommandEncoder,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                controlPointIndexBuffer: *const root::MTL::Buffer,
                controlPointIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder18drawIndexedPatchesEmPKNS_6BufferEmS3_mS3_m"]
            pub fn RenderCommandEncoder_drawIndexedPatches1(
                this: *mut root::MTL::RenderCommandEncoder,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                controlPointIndexBuffer: *const root::MTL::Buffer,
                controlPointIndexBufferOffset: root::NS::UInteger,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderCommandEncoder9tileWidthEv"]
            pub fn RenderCommandEncoder_tileWidth(
                this: *const root::MTL::RenderCommandEncoder,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RenderCommandEncoder10tileHeightEv"]
            pub fn RenderCommandEncoder_tileHeight(
                this: *const root::MTL::RenderCommandEncoder,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder12setTileBytesEPKvmm"]
            pub fn RenderCommandEncoder_setTileBytes(
                this: *mut root::MTL::RenderCommandEncoder,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder13setTileBufferEPKNS_6BufferEmm"]
            pub fn RenderCommandEncoder_setTileBuffer(
                this: *mut root::MTL::RenderCommandEncoder,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder19setTileBufferOffsetEmm"]
            pub fn RenderCommandEncoder_setTileBufferOffset(
                this: *mut root::MTL::RenderCommandEncoder,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14setTileBuffersEPNS_6BufferEPKmN2NS5RangeE"]
            pub fn RenderCommandEncoder_setTileBuffers(
                this: *mut root::MTL::RenderCommandEncoder,
                buffers: *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder14setTileTextureEPKNS_7TextureEm"]
            pub fn RenderCommandEncoder_setTileTexture(
                this: *mut root::MTL::RenderCommandEncoder,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder15setTileTexturesEPPNS_7TextureEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setTileTextures(
                this: *mut root::MTL::RenderCommandEncoder,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder19setTileSamplerStateEPKNS_12SamplerStateEm"]
            pub fn RenderCommandEncoder_setTileSamplerState(
                this: *mut root::MTL::RenderCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder20setTileSamplerStatesEPPNS_12SamplerStateEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setTileSamplerStates(
                this: *mut root::MTL::RenderCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder19setTileSamplerStateEPKNS_12SamplerStateEffm"]
            pub fn RenderCommandEncoder_setTileSamplerState1(
                this: *mut root::MTL::RenderCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder20setTileSamplerStatesEPPNS_12SamplerStateEPKfS5_N2NS5RangeE"]
            pub fn RenderCommandEncoder_setTileSamplerStates1(
                this: *mut root::MTL::RenderCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder27setTileVisibleFunctionTableEPKNS_20VisibleFunctionTableEm"]
            pub fn RenderCommandEncoder_setTileVisibleFunctionTable(
                this: *mut root::MTL::RenderCommandEncoder,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder28setTileVisibleFunctionTablesEPPKNS_20VisibleFunctionTableEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setTileVisibleFunctionTables(
                this: *mut root::MTL::RenderCommandEncoder,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder32setTileIntersectionFunctionTableEPKNS_25IntersectionFunctionTableEm"]
            pub fn RenderCommandEncoder_setTileIntersectionFunctionTable(
                this: *mut root::MTL::RenderCommandEncoder,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder33setTileIntersectionFunctionTablesEPPKNS_25IntersectionFunctionTableEN2NS5RangeE"]
            pub fn RenderCommandEncoder_setTileIntersectionFunctionTables(
                this: *mut root::MTL::RenderCommandEncoder,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder28setTileAccelerationStructureEPKNS_21AccelerationStructureEm"]
            pub fn RenderCommandEncoder_setTileAccelerationStructure(
                this: *mut root::MTL::RenderCommandEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder22dispatchThreadsPerTileENS_4SizeE"]
            pub fn RenderCommandEncoder_dispatchThreadsPerTile(
                this: *mut root::MTL::RenderCommandEncoder,
                threadsPerTile: root::MTL::Size,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder26setThreadgroupMemoryLengthEmmm"]
            pub fn RenderCommandEncoder_setThreadgroupMemoryLength(
                this: *mut root::MTL::RenderCommandEncoder,
                length: root::NS::UInteger,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder11useResourceEPKNS_8ResourceEm"]
            pub fn RenderCommandEncoder_useResource(
                this: *mut root::MTL::RenderCommandEncoder,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder12useResourcesEPPNS_8ResourceEmm"]
            pub fn RenderCommandEncoder_useResources(
                this: *mut root::MTL::RenderCommandEncoder,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder11useResourceEPKNS_8ResourceEmm"]
            pub fn RenderCommandEncoder_useResource1(
                this: *mut root::MTL::RenderCommandEncoder,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
                stages: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder12useResourcesEPNS_8ResourceEmmm"]
            pub fn RenderCommandEncoder_useResources1(
                this: *mut root::MTL::RenderCommandEncoder,
                resources: *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
                stages: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder7useHeapEPKNS_4HeapE"]
            pub fn RenderCommandEncoder_useHeap(
                this: *mut root::MTL::RenderCommandEncoder,
                heap: *const root::MTL::Heap,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder8useHeapsEPPNS_4HeapEm"]
            pub fn RenderCommandEncoder_useHeaps(
                this: *mut root::MTL::RenderCommandEncoder,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder7useHeapEPKNS_4HeapEm"]
            pub fn RenderCommandEncoder_useHeap1(
                this: *mut root::MTL::RenderCommandEncoder,
                heap: *const root::MTL::Heap,
                stages: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder8useHeapsEPPNS_4HeapEmm"]
            pub fn RenderCommandEncoder_useHeaps1(
                this: *mut root::MTL::RenderCommandEncoder,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
                stages: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder23executeCommandsInBufferEPKNS_21IndirectCommandBufferEN2NS5RangeE"]
            pub fn RenderCommandEncoder_executeCommandsInBuffer(
                this: *mut root::MTL::RenderCommandEncoder,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                executionRange: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder23executeCommandsInBufferEPKNS_21IndirectCommandBufferEPKNS_6BufferEm"]
            pub fn RenderCommandEncoder_executeCommandsInBuffer1(
                this: *mut root::MTL::RenderCommandEncoder,
                indirectCommandbuffer: *const root::MTL::IndirectCommandBuffer,
                indirectRangeBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder13memoryBarrierEmmm"]
            pub fn RenderCommandEncoder_memoryBarrier(
                this: *mut root::MTL::RenderCommandEncoder,
                scope: root::MTL::BarrierScope,
                after: root::MTL::RenderStages,
                before: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder13memoryBarrierEPPNS_8ResourceEmmm"]
            pub fn RenderCommandEncoder_memoryBarrier1(
                this: *mut root::MTL::RenderCommandEncoder,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                after: root::MTL::RenderStages,
                before: root::MTL::RenderStages,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RenderCommandEncoder22sampleCountersInBufferEPKNS_19CounterSampleBufferEmb"]
            pub fn RenderCommandEncoder_sampleCountersInBuffer(
                this: *mut root::MTL::RenderCommandEncoder,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            );
        }
        impl RenderCommandEncoder {
            #[inline]
            pub unsafe fn setRenderPipelineState(
                &mut self,
                pipelineState: *const root::MTL::RenderPipelineState,
            ) {
                RenderCommandEncoder_setRenderPipelineState(self, pipelineState)
            }
            #[inline]
            pub unsafe fn setVertexBytes(
                &mut self,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexBytes(self, bytes, length, index)
            }
            #[inline]
            pub unsafe fn setVertexBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn setVertexBufferOffset(
                &mut self,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexBufferOffset(self, offset, index)
            }
            #[inline]
            pub unsafe fn setVertexBuffers(
                &mut self,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setVertexBuffers(self, buffers, offsets, range)
            }
            #[inline]
            pub unsafe fn setVertexTexture(
                &mut self,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexTexture(self, texture, index)
            }
            #[inline]
            pub unsafe fn setVertexTextures(
                &mut self,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setVertexTextures(self, textures, range)
            }
            #[inline]
            pub unsafe fn setVertexSamplerState(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexSamplerState(self, sampler, index)
            }
            #[inline]
            pub unsafe fn setVertexSamplerStates(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setVertexSamplerStates(self, samplers, range)
            }
            #[inline]
            pub unsafe fn setVertexSamplerState1(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexSamplerState1(
                    self,
                    sampler,
                    lodMinClamp,
                    lodMaxClamp,
                    index,
                )
            }
            #[inline]
            pub unsafe fn setVertexSamplerStates1(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setVertexSamplerStates1(
                    self,
                    samplers,
                    lodMinClamps,
                    lodMaxClamps,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setVertexVisibleFunctionTable(
                &mut self,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexVisibleFunctionTable(self, functionTable, bufferIndex)
            }
            #[inline]
            pub unsafe fn setVertexVisibleFunctionTables(
                &mut self,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setVertexVisibleFunctionTables(self, functionTables, range)
            }
            #[inline]
            pub unsafe fn setVertexIntersectionFunctionTable(
                &mut self,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexIntersectionFunctionTable(
                    self,
                    intersectionFunctionTable,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setVertexIntersectionFunctionTables(
                &mut self,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setVertexIntersectionFunctionTables(
                    self,
                    intersectionFunctionTables,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setVertexAccelerationStructure(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVertexAccelerationStructure(
                    self,
                    accelerationStructure,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setViewport(&mut self, viewport: root::MTL::Viewport) {
                RenderCommandEncoder_setViewport(self, viewport)
            }
            #[inline]
            pub unsafe fn setViewports(
                &mut self,
                viewports: *const root::MTL::Viewport,
                count: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setViewports(self, viewports, count)
            }
            #[inline]
            pub unsafe fn setFrontFacingWinding(&mut self, frontFacingWinding: root::MTL::Winding) {
                RenderCommandEncoder_setFrontFacingWinding(self, frontFacingWinding)
            }
            #[inline]
            pub unsafe fn setVertexAmplificationCount(
                &mut self,
                count: root::NS::UInteger,
                viewMappings: *const root::MTL::VertexAmplificationViewMapping,
            ) {
                RenderCommandEncoder_setVertexAmplificationCount(self, count, viewMappings)
            }
            #[inline]
            pub unsafe fn setCullMode(&mut self, cullMode: root::MTL::CullMode) {
                RenderCommandEncoder_setCullMode(self, cullMode)
            }
            #[inline]
            pub unsafe fn setDepthClipMode(&mut self, depthClipMode: root::MTL::DepthClipMode) {
                RenderCommandEncoder_setDepthClipMode(self, depthClipMode)
            }
            #[inline]
            pub unsafe fn setDepthBias(&mut self, depthBias: f32, slopeScale: f32, clamp: f32) {
                RenderCommandEncoder_setDepthBias(self, depthBias, slopeScale, clamp)
            }
            #[inline]
            pub unsafe fn setScissorRect(&mut self, rect: root::MTL::ScissorRect) {
                RenderCommandEncoder_setScissorRect(self, rect)
            }
            #[inline]
            pub unsafe fn setScissorRects(
                &mut self,
                scissorRects: *const root::MTL::ScissorRect,
                count: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setScissorRects(self, scissorRects, count)
            }
            #[inline]
            pub unsafe fn setTriangleFillMode(&mut self, fillMode: root::MTL::TriangleFillMode) {
                RenderCommandEncoder_setTriangleFillMode(self, fillMode)
            }
            #[inline]
            pub unsafe fn setFragmentBytes(
                &mut self,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentBytes(self, bytes, length, index)
            }
            #[inline]
            pub unsafe fn setFragmentBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn setFragmentBufferOffset(
                &mut self,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentBufferOffset(self, offset, index)
            }
            #[inline]
            pub unsafe fn setFragmentBuffers(
                &mut self,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setFragmentBuffers(self, buffers, offsets, range)
            }
            #[inline]
            pub unsafe fn setFragmentTexture(
                &mut self,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentTexture(self, texture, index)
            }
            #[inline]
            pub unsafe fn setFragmentTextures(
                &mut self,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setFragmentTextures(self, textures, range)
            }
            #[inline]
            pub unsafe fn setFragmentSamplerState(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentSamplerState(self, sampler, index)
            }
            #[inline]
            pub unsafe fn setFragmentSamplerStates(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setFragmentSamplerStates(self, samplers, range)
            }
            #[inline]
            pub unsafe fn setFragmentSamplerState1(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentSamplerState1(
                    self,
                    sampler,
                    lodMinClamp,
                    lodMaxClamp,
                    index,
                )
            }
            #[inline]
            pub unsafe fn setFragmentSamplerStates1(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setFragmentSamplerStates1(
                    self,
                    samplers,
                    lodMinClamps,
                    lodMaxClamps,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setFragmentVisibleFunctionTable(
                &mut self,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentVisibleFunctionTable(
                    self,
                    functionTable,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setFragmentVisibleFunctionTables(
                &mut self,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setFragmentVisibleFunctionTables(self, functionTables, range)
            }
            #[inline]
            pub unsafe fn setFragmentIntersectionFunctionTable(
                &mut self,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentIntersectionFunctionTable(
                    self,
                    intersectionFunctionTable,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setFragmentIntersectionFunctionTables(
                &mut self,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setFragmentIntersectionFunctionTables(
                    self,
                    intersectionFunctionTables,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setFragmentAccelerationStructure(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setFragmentAccelerationStructure(
                    self,
                    accelerationStructure,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setBlendColorRed(&mut self, red: f32, green: f32, blue: f32, alpha: f32) {
                RenderCommandEncoder_setBlendColorRed(self, red, green, blue, alpha)
            }
            #[inline]
            pub unsafe fn setDepthStencilState(
                &mut self,
                depthStencilState: *const root::MTL::DepthStencilState,
            ) {
                RenderCommandEncoder_setDepthStencilState(self, depthStencilState)
            }
            #[inline]
            pub unsafe fn setStencilReferenceValue(&mut self, referenceValue: u32) {
                RenderCommandEncoder_setStencilReferenceValue(self, referenceValue)
            }
            #[inline]
            pub unsafe fn setStencilFrontReferenceValue(
                &mut self,
                frontReferenceValue: u32,
                backReferenceValue: u32,
            ) {
                RenderCommandEncoder_setStencilFrontReferenceValue(
                    self,
                    frontReferenceValue,
                    backReferenceValue,
                )
            }
            #[inline]
            pub unsafe fn setVisibilityResultMode(
                &mut self,
                mode: root::MTL::VisibilityResultMode,
                offset: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setVisibilityResultMode(self, mode, offset)
            }
            #[inline]
            pub unsafe fn setColorStoreAction(
                &mut self,
                storeAction: root::MTL::StoreAction,
                colorAttachmentIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setColorStoreAction(self, storeAction, colorAttachmentIndex)
            }
            #[inline]
            pub unsafe fn setDepthStoreAction(&mut self, storeAction: root::MTL::StoreAction) {
                RenderCommandEncoder_setDepthStoreAction(self, storeAction)
            }
            #[inline]
            pub unsafe fn setStencilStoreAction(&mut self, storeAction: root::MTL::StoreAction) {
                RenderCommandEncoder_setStencilStoreAction(self, storeAction)
            }
            #[inline]
            pub unsafe fn setColorStoreActionOptions(
                &mut self,
                storeActionOptions: root::MTL::StoreActionOptions,
                colorAttachmentIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setColorStoreActionOptions(
                    self,
                    storeActionOptions,
                    colorAttachmentIndex,
                )
            }
            #[inline]
            pub unsafe fn setDepthStoreActionOptions(
                &mut self,
                storeActionOptions: root::MTL::StoreActionOptions,
            ) {
                RenderCommandEncoder_setDepthStoreActionOptions(self, storeActionOptions)
            }
            #[inline]
            pub unsafe fn setStencilStoreActionOptions(
                &mut self,
                storeActionOptions: root::MTL::StoreActionOptions,
            ) {
                RenderCommandEncoder_setStencilStoreActionOptions(self, storeActionOptions)
            }
            #[inline]
            pub unsafe fn drawPrimitives(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawPrimitives(
                    self,
                    primitiveType,
                    vertexStart,
                    vertexCount,
                    instanceCount,
                )
            }
            #[inline]
            pub unsafe fn drawPrimitives1(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawPrimitives1(self, primitiveType, vertexStart, vertexCount)
            }
            #[inline]
            pub unsafe fn drawIndexedPrimitives(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawIndexedPrimitives(
                    self,
                    primitiveType,
                    indexCount,
                    indexType,
                    indexBuffer,
                    indexBufferOffset,
                    instanceCount,
                )
            }
            #[inline]
            pub unsafe fn drawIndexedPrimitives1(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawIndexedPrimitives1(
                    self,
                    primitiveType,
                    indexCount,
                    indexType,
                    indexBuffer,
                    indexBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn drawPrimitives2(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawPrimitives2(
                    self,
                    primitiveType,
                    vertexStart,
                    vertexCount,
                    instanceCount,
                    baseInstance,
                )
            }
            #[inline]
            pub unsafe fn drawIndexedPrimitives2(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseVertex: root::NS::Integer,
                baseInstance: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawIndexedPrimitives2(
                    self,
                    primitiveType,
                    indexCount,
                    indexType,
                    indexBuffer,
                    indexBufferOffset,
                    instanceCount,
                    baseVertex,
                    baseInstance,
                )
            }
            #[inline]
            pub unsafe fn drawPrimitives3(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawPrimitives3(
                    self,
                    primitiveType,
                    indirectBuffer,
                    indirectBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn drawIndexedPrimitives3(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawIndexedPrimitives3(
                    self,
                    primitiveType,
                    indexType,
                    indexBuffer,
                    indexBufferOffset,
                    indirectBuffer,
                    indirectBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn textureBarrier(&mut self) {
                RenderCommandEncoder_textureBarrier(self)
            }
            #[inline]
            pub unsafe fn updateFence(
                &mut self,
                fence: *const root::MTL::Fence,
                stages: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_updateFence(self, fence, stages)
            }
            #[inline]
            pub unsafe fn waitForFence(
                &mut self,
                fence: *const root::MTL::Fence,
                stages: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_waitForFence(self, fence, stages)
            }
            #[inline]
            pub unsafe fn setTessellationFactorBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                instanceStride: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTessellationFactorBuffer(
                    self,
                    buffer,
                    offset,
                    instanceStride,
                )
            }
            #[inline]
            pub unsafe fn setTessellationFactorScale(&mut self, scale: f32) {
                RenderCommandEncoder_setTessellationFactorScale(self, scale)
            }
            #[inline]
            pub unsafe fn drawPatches(
                &mut self,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawPatches(
                    self,
                    numberOfPatchControlPoints,
                    patchStart,
                    patchCount,
                    patchIndexBuffer,
                    patchIndexBufferOffset,
                    instanceCount,
                    baseInstance,
                )
            }
            #[inline]
            pub unsafe fn drawPatches1(
                &mut self,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawPatches1(
                    self,
                    numberOfPatchControlPoints,
                    patchIndexBuffer,
                    patchIndexBufferOffset,
                    indirectBuffer,
                    indirectBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn drawIndexedPatches(
                &mut self,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                controlPointIndexBuffer: *const root::MTL::Buffer,
                controlPointIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawIndexedPatches(
                    self,
                    numberOfPatchControlPoints,
                    patchStart,
                    patchCount,
                    patchIndexBuffer,
                    patchIndexBufferOffset,
                    controlPointIndexBuffer,
                    controlPointIndexBufferOffset,
                    instanceCount,
                    baseInstance,
                )
            }
            #[inline]
            pub unsafe fn drawIndexedPatches1(
                &mut self,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                controlPointIndexBuffer: *const root::MTL::Buffer,
                controlPointIndexBufferOffset: root::NS::UInteger,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                RenderCommandEncoder_drawIndexedPatches1(
                    self,
                    numberOfPatchControlPoints,
                    patchIndexBuffer,
                    patchIndexBufferOffset,
                    controlPointIndexBuffer,
                    controlPointIndexBufferOffset,
                    indirectBuffer,
                    indirectBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn tileWidth(&self) -> root::NS::UInteger {
                RenderCommandEncoder_tileWidth(self)
            }
            #[inline]
            pub unsafe fn tileHeight(&self) -> root::NS::UInteger {
                RenderCommandEncoder_tileHeight(self)
            }
            #[inline]
            pub unsafe fn setTileBytes(
                &mut self,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileBytes(self, bytes, length, index)
            }
            #[inline]
            pub unsafe fn setTileBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn setTileBufferOffset(
                &mut self,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileBufferOffset(self, offset, index)
            }
            #[inline]
            pub unsafe fn setTileBuffers(
                &mut self,
                buffers: *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setTileBuffers(self, buffers, offsets, range)
            }
            #[inline]
            pub unsafe fn setTileTexture(
                &mut self,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileTexture(self, texture, index)
            }
            #[inline]
            pub unsafe fn setTileTextures(
                &mut self,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setTileTextures(self, textures, range)
            }
            #[inline]
            pub unsafe fn setTileSamplerState(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileSamplerState(self, sampler, index)
            }
            #[inline]
            pub unsafe fn setTileSamplerStates(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setTileSamplerStates(self, samplers, range)
            }
            #[inline]
            pub unsafe fn setTileSamplerState1(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileSamplerState1(
                    self,
                    sampler,
                    lodMinClamp,
                    lodMaxClamp,
                    index,
                )
            }
            #[inline]
            pub unsafe fn setTileSamplerStates1(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setTileSamplerStates1(
                    self,
                    samplers,
                    lodMinClamps,
                    lodMaxClamps,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setTileVisibleFunctionTable(
                &mut self,
                functionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileVisibleFunctionTable(self, functionTable, bufferIndex)
            }
            #[inline]
            pub unsafe fn setTileVisibleFunctionTables(
                &mut self,
                functionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setTileVisibleFunctionTables(self, functionTables, range)
            }
            #[inline]
            pub unsafe fn setTileIntersectionFunctionTable(
                &mut self,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileIntersectionFunctionTable(
                    self,
                    intersectionFunctionTable,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setTileIntersectionFunctionTables(
                &mut self,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            ) {
                RenderCommandEncoder_setTileIntersectionFunctionTables(
                    self,
                    intersectionFunctionTables,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setTileAccelerationStructure(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setTileAccelerationStructure(
                    self,
                    accelerationStructure,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn dispatchThreadsPerTile(&mut self, threadsPerTile: root::MTL::Size) {
                RenderCommandEncoder_dispatchThreadsPerTile(self, threadsPerTile)
            }
            #[inline]
            pub unsafe fn setThreadgroupMemoryLength(
                &mut self,
                length: root::NS::UInteger,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                RenderCommandEncoder_setThreadgroupMemoryLength(self, length, offset, index)
            }
            #[inline]
            pub unsafe fn useResource(
                &mut self,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
            ) {
                RenderCommandEncoder_useResource(self, resource, usage)
            }
            #[inline]
            pub unsafe fn useResources(
                &mut self,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
            ) {
                RenderCommandEncoder_useResources(self, resources, count, usage)
            }
            #[inline]
            pub unsafe fn useResource1(
                &mut self,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
                stages: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_useResource1(self, resource, usage, stages)
            }
            #[inline]
            pub unsafe fn useResources1(
                &mut self,
                resources: *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
                stages: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_useResources1(self, resources, count, usage, stages)
            }
            #[inline]
            pub unsafe fn useHeap(&mut self, heap: *const root::MTL::Heap) {
                RenderCommandEncoder_useHeap(self, heap)
            }
            #[inline]
            pub unsafe fn useHeaps(
                &mut self,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
            ) {
                RenderCommandEncoder_useHeaps(self, heaps, count)
            }
            #[inline]
            pub unsafe fn useHeap1(
                &mut self,
                heap: *const root::MTL::Heap,
                stages: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_useHeap1(self, heap, stages)
            }
            #[inline]
            pub unsafe fn useHeaps1(
                &mut self,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
                stages: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_useHeaps1(self, heaps, count, stages)
            }
            #[inline]
            pub unsafe fn executeCommandsInBuffer(
                &mut self,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                executionRange: root::NS::Range,
            ) {
                RenderCommandEncoder_executeCommandsInBuffer(
                    self,
                    indirectCommandBuffer,
                    executionRange,
                )
            }
            #[inline]
            pub unsafe fn executeCommandsInBuffer1(
                &mut self,
                indirectCommandbuffer: *const root::MTL::IndirectCommandBuffer,
                indirectRangeBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                RenderCommandEncoder_executeCommandsInBuffer1(
                    self,
                    indirectCommandbuffer,
                    indirectRangeBuffer,
                    indirectBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn memoryBarrier(
                &mut self,
                scope: root::MTL::BarrierScope,
                after: root::MTL::RenderStages,
                before: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_memoryBarrier(self, scope, after, before)
            }
            #[inline]
            pub unsafe fn memoryBarrier1(
                &mut self,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                after: root::MTL::RenderStages,
                before: root::MTL::RenderStages,
            ) {
                RenderCommandEncoder_memoryBarrier1(self, resources, count, after, before)
            }
            #[inline]
            pub unsafe fn sampleCountersInBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            ) {
                RenderCommandEncoder_sampleCountersInBuffer(
                    self,
                    sampleBuffer,
                    sampleIndex,
                    barrier,
                )
            }
        }
        pub const BlendFactor_BlendFactorZero: root::MTL::BlendFactor = 0;
        pub const BlendFactor_BlendFactorOne: root::MTL::BlendFactor = 1;
        pub const BlendFactor_BlendFactorSourceColor: root::MTL::BlendFactor = 2;
        pub const BlendFactor_BlendFactorOneMinusSourceColor: root::MTL::BlendFactor = 3;
        pub const BlendFactor_BlendFactorSourceAlpha: root::MTL::BlendFactor = 4;
        pub const BlendFactor_BlendFactorOneMinusSourceAlpha: root::MTL::BlendFactor = 5;
        pub const BlendFactor_BlendFactorDestinationColor: root::MTL::BlendFactor = 6;
        pub const BlendFactor_BlendFactorOneMinusDestinationColor: root::MTL::BlendFactor = 7;
        pub const BlendFactor_BlendFactorDestinationAlpha: root::MTL::BlendFactor = 8;
        pub const BlendFactor_BlendFactorOneMinusDestinationAlpha: root::MTL::BlendFactor = 9;
        pub const BlendFactor_BlendFactorSourceAlphaSaturated: root::MTL::BlendFactor = 10;
        pub const BlendFactor_BlendFactorBlendColor: root::MTL::BlendFactor = 11;
        pub const BlendFactor_BlendFactorOneMinusBlendColor: root::MTL::BlendFactor = 12;
        pub const BlendFactor_BlendFactorBlendAlpha: root::MTL::BlendFactor = 13;
        pub const BlendFactor_BlendFactorOneMinusBlendAlpha: root::MTL::BlendFactor = 14;
        pub const BlendFactor_BlendFactorSource1Color: root::MTL::BlendFactor = 15;
        pub const BlendFactor_BlendFactorOneMinusSource1Color: root::MTL::BlendFactor = 16;
        pub const BlendFactor_BlendFactorSource1Alpha: root::MTL::BlendFactor = 17;
        pub const BlendFactor_BlendFactorOneMinusSource1Alpha: root::MTL::BlendFactor = 18;
        pub type BlendFactor = root::NS::UInteger;
        pub const BlendOperation_BlendOperationAdd: root::MTL::BlendOperation = 0;
        pub const BlendOperation_BlendOperationSubtract: root::MTL::BlendOperation = 1;
        pub const BlendOperation_BlendOperationReverseSubtract: root::MTL::BlendOperation = 2;
        pub const BlendOperation_BlendOperationMin: root::MTL::BlendOperation = 3;
        pub const BlendOperation_BlendOperationMax: root::MTL::BlendOperation = 4;
        pub type BlendOperation = root::NS::UInteger;
        pub type ColorWriteMask = root::NS::UInteger;
        pub const MTL_ColorWriteMaskNone: root::MTL::ColorWriteMask = 0;
        pub const MTL_ColorWriteMaskAlpha: root::MTL::ColorWriteMask = 1;
        pub const MTL_ColorWriteMaskBlue: root::MTL::ColorWriteMask = 2;
        pub const MTL_ColorWriteMaskGreen: root::MTL::ColorWriteMask = 4;
        pub const MTL_ColorWriteMaskRed: root::MTL::ColorWriteMask = 8;
        pub const MTL_ColorWriteMaskAll: root::MTL::ColorWriteMask = 15;
        pub type _bindgen_ty_12 = root::MTL::ColorWriteMask;
        pub const PrimitiveTopologyClass_PrimitiveTopologyClassUnspecified:
            root::MTL::PrimitiveTopologyClass = 0;
        pub const PrimitiveTopologyClass_PrimitiveTopologyClassPoint:
            root::MTL::PrimitiveTopologyClass = 1;
        pub const PrimitiveTopologyClass_PrimitiveTopologyClassLine:
            root::MTL::PrimitiveTopologyClass = 2;
        pub const PrimitiveTopologyClass_PrimitiveTopologyClassTriangle:
            root::MTL::PrimitiveTopologyClass = 3;
        pub type PrimitiveTopologyClass = root::NS::UInteger;
        pub const TessellationPartitionMode_TessellationPartitionModePow2:
            root::MTL::TessellationPartitionMode = 0;
        pub const TessellationPartitionMode_TessellationPartitionModeInteger:
            root::MTL::TessellationPartitionMode = 1;
        pub const TessellationPartitionMode_TessellationPartitionModeFractionalOdd:
            root::MTL::TessellationPartitionMode = 2;
        pub const TessellationPartitionMode_TessellationPartitionModeFractionalEven:
            root::MTL::TessellationPartitionMode = 3;
        pub type TessellationPartitionMode = root::NS::UInteger;
        pub const TessellationFactorStepFunction_TessellationFactorStepFunctionConstant:
            root::MTL::TessellationFactorStepFunction = 0;
        pub const TessellationFactorStepFunction_TessellationFactorStepFunctionPerPatch:
            root::MTL::TessellationFactorStepFunction = 1;
        pub const TessellationFactorStepFunction_TessellationFactorStepFunctionPerInstance:
            root::MTL::TessellationFactorStepFunction = 2;
        pub const TessellationFactorStepFunction_TessellationFactorStepFunctionPerPatchAndPerInstance : root :: MTL :: TessellationFactorStepFunction = 3 ;
        pub type TessellationFactorStepFunction = root::NS::UInteger;
        pub const TessellationFactorFormat_TessellationFactorFormatHalf:
            root::MTL::TessellationFactorFormat = 0;
        pub type TessellationFactorFormat = root::NS::UInteger;
        pub const TessellationControlPointIndexType_TessellationControlPointIndexTypeNone:
            root::MTL::TessellationControlPointIndexType = 0;
        pub const TessellationControlPointIndexType_TessellationControlPointIndexTypeUInt16:
            root::MTL::TessellationControlPointIndexType = 1;
        pub const TessellationControlPointIndexType_TessellationControlPointIndexTypeUInt32:
            root::MTL::TessellationControlPointIndexType = 2;
        pub type TessellationControlPointIndexType = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPipelineColorAttachmentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor5allocEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor4initEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_init(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor11pixelFormatEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_pixelFormat(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor14setPixelFormatENS_11PixelFormatE"]
            pub fn RenderPipelineColorAttachmentDescriptor_setPixelFormat(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                pixelFormat: root::MTL::PixelFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor15blendingEnabledEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_blendingEnabled(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor18setBlendingEnabledEb"]
            pub fn RenderPipelineColorAttachmentDescriptor_setBlendingEnabled(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                blendingEnabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor20sourceRGBBlendFactorEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_sourceRGBBlendFactor(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::BlendFactor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor23setSourceRGBBlendFactorENS_11BlendFactorE"]
            pub fn RenderPipelineColorAttachmentDescriptor_setSourceRGBBlendFactor(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                sourceRGBBlendFactor: root::MTL::BlendFactor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor25destinationRGBBlendFactorEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_destinationRGBBlendFactor(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::BlendFactor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor28setDestinationRGBBlendFactorENS_11BlendFactorE"]
            pub fn RenderPipelineColorAttachmentDescriptor_setDestinationRGBBlendFactor(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                destinationRGBBlendFactor: root::MTL::BlendFactor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor17rgbBlendOperationEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_rgbBlendOperation(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::BlendOperation;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor20setRgbBlendOperationENS_14BlendOperationE"]
            pub fn RenderPipelineColorAttachmentDescriptor_setRgbBlendOperation(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                rgbBlendOperation: root::MTL::BlendOperation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor22sourceAlphaBlendFactorEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_sourceAlphaBlendFactor(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::BlendFactor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor25setSourceAlphaBlendFactorENS_11BlendFactorE"]
            pub fn RenderPipelineColorAttachmentDescriptor_setSourceAlphaBlendFactor(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                sourceAlphaBlendFactor: root::MTL::BlendFactor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor27destinationAlphaBlendFactorEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_destinationAlphaBlendFactor(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::BlendFactor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor30setDestinationAlphaBlendFactorENS_11BlendFactorE"]
            pub fn RenderPipelineColorAttachmentDescriptor_setDestinationAlphaBlendFactor(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                destinationAlphaBlendFactor: root::MTL::BlendFactor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor19alphaBlendOperationEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_alphaBlendOperation(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::BlendOperation;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor22setAlphaBlendOperationENS_14BlendOperationE"]
            pub fn RenderPipelineColorAttachmentDescriptor_setAlphaBlendOperation(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                alphaBlendOperation: root::MTL::BlendOperation,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL39RenderPipelineColorAttachmentDescriptor9writeMaskEv"]
            pub fn RenderPipelineColorAttachmentDescriptor_writeMask(
                this: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::ColorWriteMask;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL39RenderPipelineColorAttachmentDescriptor12setWriteMaskEm"]
            pub fn RenderPipelineColorAttachmentDescriptor_setWriteMask(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptor,
                writeMask: root::MTL::ColorWriteMask,
            );
        }
        impl RenderPipelineColorAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPipelineColorAttachmentDescriptor {
                RenderPipelineColorAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptor {
                RenderPipelineColorAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn pixelFormat(&self) -> root::MTL::PixelFormat {
                RenderPipelineColorAttachmentDescriptor_pixelFormat(self)
            }
            #[inline]
            pub unsafe fn setPixelFormat(&mut self, pixelFormat: root::MTL::PixelFormat) {
                RenderPipelineColorAttachmentDescriptor_setPixelFormat(self, pixelFormat)
            }
            #[inline]
            pub unsafe fn blendingEnabled(&self) -> bool {
                RenderPipelineColorAttachmentDescriptor_blendingEnabled(self)
            }
            #[inline]
            pub unsafe fn setBlendingEnabled(&mut self, blendingEnabled: bool) {
                RenderPipelineColorAttachmentDescriptor_setBlendingEnabled(self, blendingEnabled)
            }
            #[inline]
            pub unsafe fn sourceRGBBlendFactor(&self) -> root::MTL::BlendFactor {
                RenderPipelineColorAttachmentDescriptor_sourceRGBBlendFactor(self)
            }
            #[inline]
            pub unsafe fn setSourceRGBBlendFactor(
                &mut self,
                sourceRGBBlendFactor: root::MTL::BlendFactor,
            ) {
                RenderPipelineColorAttachmentDescriptor_setSourceRGBBlendFactor(
                    self,
                    sourceRGBBlendFactor,
                )
            }
            #[inline]
            pub unsafe fn destinationRGBBlendFactor(&self) -> root::MTL::BlendFactor {
                RenderPipelineColorAttachmentDescriptor_destinationRGBBlendFactor(self)
            }
            #[inline]
            pub unsafe fn setDestinationRGBBlendFactor(
                &mut self,
                destinationRGBBlendFactor: root::MTL::BlendFactor,
            ) {
                RenderPipelineColorAttachmentDescriptor_setDestinationRGBBlendFactor(
                    self,
                    destinationRGBBlendFactor,
                )
            }
            #[inline]
            pub unsafe fn rgbBlendOperation(&self) -> root::MTL::BlendOperation {
                RenderPipelineColorAttachmentDescriptor_rgbBlendOperation(self)
            }
            #[inline]
            pub unsafe fn setRgbBlendOperation(
                &mut self,
                rgbBlendOperation: root::MTL::BlendOperation,
            ) {
                RenderPipelineColorAttachmentDescriptor_setRgbBlendOperation(
                    self,
                    rgbBlendOperation,
                )
            }
            #[inline]
            pub unsafe fn sourceAlphaBlendFactor(&self) -> root::MTL::BlendFactor {
                RenderPipelineColorAttachmentDescriptor_sourceAlphaBlendFactor(self)
            }
            #[inline]
            pub unsafe fn setSourceAlphaBlendFactor(
                &mut self,
                sourceAlphaBlendFactor: root::MTL::BlendFactor,
            ) {
                RenderPipelineColorAttachmentDescriptor_setSourceAlphaBlendFactor(
                    self,
                    sourceAlphaBlendFactor,
                )
            }
            #[inline]
            pub unsafe fn destinationAlphaBlendFactor(&self) -> root::MTL::BlendFactor {
                RenderPipelineColorAttachmentDescriptor_destinationAlphaBlendFactor(self)
            }
            #[inline]
            pub unsafe fn setDestinationAlphaBlendFactor(
                &mut self,
                destinationAlphaBlendFactor: root::MTL::BlendFactor,
            ) {
                RenderPipelineColorAttachmentDescriptor_setDestinationAlphaBlendFactor(
                    self,
                    destinationAlphaBlendFactor,
                )
            }
            #[inline]
            pub unsafe fn alphaBlendOperation(&self) -> root::MTL::BlendOperation {
                RenderPipelineColorAttachmentDescriptor_alphaBlendOperation(self)
            }
            #[inline]
            pub unsafe fn setAlphaBlendOperation(
                &mut self,
                alphaBlendOperation: root::MTL::BlendOperation,
            ) {
                RenderPipelineColorAttachmentDescriptor_setAlphaBlendOperation(
                    self,
                    alphaBlendOperation,
                )
            }
            #[inline]
            pub unsafe fn writeMask(&self) -> root::MTL::ColorWriteMask {
                RenderPipelineColorAttachmentDescriptor_writeMask(self)
            }
            #[inline]
            pub unsafe fn setWriteMask(&mut self, writeMask: root::MTL::ColorWriteMask) {
                RenderPipelineColorAttachmentDescriptor_setWriteMask(self, writeMask)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPipelineReflection {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineReflection5allocEv"]
            pub fn RenderPipelineReflection_alloc() -> *mut root::MTL::RenderPipelineReflection;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineReflection4initEv"]
            pub fn RenderPipelineReflection_init(
                this: *mut root::MTL::RenderPipelineReflection,
            ) -> *mut root::MTL::RenderPipelineReflection;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineReflection15vertexArgumentsEv"]
            pub fn RenderPipelineReflection_vertexArguments(
                this: *const root::MTL::RenderPipelineReflection,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineReflection17fragmentArgumentsEv"]
            pub fn RenderPipelineReflection_fragmentArguments(
                this: *const root::MTL::RenderPipelineReflection,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineReflection13tileArgumentsEv"]
            pub fn RenderPipelineReflection_tileArguments(
                this: *const root::MTL::RenderPipelineReflection,
            ) -> *mut root::NS::Array;
        }
        impl RenderPipelineReflection {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPipelineReflection {
                RenderPipelineReflection_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPipelineReflection {
                RenderPipelineReflection_init(self)
            }
            #[inline]
            pub unsafe fn vertexArguments(&self) -> *mut root::NS::Array {
                RenderPipelineReflection_vertexArguments(self)
            }
            #[inline]
            pub unsafe fn fragmentArguments(&self) -> *mut root::NS::Array {
                RenderPipelineReflection_fragmentArguments(self)
            }
            #[inline]
            pub unsafe fn tileArguments(&self) -> *mut root::NS::Array {
                RenderPipelineReflection_tileArguments(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPipelineDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor5allocEv"]
            pub fn RenderPipelineDescriptor_alloc() -> *mut root::MTL::RenderPipelineDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor4initEv"]
            pub fn RenderPipelineDescriptor_init(
                this: *mut root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::RenderPipelineDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor5labelEv"]
            pub fn RenderPipelineDescriptor_label(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor8setLabelEPKN2NS6StringE"]
            pub fn RenderPipelineDescriptor_setLabel(
                this: *mut root::MTL::RenderPipelineDescriptor,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor14vertexFunctionEv"]
            pub fn RenderPipelineDescriptor_vertexFunction(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor17setVertexFunctionEPKNS_8FunctionE"]
            pub fn RenderPipelineDescriptor_setVertexFunction(
                this: *mut root::MTL::RenderPipelineDescriptor,
                vertexFunction: *const root::MTL::Function,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor16fragmentFunctionEv"]
            pub fn RenderPipelineDescriptor_fragmentFunction(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor19setFragmentFunctionEPKNS_8FunctionE"]
            pub fn RenderPipelineDescriptor_setFragmentFunction(
                this: *mut root::MTL::RenderPipelineDescriptor,
                fragmentFunction: *const root::MTL::Function,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor16vertexDescriptorEv"]
            pub fn RenderPipelineDescriptor_vertexDescriptor(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::VertexDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor19setVertexDescriptorEPKNS_16VertexDescriptorE"]
            pub fn RenderPipelineDescriptor_setVertexDescriptor(
                this: *mut root::MTL::RenderPipelineDescriptor,
                vertexDescriptor: *const root::MTL::VertexDescriptor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor11sampleCountEv"]
            pub fn RenderPipelineDescriptor_sampleCount(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor14setSampleCountEm"]
            pub fn RenderPipelineDescriptor_setSampleCount(
                this: *mut root::MTL::RenderPipelineDescriptor,
                sampleCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor17rasterSampleCountEv"]
            pub fn RenderPipelineDescriptor_rasterSampleCount(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor20setRasterSampleCountEm"]
            pub fn RenderPipelineDescriptor_setRasterSampleCount(
                this: *mut root::MTL::RenderPipelineDescriptor,
                rasterSampleCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor22alphaToCoverageEnabledEv"]
            pub fn RenderPipelineDescriptor_alphaToCoverageEnabled(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor25setAlphaToCoverageEnabledEb"]
            pub fn RenderPipelineDescriptor_setAlphaToCoverageEnabled(
                this: *mut root::MTL::RenderPipelineDescriptor,
                alphaToCoverageEnabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor17alphaToOneEnabledEv"]
            pub fn RenderPipelineDescriptor_alphaToOneEnabled(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor20setAlphaToOneEnabledEb"]
            pub fn RenderPipelineDescriptor_setAlphaToOneEnabled(
                this: *mut root::MTL::RenderPipelineDescriptor,
                alphaToOneEnabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor20rasterizationEnabledEv"]
            pub fn RenderPipelineDescriptor_rasterizationEnabled(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor23setRasterizationEnabledEb"]
            pub fn RenderPipelineDescriptor_setRasterizationEnabled(
                this: *mut root::MTL::RenderPipelineDescriptor,
                rasterizationEnabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor27maxVertexAmplificationCountEv"]
            pub fn RenderPipelineDescriptor_maxVertexAmplificationCount(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor30setMaxVertexAmplificationCountEm"]
            pub fn RenderPipelineDescriptor_setMaxVertexAmplificationCount(
                this: *mut root::MTL::RenderPipelineDescriptor,
                maxVertexAmplificationCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor16colorAttachmentsEv"]
            pub fn RenderPipelineDescriptor_colorAttachments(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor26depthAttachmentPixelFormatEv"]
            pub fn RenderPipelineDescriptor_depthAttachmentPixelFormat(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor29setDepthAttachmentPixelFormatENS_11PixelFormatE"]
            pub fn RenderPipelineDescriptor_setDepthAttachmentPixelFormat(
                this: *mut root::MTL::RenderPipelineDescriptor,
                depthAttachmentPixelFormat: root::MTL::PixelFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor28stencilAttachmentPixelFormatEv"]
            pub fn RenderPipelineDescriptor_stencilAttachmentPixelFormat(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor31setStencilAttachmentPixelFormatENS_11PixelFormatE"]
            pub fn RenderPipelineDescriptor_setStencilAttachmentPixelFormat(
                this: *mut root::MTL::RenderPipelineDescriptor,
                stencilAttachmentPixelFormat: root::MTL::PixelFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor22inputPrimitiveTopologyEv"]
            pub fn RenderPipelineDescriptor_inputPrimitiveTopology(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::PrimitiveTopologyClass;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor25setInputPrimitiveTopologyENS_22PrimitiveTopologyClassE"]
            pub fn RenderPipelineDescriptor_setInputPrimitiveTopology(
                this: *mut root::MTL::RenderPipelineDescriptor,
                inputPrimitiveTopology: root::MTL::PrimitiveTopologyClass,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor25tessellationPartitionModeEv"]
            pub fn RenderPipelineDescriptor_tessellationPartitionMode(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::TessellationPartitionMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor28setTessellationPartitionModeENS_25TessellationPartitionModeE"]
            pub fn RenderPipelineDescriptor_setTessellationPartitionMode(
                this: *mut root::MTL::RenderPipelineDescriptor,
                tessellationPartitionMode: root::MTL::TessellationPartitionMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor21maxTessellationFactorEv"]
            pub fn RenderPipelineDescriptor_maxTessellationFactor(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor24setMaxTessellationFactorEm"]
            pub fn RenderPipelineDescriptor_setMaxTessellationFactor(
                this: *mut root::MTL::RenderPipelineDescriptor,
                maxTessellationFactor: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor30tessellationFactorScaleEnabledEv"]
            pub fn RenderPipelineDescriptor_tessellationFactorScaleEnabled(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor33setTessellationFactorScaleEnabledEb"]
            pub fn RenderPipelineDescriptor_setTessellationFactorScaleEnabled(
                this: *mut root::MTL::RenderPipelineDescriptor,
                tessellationFactorScaleEnabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor24tessellationFactorFormatEv"]
            pub fn RenderPipelineDescriptor_tessellationFactorFormat(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::TessellationFactorFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor27setTessellationFactorFormatENS_24TessellationFactorFormatE"]
            pub fn RenderPipelineDescriptor_setTessellationFactorFormat(
                this: *mut root::MTL::RenderPipelineDescriptor,
                tessellationFactorFormat: root::MTL::TessellationFactorFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor33tessellationControlPointIndexTypeEv"]
            pub fn RenderPipelineDescriptor_tessellationControlPointIndexType(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::TessellationControlPointIndexType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor36setTessellationControlPointIndexTypeENS_33TessellationControlPointIndexTypeE"]
            pub fn RenderPipelineDescriptor_setTessellationControlPointIndexType(
                this: *mut root::MTL::RenderPipelineDescriptor,
                tessellationControlPointIndexType: root::MTL::TessellationControlPointIndexType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor30tessellationFactorStepFunctionEv"]
            pub fn RenderPipelineDescriptor_tessellationFactorStepFunction(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::TessellationFactorStepFunction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor33setTessellationFactorStepFunctionENS_30TessellationFactorStepFunctionE"]
            pub fn RenderPipelineDescriptor_setTessellationFactorStepFunction(
                this: *mut root::MTL::RenderPipelineDescriptor,
                tessellationFactorStepFunction: root::MTL::TessellationFactorStepFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor30tessellationOutputWindingOrderEv"]
            pub fn RenderPipelineDescriptor_tessellationOutputWindingOrder(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::MTL::Winding;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor33setTessellationOutputWindingOrderENS_7WindingE"]
            pub fn RenderPipelineDescriptor_setTessellationOutputWindingOrder(
                this: *mut root::MTL::RenderPipelineDescriptor,
                tessellationOutputWindingOrder: root::MTL::Winding,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor13vertexBuffersEv"]
            pub fn RenderPipelineDescriptor_vertexBuffers(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::PipelineBufferDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor15fragmentBuffersEv"]
            pub fn RenderPipelineDescriptor_fragmentBuffers(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::PipelineBufferDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor29supportIndirectCommandBuffersEv"]
            pub fn RenderPipelineDescriptor_supportIndirectCommandBuffers(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor32setSupportIndirectCommandBuffersEb"]
            pub fn RenderPipelineDescriptor_setSupportIndirectCommandBuffers(
                this: *mut root::MTL::RenderPipelineDescriptor,
                supportIndirectCommandBuffers: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor14binaryArchivesEv"]
            pub fn RenderPipelineDescriptor_binaryArchives(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor17setBinaryArchivesEPKN2NS5ArrayE"]
            pub fn RenderPipelineDescriptor_setBinaryArchives(
                this: *mut root::MTL::RenderPipelineDescriptor,
                binaryArchives: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor24vertexPreloadedLibrariesEv"]
            pub fn RenderPipelineDescriptor_vertexPreloadedLibraries(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor27setVertexPreloadedLibrariesEPKN2NS5ArrayE"]
            pub fn RenderPipelineDescriptor_setVertexPreloadedLibraries(
                this: *mut root::MTL::RenderPipelineDescriptor,
                vertexPreloadedLibraries: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor26fragmentPreloadedLibrariesEv"]
            pub fn RenderPipelineDescriptor_fragmentPreloadedLibraries(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor29setFragmentPreloadedLibrariesEPKN2NS5ArrayE"]
            pub fn RenderPipelineDescriptor_setFragmentPreloadedLibraries(
                this: *mut root::MTL::RenderPipelineDescriptor,
                fragmentPreloadedLibraries: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor21vertexLinkedFunctionsEv"]
            pub fn RenderPipelineDescriptor_vertexLinkedFunctions(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::LinkedFunctions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor24setVertexLinkedFunctionsEPKNS_15LinkedFunctionsE"]
            pub fn RenderPipelineDescriptor_setVertexLinkedFunctions(
                this: *mut root::MTL::RenderPipelineDescriptor,
                vertexLinkedFunctions: *const root::MTL::LinkedFunctions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor23fragmentLinkedFunctionsEv"]
            pub fn RenderPipelineDescriptor_fragmentLinkedFunctions(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> *mut root::MTL::LinkedFunctions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor26setFragmentLinkedFunctionsEPKNS_15LinkedFunctionsE"]
            pub fn RenderPipelineDescriptor_setFragmentLinkedFunctions(
                this: *mut root::MTL::RenderPipelineDescriptor,
                fragmentLinkedFunctions: *const root::MTL::LinkedFunctions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor34supportAddingVertexBinaryFunctionsEv"]
            pub fn RenderPipelineDescriptor_supportAddingVertexBinaryFunctions(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor37setSupportAddingVertexBinaryFunctionsEb"]
            pub fn RenderPipelineDescriptor_setSupportAddingVertexBinaryFunctions(
                this: *mut root::MTL::RenderPipelineDescriptor,
                supportAddingVertexBinaryFunctions: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor36supportAddingFragmentBinaryFunctionsEv"]
            pub fn RenderPipelineDescriptor_supportAddingFragmentBinaryFunctions(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor39setSupportAddingFragmentBinaryFunctionsEb"]
            pub fn RenderPipelineDescriptor_setSupportAddingFragmentBinaryFunctions(
                this: *mut root::MTL::RenderPipelineDescriptor,
                supportAddingFragmentBinaryFunctions: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor23maxVertexCallStackDepthEv"]
            pub fn RenderPipelineDescriptor_maxVertexCallStackDepth(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor26setMaxVertexCallStackDepthEm"]
            pub fn RenderPipelineDescriptor_setMaxVertexCallStackDepth(
                this: *mut root::MTL::RenderPipelineDescriptor,
                maxVertexCallStackDepth: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24RenderPipelineDescriptor25maxFragmentCallStackDepthEv"]
            pub fn RenderPipelineDescriptor_maxFragmentCallStackDepth(
                this: *const root::MTL::RenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor28setMaxFragmentCallStackDepthEm"]
            pub fn RenderPipelineDescriptor_setMaxFragmentCallStackDepth(
                this: *mut root::MTL::RenderPipelineDescriptor,
                maxFragmentCallStackDepth: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24RenderPipelineDescriptor5resetEv"]
            pub fn RenderPipelineDescriptor_reset(this: *mut root::MTL::RenderPipelineDescriptor);
        }
        impl RenderPipelineDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPipelineDescriptor {
                RenderPipelineDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPipelineDescriptor {
                RenderPipelineDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                RenderPipelineDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                RenderPipelineDescriptor_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn vertexFunction(&self) -> *mut root::MTL::Function {
                RenderPipelineDescriptor_vertexFunction(self)
            }
            #[inline]
            pub unsafe fn setVertexFunction(&mut self, vertexFunction: *const root::MTL::Function) {
                RenderPipelineDescriptor_setVertexFunction(self, vertexFunction)
            }
            #[inline]
            pub unsafe fn fragmentFunction(&self) -> *mut root::MTL::Function {
                RenderPipelineDescriptor_fragmentFunction(self)
            }
            #[inline]
            pub unsafe fn setFragmentFunction(
                &mut self,
                fragmentFunction: *const root::MTL::Function,
            ) {
                RenderPipelineDescriptor_setFragmentFunction(self, fragmentFunction)
            }
            #[inline]
            pub unsafe fn vertexDescriptor(&self) -> *mut root::MTL::VertexDescriptor {
                RenderPipelineDescriptor_vertexDescriptor(self)
            }
            #[inline]
            pub unsafe fn setVertexDescriptor(
                &mut self,
                vertexDescriptor: *const root::MTL::VertexDescriptor,
            ) {
                RenderPipelineDescriptor_setVertexDescriptor(self, vertexDescriptor)
            }
            #[inline]
            pub unsafe fn sampleCount(&self) -> root::NS::UInteger {
                RenderPipelineDescriptor_sampleCount(self)
            }
            #[inline]
            pub unsafe fn setSampleCount(&mut self, sampleCount: root::NS::UInteger) {
                RenderPipelineDescriptor_setSampleCount(self, sampleCount)
            }
            #[inline]
            pub unsafe fn rasterSampleCount(&self) -> root::NS::UInteger {
                RenderPipelineDescriptor_rasterSampleCount(self)
            }
            #[inline]
            pub unsafe fn setRasterSampleCount(&mut self, rasterSampleCount: root::NS::UInteger) {
                RenderPipelineDescriptor_setRasterSampleCount(self, rasterSampleCount)
            }
            #[inline]
            pub unsafe fn alphaToCoverageEnabled(&self) -> bool {
                RenderPipelineDescriptor_alphaToCoverageEnabled(self)
            }
            #[inline]
            pub unsafe fn setAlphaToCoverageEnabled(&mut self, alphaToCoverageEnabled: bool) {
                RenderPipelineDescriptor_setAlphaToCoverageEnabled(self, alphaToCoverageEnabled)
            }
            #[inline]
            pub unsafe fn alphaToOneEnabled(&self) -> bool {
                RenderPipelineDescriptor_alphaToOneEnabled(self)
            }
            #[inline]
            pub unsafe fn setAlphaToOneEnabled(&mut self, alphaToOneEnabled: bool) {
                RenderPipelineDescriptor_setAlphaToOneEnabled(self, alphaToOneEnabled)
            }
            #[inline]
            pub unsafe fn rasterizationEnabled(&self) -> bool {
                RenderPipelineDescriptor_rasterizationEnabled(self)
            }
            #[inline]
            pub unsafe fn setRasterizationEnabled(&mut self, rasterizationEnabled: bool) {
                RenderPipelineDescriptor_setRasterizationEnabled(self, rasterizationEnabled)
            }
            #[inline]
            pub unsafe fn maxVertexAmplificationCount(&self) -> root::NS::UInteger {
                RenderPipelineDescriptor_maxVertexAmplificationCount(self)
            }
            #[inline]
            pub unsafe fn setMaxVertexAmplificationCount(
                &mut self,
                maxVertexAmplificationCount: root::NS::UInteger,
            ) {
                RenderPipelineDescriptor_setMaxVertexAmplificationCount(
                    self,
                    maxVertexAmplificationCount,
                )
            }
            #[inline]
            pub unsafe fn colorAttachments(
                &self,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray {
                RenderPipelineDescriptor_colorAttachments(self)
            }
            #[inline]
            pub unsafe fn depthAttachmentPixelFormat(&self) -> root::MTL::PixelFormat {
                RenderPipelineDescriptor_depthAttachmentPixelFormat(self)
            }
            #[inline]
            pub unsafe fn setDepthAttachmentPixelFormat(
                &mut self,
                depthAttachmentPixelFormat: root::MTL::PixelFormat,
            ) {
                RenderPipelineDescriptor_setDepthAttachmentPixelFormat(
                    self,
                    depthAttachmentPixelFormat,
                )
            }
            #[inline]
            pub unsafe fn stencilAttachmentPixelFormat(&self) -> root::MTL::PixelFormat {
                RenderPipelineDescriptor_stencilAttachmentPixelFormat(self)
            }
            #[inline]
            pub unsafe fn setStencilAttachmentPixelFormat(
                &mut self,
                stencilAttachmentPixelFormat: root::MTL::PixelFormat,
            ) {
                RenderPipelineDescriptor_setStencilAttachmentPixelFormat(
                    self,
                    stencilAttachmentPixelFormat,
                )
            }
            #[inline]
            pub unsafe fn inputPrimitiveTopology(&self) -> root::MTL::PrimitiveTopologyClass {
                RenderPipelineDescriptor_inputPrimitiveTopology(self)
            }
            #[inline]
            pub unsafe fn setInputPrimitiveTopology(
                &mut self,
                inputPrimitiveTopology: root::MTL::PrimitiveTopologyClass,
            ) {
                RenderPipelineDescriptor_setInputPrimitiveTopology(self, inputPrimitiveTopology)
            }
            #[inline]
            pub unsafe fn tessellationPartitionMode(&self) -> root::MTL::TessellationPartitionMode {
                RenderPipelineDescriptor_tessellationPartitionMode(self)
            }
            #[inline]
            pub unsafe fn setTessellationPartitionMode(
                &mut self,
                tessellationPartitionMode: root::MTL::TessellationPartitionMode,
            ) {
                RenderPipelineDescriptor_setTessellationPartitionMode(
                    self,
                    tessellationPartitionMode,
                )
            }
            #[inline]
            pub unsafe fn maxTessellationFactor(&self) -> root::NS::UInteger {
                RenderPipelineDescriptor_maxTessellationFactor(self)
            }
            #[inline]
            pub unsafe fn setMaxTessellationFactor(
                &mut self,
                maxTessellationFactor: root::NS::UInteger,
            ) {
                RenderPipelineDescriptor_setMaxTessellationFactor(self, maxTessellationFactor)
            }
            #[inline]
            pub unsafe fn tessellationFactorScaleEnabled(&self) -> bool {
                RenderPipelineDescriptor_tessellationFactorScaleEnabled(self)
            }
            #[inline]
            pub unsafe fn setTessellationFactorScaleEnabled(
                &mut self,
                tessellationFactorScaleEnabled: bool,
            ) {
                RenderPipelineDescriptor_setTessellationFactorScaleEnabled(
                    self,
                    tessellationFactorScaleEnabled,
                )
            }
            #[inline]
            pub unsafe fn tessellationFactorFormat(&self) -> root::MTL::TessellationFactorFormat {
                RenderPipelineDescriptor_tessellationFactorFormat(self)
            }
            #[inline]
            pub unsafe fn setTessellationFactorFormat(
                &mut self,
                tessellationFactorFormat: root::MTL::TessellationFactorFormat,
            ) {
                RenderPipelineDescriptor_setTessellationFactorFormat(self, tessellationFactorFormat)
            }
            #[inline]
            pub unsafe fn tessellationControlPointIndexType(
                &self,
            ) -> root::MTL::TessellationControlPointIndexType {
                RenderPipelineDescriptor_tessellationControlPointIndexType(self)
            }
            #[inline]
            pub unsafe fn setTessellationControlPointIndexType(
                &mut self,
                tessellationControlPointIndexType: root::MTL::TessellationControlPointIndexType,
            ) {
                RenderPipelineDescriptor_setTessellationControlPointIndexType(
                    self,
                    tessellationControlPointIndexType,
                )
            }
            #[inline]
            pub unsafe fn tessellationFactorStepFunction(
                &self,
            ) -> root::MTL::TessellationFactorStepFunction {
                RenderPipelineDescriptor_tessellationFactorStepFunction(self)
            }
            #[inline]
            pub unsafe fn setTessellationFactorStepFunction(
                &mut self,
                tessellationFactorStepFunction: root::MTL::TessellationFactorStepFunction,
            ) {
                RenderPipelineDescriptor_setTessellationFactorStepFunction(
                    self,
                    tessellationFactorStepFunction,
                )
            }
            #[inline]
            pub unsafe fn tessellationOutputWindingOrder(&self) -> root::MTL::Winding {
                RenderPipelineDescriptor_tessellationOutputWindingOrder(self)
            }
            #[inline]
            pub unsafe fn setTessellationOutputWindingOrder(
                &mut self,
                tessellationOutputWindingOrder: root::MTL::Winding,
            ) {
                RenderPipelineDescriptor_setTessellationOutputWindingOrder(
                    self,
                    tessellationOutputWindingOrder,
                )
            }
            #[inline]
            pub unsafe fn vertexBuffers(&self) -> *mut root::MTL::PipelineBufferDescriptorArray {
                RenderPipelineDescriptor_vertexBuffers(self)
            }
            #[inline]
            pub unsafe fn fragmentBuffers(&self) -> *mut root::MTL::PipelineBufferDescriptorArray {
                RenderPipelineDescriptor_fragmentBuffers(self)
            }
            #[inline]
            pub unsafe fn supportIndirectCommandBuffers(&self) -> bool {
                RenderPipelineDescriptor_supportIndirectCommandBuffers(self)
            }
            #[inline]
            pub unsafe fn setSupportIndirectCommandBuffers(
                &mut self,
                supportIndirectCommandBuffers: bool,
            ) {
                RenderPipelineDescriptor_setSupportIndirectCommandBuffers(
                    self,
                    supportIndirectCommandBuffers,
                )
            }
            #[inline]
            pub unsafe fn binaryArchives(&self) -> *mut root::NS::Array {
                RenderPipelineDescriptor_binaryArchives(self)
            }
            #[inline]
            pub unsafe fn setBinaryArchives(&mut self, binaryArchives: *const root::NS::Array) {
                RenderPipelineDescriptor_setBinaryArchives(self, binaryArchives)
            }
            #[inline]
            pub unsafe fn vertexPreloadedLibraries(&self) -> *mut root::NS::Array {
                RenderPipelineDescriptor_vertexPreloadedLibraries(self)
            }
            #[inline]
            pub unsafe fn setVertexPreloadedLibraries(
                &mut self,
                vertexPreloadedLibraries: *const root::NS::Array,
            ) {
                RenderPipelineDescriptor_setVertexPreloadedLibraries(self, vertexPreloadedLibraries)
            }
            #[inline]
            pub unsafe fn fragmentPreloadedLibraries(&self) -> *mut root::NS::Array {
                RenderPipelineDescriptor_fragmentPreloadedLibraries(self)
            }
            #[inline]
            pub unsafe fn setFragmentPreloadedLibraries(
                &mut self,
                fragmentPreloadedLibraries: *const root::NS::Array,
            ) {
                RenderPipelineDescriptor_setFragmentPreloadedLibraries(
                    self,
                    fragmentPreloadedLibraries,
                )
            }
            #[inline]
            pub unsafe fn vertexLinkedFunctions(&self) -> *mut root::MTL::LinkedFunctions {
                RenderPipelineDescriptor_vertexLinkedFunctions(self)
            }
            #[inline]
            pub unsafe fn setVertexLinkedFunctions(
                &mut self,
                vertexLinkedFunctions: *const root::MTL::LinkedFunctions,
            ) {
                RenderPipelineDescriptor_setVertexLinkedFunctions(self, vertexLinkedFunctions)
            }
            #[inline]
            pub unsafe fn fragmentLinkedFunctions(&self) -> *mut root::MTL::LinkedFunctions {
                RenderPipelineDescriptor_fragmentLinkedFunctions(self)
            }
            #[inline]
            pub unsafe fn setFragmentLinkedFunctions(
                &mut self,
                fragmentLinkedFunctions: *const root::MTL::LinkedFunctions,
            ) {
                RenderPipelineDescriptor_setFragmentLinkedFunctions(self, fragmentLinkedFunctions)
            }
            #[inline]
            pub unsafe fn supportAddingVertexBinaryFunctions(&self) -> bool {
                RenderPipelineDescriptor_supportAddingVertexBinaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setSupportAddingVertexBinaryFunctions(
                &mut self,
                supportAddingVertexBinaryFunctions: bool,
            ) {
                RenderPipelineDescriptor_setSupportAddingVertexBinaryFunctions(
                    self,
                    supportAddingVertexBinaryFunctions,
                )
            }
            #[inline]
            pub unsafe fn supportAddingFragmentBinaryFunctions(&self) -> bool {
                RenderPipelineDescriptor_supportAddingFragmentBinaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setSupportAddingFragmentBinaryFunctions(
                &mut self,
                supportAddingFragmentBinaryFunctions: bool,
            ) {
                RenderPipelineDescriptor_setSupportAddingFragmentBinaryFunctions(
                    self,
                    supportAddingFragmentBinaryFunctions,
                )
            }
            #[inline]
            pub unsafe fn maxVertexCallStackDepth(&self) -> root::NS::UInteger {
                RenderPipelineDescriptor_maxVertexCallStackDepth(self)
            }
            #[inline]
            pub unsafe fn setMaxVertexCallStackDepth(
                &mut self,
                maxVertexCallStackDepth: root::NS::UInteger,
            ) {
                RenderPipelineDescriptor_setMaxVertexCallStackDepth(self, maxVertexCallStackDepth)
            }
            #[inline]
            pub unsafe fn maxFragmentCallStackDepth(&self) -> root::NS::UInteger {
                RenderPipelineDescriptor_maxFragmentCallStackDepth(self)
            }
            #[inline]
            pub unsafe fn setMaxFragmentCallStackDepth(
                &mut self,
                maxFragmentCallStackDepth: root::NS::UInteger,
            ) {
                RenderPipelineDescriptor_setMaxFragmentCallStackDepth(
                    self,
                    maxFragmentCallStackDepth,
                )
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                RenderPipelineDescriptor_reset(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPipelineFunctionsDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33RenderPipelineFunctionsDescriptor5allocEv"]
            pub fn RenderPipelineFunctionsDescriptor_alloc(
            ) -> *mut root::MTL::RenderPipelineFunctionsDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33RenderPipelineFunctionsDescriptor4initEv"]
            pub fn RenderPipelineFunctionsDescriptor_init(
                this: *mut root::MTL::RenderPipelineFunctionsDescriptor,
            ) -> *mut root::MTL::RenderPipelineFunctionsDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL33RenderPipelineFunctionsDescriptor31vertexAdditionalBinaryFunctionsEv"]
            pub fn RenderPipelineFunctionsDescriptor_vertexAdditionalBinaryFunctions(
                this: *const root::MTL::RenderPipelineFunctionsDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33RenderPipelineFunctionsDescriptor34setVertexAdditionalBinaryFunctionsEPKN2NS5ArrayE"]
            pub fn RenderPipelineFunctionsDescriptor_setVertexAdditionalBinaryFunctions(
                this: *mut root::MTL::RenderPipelineFunctionsDescriptor,
                vertexAdditionalBinaryFunctions: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL33RenderPipelineFunctionsDescriptor33fragmentAdditionalBinaryFunctionsEv"]
            pub fn RenderPipelineFunctionsDescriptor_fragmentAdditionalBinaryFunctions(
                this: *const root::MTL::RenderPipelineFunctionsDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33RenderPipelineFunctionsDescriptor36setFragmentAdditionalBinaryFunctionsEPKN2NS5ArrayE"]
            pub fn RenderPipelineFunctionsDescriptor_setFragmentAdditionalBinaryFunctions(
                this: *mut root::MTL::RenderPipelineFunctionsDescriptor,
                fragmentAdditionalBinaryFunctions: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL33RenderPipelineFunctionsDescriptor29tileAdditionalBinaryFunctionsEv"]
            pub fn RenderPipelineFunctionsDescriptor_tileAdditionalBinaryFunctions(
                this: *const root::MTL::RenderPipelineFunctionsDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33RenderPipelineFunctionsDescriptor32setTileAdditionalBinaryFunctionsEPKN2NS5ArrayE"]
            pub fn RenderPipelineFunctionsDescriptor_setTileAdditionalBinaryFunctions(
                this: *mut root::MTL::RenderPipelineFunctionsDescriptor,
                tileAdditionalBinaryFunctions: *const root::NS::Array,
            );
        }
        impl RenderPipelineFunctionsDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPipelineFunctionsDescriptor {
                RenderPipelineFunctionsDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RenderPipelineFunctionsDescriptor {
                RenderPipelineFunctionsDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn vertexAdditionalBinaryFunctions(&self) -> *mut root::NS::Array {
                RenderPipelineFunctionsDescriptor_vertexAdditionalBinaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setVertexAdditionalBinaryFunctions(
                &mut self,
                vertexAdditionalBinaryFunctions: *const root::NS::Array,
            ) {
                RenderPipelineFunctionsDescriptor_setVertexAdditionalBinaryFunctions(
                    self,
                    vertexAdditionalBinaryFunctions,
                )
            }
            #[inline]
            pub unsafe fn fragmentAdditionalBinaryFunctions(&self) -> *mut root::NS::Array {
                RenderPipelineFunctionsDescriptor_fragmentAdditionalBinaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setFragmentAdditionalBinaryFunctions(
                &mut self,
                fragmentAdditionalBinaryFunctions: *const root::NS::Array,
            ) {
                RenderPipelineFunctionsDescriptor_setFragmentAdditionalBinaryFunctions(
                    self,
                    fragmentAdditionalBinaryFunctions,
                )
            }
            #[inline]
            pub unsafe fn tileAdditionalBinaryFunctions(&self) -> *mut root::NS::Array {
                RenderPipelineFunctionsDescriptor_tileAdditionalBinaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setTileAdditionalBinaryFunctions(
                &mut self,
                tileAdditionalBinaryFunctions: *const root::NS::Array,
            ) {
                RenderPipelineFunctionsDescriptor_setTileAdditionalBinaryFunctions(
                    self,
                    tileAdditionalBinaryFunctions,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPipelineState {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19RenderPipelineState5labelEv"]
            pub fn RenderPipelineState_label(
                this: *const root::MTL::RenderPipelineState,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19RenderPipelineState6deviceEv"]
            pub fn RenderPipelineState_device(
                this: *const root::MTL::RenderPipelineState,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19RenderPipelineState29maxTotalThreadsPerThreadgroupEv"]
            pub fn RenderPipelineState_maxTotalThreadsPerThreadgroup(
                this: *const root::MTL::RenderPipelineState,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19RenderPipelineState30threadgroupSizeMatchesTileSizeEv"]
            pub fn RenderPipelineState_threadgroupSizeMatchesTileSize(
                this: *const root::MTL::RenderPipelineState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19RenderPipelineState22imageblockSampleLengthEv"]
            pub fn RenderPipelineState_imageblockSampleLength(
                this: *const root::MTL::RenderPipelineState,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19RenderPipelineState22imageblockMemoryLengthENS_4SizeE"]
            pub fn RenderPipelineState_imageblockMemoryLength(
                this: *mut root::MTL::RenderPipelineState,
                imageblockDimensions: root::MTL::Size,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19RenderPipelineState29supportIndirectCommandBuffersEv"]
            pub fn RenderPipelineState_supportIndirectCommandBuffers(
                this: *const root::MTL::RenderPipelineState,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19RenderPipelineState14functionHandleEPKNS_8FunctionEm"]
            pub fn RenderPipelineState_functionHandle(
                this: *mut root::MTL::RenderPipelineState,
                function: *const root::MTL::Function,
                stage: root::MTL::RenderStages,
            ) -> *mut root::MTL::FunctionHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19RenderPipelineState23newVisibleFunctionTableEPKNS_30VisibleFunctionTableDescriptorEm"]
            pub fn RenderPipelineState_newVisibleFunctionTable(
                this: *mut root::MTL::RenderPipelineState,
                descriptor: *const root::MTL::VisibleFunctionTableDescriptor,
                stage: root::MTL::RenderStages,
            ) -> *mut root::MTL::VisibleFunctionTable;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19RenderPipelineState28newIntersectionFunctionTableEPKNS_35IntersectionFunctionTableDescriptorEm"]
            pub fn RenderPipelineState_newIntersectionFunctionTable(
                this: *mut root::MTL::RenderPipelineState,
                descriptor: *const root::MTL::IntersectionFunctionTableDescriptor,
                stage: root::MTL::RenderStages,
            ) -> *mut root::MTL::IntersectionFunctionTable;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19RenderPipelineState22newRenderPipelineStateEPKNS_33RenderPipelineFunctionsDescriptorEPPN2NS5ErrorE"]
            pub fn RenderPipelineState_newRenderPipelineState(
                this: *mut root::MTL::RenderPipelineState,
                additionalBinaryFunctions: *const root::MTL::RenderPipelineFunctionsDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState;
        }
        impl RenderPipelineState {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                RenderPipelineState_label(self)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                RenderPipelineState_device(self)
            }
            #[inline]
            pub unsafe fn maxTotalThreadsPerThreadgroup(&self) -> root::NS::UInteger {
                RenderPipelineState_maxTotalThreadsPerThreadgroup(self)
            }
            #[inline]
            pub unsafe fn threadgroupSizeMatchesTileSize(&self) -> bool {
                RenderPipelineState_threadgroupSizeMatchesTileSize(self)
            }
            #[inline]
            pub unsafe fn imageblockSampleLength(&self) -> root::NS::UInteger {
                RenderPipelineState_imageblockSampleLength(self)
            }
            #[inline]
            pub unsafe fn imageblockMemoryLength(
                &mut self,
                imageblockDimensions: root::MTL::Size,
            ) -> root::NS::UInteger {
                RenderPipelineState_imageblockMemoryLength(self, imageblockDimensions)
            }
            #[inline]
            pub unsafe fn supportIndirectCommandBuffers(&self) -> bool {
                RenderPipelineState_supportIndirectCommandBuffers(self)
            }
            #[inline]
            pub unsafe fn functionHandle(
                &mut self,
                function: *const root::MTL::Function,
                stage: root::MTL::RenderStages,
            ) -> *mut root::MTL::FunctionHandle {
                RenderPipelineState_functionHandle(self, function, stage)
            }
            #[inline]
            pub unsafe fn newVisibleFunctionTable(
                &mut self,
                descriptor: *const root::MTL::VisibleFunctionTableDescriptor,
                stage: root::MTL::RenderStages,
            ) -> *mut root::MTL::VisibleFunctionTable {
                RenderPipelineState_newVisibleFunctionTable(self, descriptor, stage)
            }
            #[inline]
            pub unsafe fn newIntersectionFunctionTable(
                &mut self,
                descriptor: *const root::MTL::IntersectionFunctionTableDescriptor,
                stage: root::MTL::RenderStages,
            ) -> *mut root::MTL::IntersectionFunctionTable {
                RenderPipelineState_newIntersectionFunctionTable(self, descriptor, stage)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState(
                &mut self,
                additionalBinaryFunctions: *const root::MTL::RenderPipelineFunctionsDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState {
                RenderPipelineState_newRenderPipelineState(self, additionalBinaryFunctions, error)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RenderPipelineColorAttachmentDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL44RenderPipelineColorAttachmentDescriptorArray5allocEv"]
            pub fn RenderPipelineColorAttachmentDescriptorArray_alloc(
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL44RenderPipelineColorAttachmentDescriptorArray4initEv"]
            pub fn RenderPipelineColorAttachmentDescriptorArray_init(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL44RenderPipelineColorAttachmentDescriptorArray6objectEm"]
            pub fn RenderPipelineColorAttachmentDescriptorArray_object(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL44RenderPipelineColorAttachmentDescriptorArray9setObjectEPKNS_39RenderPipelineColorAttachmentDescriptorEm"]
            pub fn RenderPipelineColorAttachmentDescriptorArray_setObject(
                this: *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray,
                attachment: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            );
        }
        impl RenderPipelineColorAttachmentDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray {
                RenderPipelineColorAttachmentDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptorArray {
                RenderPipelineColorAttachmentDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RenderPipelineColorAttachmentDescriptor {
                RenderPipelineColorAttachmentDescriptorArray_object(self, attachmentIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attachment: *const root::MTL::RenderPipelineColorAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            ) {
                RenderPipelineColorAttachmentDescriptorArray_setObject(
                    self,
                    attachment,
                    attachmentIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct TileRenderPipelineColorAttachmentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43TileRenderPipelineColorAttachmentDescriptor5allocEv"]
            pub fn TileRenderPipelineColorAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43TileRenderPipelineColorAttachmentDescriptor4initEv"]
            pub fn TileRenderPipelineColorAttachmentDescriptor_init(
                this: *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL43TileRenderPipelineColorAttachmentDescriptor11pixelFormatEv"]
            pub fn TileRenderPipelineColorAttachmentDescriptor_pixelFormat(
                this: *const root::MTL::TileRenderPipelineColorAttachmentDescriptor,
            ) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43TileRenderPipelineColorAttachmentDescriptor14setPixelFormatENS_11PixelFormatE"]
            pub fn TileRenderPipelineColorAttachmentDescriptor_setPixelFormat(
                this: *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor,
                pixelFormat: root::MTL::PixelFormat,
            );
        }
        impl TileRenderPipelineColorAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor {
                TileRenderPipelineColorAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor {
                TileRenderPipelineColorAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn pixelFormat(&self) -> root::MTL::PixelFormat {
                TileRenderPipelineColorAttachmentDescriptor_pixelFormat(self)
            }
            #[inline]
            pub unsafe fn setPixelFormat(&mut self, pixelFormat: root::MTL::PixelFormat) {
                TileRenderPipelineColorAttachmentDescriptor_setPixelFormat(self, pixelFormat)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct TileRenderPipelineColorAttachmentDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48TileRenderPipelineColorAttachmentDescriptorArray5allocEv"]
            pub fn TileRenderPipelineColorAttachmentDescriptorArray_alloc(
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48TileRenderPipelineColorAttachmentDescriptorArray4initEv"]
            pub fn TileRenderPipelineColorAttachmentDescriptorArray_init(
                this: *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48TileRenderPipelineColorAttachmentDescriptorArray6objectEm"]
            pub fn TileRenderPipelineColorAttachmentDescriptorArray_object(
                this: *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48TileRenderPipelineColorAttachmentDescriptorArray9setObjectEPKNS_43TileRenderPipelineColorAttachmentDescriptorEm"]
            pub fn TileRenderPipelineColorAttachmentDescriptorArray_setObject(
                this: *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray,
                attachment: *const root::MTL::TileRenderPipelineColorAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            );
        }
        impl TileRenderPipelineColorAttachmentDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray
            {
                TileRenderPipelineColorAttachmentDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray {
                TileRenderPipelineColorAttachmentDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptor {
                TileRenderPipelineColorAttachmentDescriptorArray_object(self, attachmentIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attachment: *const root::MTL::TileRenderPipelineColorAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            ) {
                TileRenderPipelineColorAttachmentDescriptorArray_setObject(
                    self,
                    attachment,
                    attachmentIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct TileRenderPipelineDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor5allocEv"]
            pub fn TileRenderPipelineDescriptor_alloc(
            ) -> *mut root::MTL::TileRenderPipelineDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor4initEv"]
            pub fn TileRenderPipelineDescriptor_init(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::MTL::TileRenderPipelineDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor5labelEv"]
            pub fn TileRenderPipelineDescriptor_label(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor8setLabelEPKN2NS6StringE"]
            pub fn TileRenderPipelineDescriptor_setLabel(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor12tileFunctionEv"]
            pub fn TileRenderPipelineDescriptor_tileFunction(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor15setTileFunctionEPKNS_8FunctionE"]
            pub fn TileRenderPipelineDescriptor_setTileFunction(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                tileFunction: *const root::MTL::Function,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor17rasterSampleCountEv"]
            pub fn TileRenderPipelineDescriptor_rasterSampleCount(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor20setRasterSampleCountEm"]
            pub fn TileRenderPipelineDescriptor_setRasterSampleCount(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                rasterSampleCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor16colorAttachmentsEv"]
            pub fn TileRenderPipelineDescriptor_colorAttachments(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor30threadgroupSizeMatchesTileSizeEv"]
            pub fn TileRenderPipelineDescriptor_threadgroupSizeMatchesTileSize(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor33setThreadgroupSizeMatchesTileSizeEb"]
            pub fn TileRenderPipelineDescriptor_setThreadgroupSizeMatchesTileSize(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                threadgroupSizeMatchesTileSize: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor11tileBuffersEv"]
            pub fn TileRenderPipelineDescriptor_tileBuffers(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::MTL::PipelineBufferDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor29maxTotalThreadsPerThreadgroupEv"]
            pub fn TileRenderPipelineDescriptor_maxTotalThreadsPerThreadgroup(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor32setMaxTotalThreadsPerThreadgroupEm"]
            pub fn TileRenderPipelineDescriptor_setMaxTotalThreadsPerThreadgroup(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                maxTotalThreadsPerThreadgroup: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor14binaryArchivesEv"]
            pub fn TileRenderPipelineDescriptor_binaryArchives(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor17setBinaryArchivesEPKN2NS5ArrayE"]
            pub fn TileRenderPipelineDescriptor_setBinaryArchives(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                binaryArchives: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor18preloadedLibrariesEv"]
            pub fn TileRenderPipelineDescriptor_preloadedLibraries(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor21setPreloadedLibrariesEPKN2NS5ArrayE"]
            pub fn TileRenderPipelineDescriptor_setPreloadedLibraries(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                preloadedLibraries: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor15linkedFunctionsEv"]
            pub fn TileRenderPipelineDescriptor_linkedFunctions(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> *mut root::MTL::LinkedFunctions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor18setLinkedFunctionsEPKNS_15LinkedFunctionsE"]
            pub fn TileRenderPipelineDescriptor_setLinkedFunctions(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                linkedFunctions: *const root::MTL::LinkedFunctions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor28supportAddingBinaryFunctionsEv"]
            pub fn TileRenderPipelineDescriptor_supportAddingBinaryFunctions(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor31setSupportAddingBinaryFunctionsEb"]
            pub fn TileRenderPipelineDescriptor_setSupportAddingBinaryFunctions(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                supportAddingBinaryFunctions: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28TileRenderPipelineDescriptor17maxCallStackDepthEv"]
            pub fn TileRenderPipelineDescriptor_maxCallStackDepth(
                this: *const root::MTL::TileRenderPipelineDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor20setMaxCallStackDepthEm"]
            pub fn TileRenderPipelineDescriptor_setMaxCallStackDepth(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
                maxCallStackDepth: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28TileRenderPipelineDescriptor5resetEv"]
            pub fn TileRenderPipelineDescriptor_reset(
                this: *mut root::MTL::TileRenderPipelineDescriptor,
            );
        }
        impl TileRenderPipelineDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::TileRenderPipelineDescriptor {
                TileRenderPipelineDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::TileRenderPipelineDescriptor {
                TileRenderPipelineDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                TileRenderPipelineDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                TileRenderPipelineDescriptor_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn tileFunction(&self) -> *mut root::MTL::Function {
                TileRenderPipelineDescriptor_tileFunction(self)
            }
            #[inline]
            pub unsafe fn setTileFunction(&mut self, tileFunction: *const root::MTL::Function) {
                TileRenderPipelineDescriptor_setTileFunction(self, tileFunction)
            }
            #[inline]
            pub unsafe fn rasterSampleCount(&self) -> root::NS::UInteger {
                TileRenderPipelineDescriptor_rasterSampleCount(self)
            }
            #[inline]
            pub unsafe fn setRasterSampleCount(&mut self, rasterSampleCount: root::NS::UInteger) {
                TileRenderPipelineDescriptor_setRasterSampleCount(self, rasterSampleCount)
            }
            #[inline]
            pub unsafe fn colorAttachments(
                &self,
            ) -> *mut root::MTL::TileRenderPipelineColorAttachmentDescriptorArray {
                TileRenderPipelineDescriptor_colorAttachments(self)
            }
            #[inline]
            pub unsafe fn threadgroupSizeMatchesTileSize(&self) -> bool {
                TileRenderPipelineDescriptor_threadgroupSizeMatchesTileSize(self)
            }
            #[inline]
            pub unsafe fn setThreadgroupSizeMatchesTileSize(
                &mut self,
                threadgroupSizeMatchesTileSize: bool,
            ) {
                TileRenderPipelineDescriptor_setThreadgroupSizeMatchesTileSize(
                    self,
                    threadgroupSizeMatchesTileSize,
                )
            }
            #[inline]
            pub unsafe fn tileBuffers(&self) -> *mut root::MTL::PipelineBufferDescriptorArray {
                TileRenderPipelineDescriptor_tileBuffers(self)
            }
            #[inline]
            pub unsafe fn maxTotalThreadsPerThreadgroup(&self) -> root::NS::UInteger {
                TileRenderPipelineDescriptor_maxTotalThreadsPerThreadgroup(self)
            }
            #[inline]
            pub unsafe fn setMaxTotalThreadsPerThreadgroup(
                &mut self,
                maxTotalThreadsPerThreadgroup: root::NS::UInteger,
            ) {
                TileRenderPipelineDescriptor_setMaxTotalThreadsPerThreadgroup(
                    self,
                    maxTotalThreadsPerThreadgroup,
                )
            }
            #[inline]
            pub unsafe fn binaryArchives(&self) -> *mut root::NS::Array {
                TileRenderPipelineDescriptor_binaryArchives(self)
            }
            #[inline]
            pub unsafe fn setBinaryArchives(&mut self, binaryArchives: *const root::NS::Array) {
                TileRenderPipelineDescriptor_setBinaryArchives(self, binaryArchives)
            }
            #[inline]
            pub unsafe fn preloadedLibraries(&self) -> *mut root::NS::Array {
                TileRenderPipelineDescriptor_preloadedLibraries(self)
            }
            #[inline]
            pub unsafe fn setPreloadedLibraries(
                &mut self,
                preloadedLibraries: *const root::NS::Array,
            ) {
                TileRenderPipelineDescriptor_setPreloadedLibraries(self, preloadedLibraries)
            }
            #[inline]
            pub unsafe fn linkedFunctions(&self) -> *mut root::MTL::LinkedFunctions {
                TileRenderPipelineDescriptor_linkedFunctions(self)
            }
            #[inline]
            pub unsafe fn setLinkedFunctions(
                &mut self,
                linkedFunctions: *const root::MTL::LinkedFunctions,
            ) {
                TileRenderPipelineDescriptor_setLinkedFunctions(self, linkedFunctions)
            }
            #[inline]
            pub unsafe fn supportAddingBinaryFunctions(&self) -> bool {
                TileRenderPipelineDescriptor_supportAddingBinaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setSupportAddingBinaryFunctions(
                &mut self,
                supportAddingBinaryFunctions: bool,
            ) {
                TileRenderPipelineDescriptor_setSupportAddingBinaryFunctions(
                    self,
                    supportAddingBinaryFunctions,
                )
            }
            #[inline]
            pub unsafe fn maxCallStackDepth(&self) -> root::NS::UInteger {
                TileRenderPipelineDescriptor_maxCallStackDepth(self)
            }
            #[inline]
            pub unsafe fn setMaxCallStackDepth(&mut self, maxCallStackDepth: root::NS::UInteger) {
                TileRenderPipelineDescriptor_setMaxCallStackDepth(self, maxCallStackDepth)
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                TileRenderPipelineDescriptor_reset(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ArgumentEncoder {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15ArgumentEncoder6deviceEv"]
            pub fn ArgumentEncoder_device(
                this: *const root::MTL::ArgumentEncoder,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15ArgumentEncoder5labelEv"]
            pub fn ArgumentEncoder_label(
                this: *const root::MTL::ArgumentEncoder,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder8setLabelEPKN2NS6StringE"]
            pub fn ArgumentEncoder_setLabel(
                this: *mut root::MTL::ArgumentEncoder,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15ArgumentEncoder13encodedLengthEv"]
            pub fn ArgumentEncoder_encodedLength(
                this: *const root::MTL::ArgumentEncoder,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15ArgumentEncoder9alignmentEv"]
            pub fn ArgumentEncoder_alignment(
                this: *const root::MTL::ArgumentEncoder,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder17setArgumentBufferEPKNS_6BufferEm"]
            pub fn ArgumentEncoder_setArgumentBuffer(
                this: *mut root::MTL::ArgumentEncoder,
                argumentBuffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder17setArgumentBufferEPKNS_6BufferEmm"]
            pub fn ArgumentEncoder_setArgumentBuffer1(
                this: *mut root::MTL::ArgumentEncoder,
                argumentBuffer: *const root::MTL::Buffer,
                startOffset: root::NS::UInteger,
                arrayElement: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder9setBufferEPKNS_6BufferEmm"]
            pub fn ArgumentEncoder_setBuffer(
                this: *mut root::MTL::ArgumentEncoder,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder10setBuffersEPPNS_6BufferEPKmN2NS5RangeE"]
            pub fn ArgumentEncoder_setBuffers(
                this: *mut root::MTL::ArgumentEncoder,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder10setTextureEPKNS_7TextureEm"]
            pub fn ArgumentEncoder_setTexture(
                this: *mut root::MTL::ArgumentEncoder,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder11setTexturesEPPNS_7TextureEN2NS5RangeE"]
            pub fn ArgumentEncoder_setTextures(
                this: *mut root::MTL::ArgumentEncoder,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder15setSamplerStateEPKNS_12SamplerStateEm"]
            pub fn ArgumentEncoder_setSamplerState(
                this: *mut root::MTL::ArgumentEncoder,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder16setSamplerStatesEPPNS_12SamplerStateEN2NS5RangeE"]
            pub fn ArgumentEncoder_setSamplerStates(
                this: *mut root::MTL::ArgumentEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder12constantDataEm"]
            pub fn ArgumentEncoder_constantData(
                this: *mut root::MTL::ArgumentEncoder,
                index: root::NS::UInteger,
            ) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder22setRenderPipelineStateEPKNS_19RenderPipelineStateEm"]
            pub fn ArgumentEncoder_setRenderPipelineState(
                this: *mut root::MTL::ArgumentEncoder,
                pipeline: *const root::MTL::RenderPipelineState,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder23setRenderPipelineStatesEPNS_19RenderPipelineStateEN2NS5RangeE"]
            pub fn ArgumentEncoder_setRenderPipelineStates(
                this: *mut root::MTL::ArgumentEncoder,
                pipelines: *mut root::MTL::RenderPipelineState,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder23setComputePipelineStateEPKNS_20ComputePipelineStateEm"]
            pub fn ArgumentEncoder_setComputePipelineState(
                this: *mut root::MTL::ArgumentEncoder,
                pipeline: *const root::MTL::ComputePipelineState,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder24setComputePipelineStatesEPNS_20ComputePipelineStateEN2NS5RangeE"]
            pub fn ArgumentEncoder_setComputePipelineStates(
                this: *mut root::MTL::ArgumentEncoder,
                pipelines: *mut root::MTL::ComputePipelineState,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder24setIndirectCommandBufferEPKNS_21IndirectCommandBufferEm"]
            pub fn ArgumentEncoder_setIndirectCommandBuffer(
                this: *mut root::MTL::ArgumentEncoder,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder25setIndirectCommandBuffersEPNS_21IndirectCommandBufferEN2NS5RangeE"]
            pub fn ArgumentEncoder_setIndirectCommandBuffers(
                this: *mut root::MTL::ArgumentEncoder,
                buffers: *mut root::MTL::IndirectCommandBuffer,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder24setAccelerationStructureEPKNS_21AccelerationStructureEm"]
            pub fn ArgumentEncoder_setAccelerationStructure(
                this: *mut root::MTL::ArgumentEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder18newArgumentEncoderEm"]
            pub fn ArgumentEncoder_newArgumentEncoder(
                this: *mut root::MTL::ArgumentEncoder,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::ArgumentEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder23setVisibleFunctionTableEPKNS_20VisibleFunctionTableEm"]
            pub fn ArgumentEncoder_setVisibleFunctionTable(
                this: *mut root::MTL::ArgumentEncoder,
                visibleFunctionTable: *const root::MTL::VisibleFunctionTable,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder24setVisibleFunctionTablesEPPKNS_20VisibleFunctionTableEN2NS5RangeE"]
            pub fn ArgumentEncoder_setVisibleFunctionTables(
                this: *mut root::MTL::ArgumentEncoder,
                visibleFunctionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder28setIntersectionFunctionTableEPKNS_25IntersectionFunctionTableEm"]
            pub fn ArgumentEncoder_setIntersectionFunctionTable(
                this: *mut root::MTL::ArgumentEncoder,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15ArgumentEncoder29setIntersectionFunctionTablesEPPKNS_25IntersectionFunctionTableEN2NS5RangeE"]
            pub fn ArgumentEncoder_setIntersectionFunctionTables(
                this: *mut root::MTL::ArgumentEncoder,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            );
        }
        impl ArgumentEncoder {
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                ArgumentEncoder_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                ArgumentEncoder_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                ArgumentEncoder_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn encodedLength(&self) -> root::NS::UInteger {
                ArgumentEncoder_encodedLength(self)
            }
            #[inline]
            pub unsafe fn alignment(&self) -> root::NS::UInteger {
                ArgumentEncoder_alignment(self)
            }
            #[inline]
            pub unsafe fn setArgumentBuffer(
                &mut self,
                argumentBuffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
            ) {
                ArgumentEncoder_setArgumentBuffer(self, argumentBuffer, offset)
            }
            #[inline]
            pub unsafe fn setArgumentBuffer1(
                &mut self,
                argumentBuffer: *const root::MTL::Buffer,
                startOffset: root::NS::UInteger,
                arrayElement: root::NS::UInteger,
            ) {
                ArgumentEncoder_setArgumentBuffer1(self, argumentBuffer, startOffset, arrayElement)
            }
            #[inline]
            pub unsafe fn setBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn setBuffers(
                &mut self,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setBuffers(self, buffers, offsets, range)
            }
            #[inline]
            pub unsafe fn setTexture(
                &mut self,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setTexture(self, texture, index)
            }
            #[inline]
            pub unsafe fn setTextures(
                &mut self,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setTextures(self, textures, range)
            }
            #[inline]
            pub unsafe fn setSamplerState(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setSamplerState(self, sampler, index)
            }
            #[inline]
            pub unsafe fn setSamplerStates(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setSamplerStates(self, samplers, range)
            }
            #[inline]
            pub unsafe fn constantData(
                &mut self,
                index: root::NS::UInteger,
            ) -> *mut ::std::os::raw::c_void {
                ArgumentEncoder_constantData(self, index)
            }
            #[inline]
            pub unsafe fn setRenderPipelineState(
                &mut self,
                pipeline: *const root::MTL::RenderPipelineState,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setRenderPipelineState(self, pipeline, index)
            }
            #[inline]
            pub unsafe fn setRenderPipelineStates(
                &mut self,
                pipelines: *mut root::MTL::RenderPipelineState,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setRenderPipelineStates(self, pipelines, range)
            }
            #[inline]
            pub unsafe fn setComputePipelineState(
                &mut self,
                pipeline: *const root::MTL::ComputePipelineState,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setComputePipelineState(self, pipeline, index)
            }
            #[inline]
            pub unsafe fn setComputePipelineStates(
                &mut self,
                pipelines: *mut root::MTL::ComputePipelineState,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setComputePipelineStates(self, pipelines, range)
            }
            #[inline]
            pub unsafe fn setIndirectCommandBuffer(
                &mut self,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setIndirectCommandBuffer(self, indirectCommandBuffer, index)
            }
            #[inline]
            pub unsafe fn setIndirectCommandBuffers(
                &mut self,
                buffers: *mut root::MTL::IndirectCommandBuffer,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setIndirectCommandBuffers(self, buffers, range)
            }
            #[inline]
            pub unsafe fn setAccelerationStructure(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setAccelerationStructure(self, accelerationStructure, index)
            }
            #[inline]
            pub unsafe fn newArgumentEncoder(
                &mut self,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::ArgumentEncoder {
                ArgumentEncoder_newArgumentEncoder(self, index)
            }
            #[inline]
            pub unsafe fn setVisibleFunctionTable(
                &mut self,
                visibleFunctionTable: *const root::MTL::VisibleFunctionTable,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setVisibleFunctionTable(self, visibleFunctionTable, index)
            }
            #[inline]
            pub unsafe fn setVisibleFunctionTables(
                &mut self,
                visibleFunctionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setVisibleFunctionTables(self, visibleFunctionTables, range)
            }
            #[inline]
            pub unsafe fn setIntersectionFunctionTable(
                &mut self,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                index: root::NS::UInteger,
            ) {
                ArgumentEncoder_setIntersectionFunctionTable(self, intersectionFunctionTable, index)
            }
            #[inline]
            pub unsafe fn setIntersectionFunctionTables(
                &mut self,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            ) {
                ArgumentEncoder_setIntersectionFunctionTables(
                    self,
                    intersectionFunctionTables,
                    range,
                )
            }
        }
        pub const BinaryArchiveError_BinaryArchiveErrorNone: root::MTL::BinaryArchiveError = 0;
        pub const BinaryArchiveError_BinaryArchiveErrorInvalidFile: root::MTL::BinaryArchiveError =
            1;
        pub const BinaryArchiveError_BinaryArchiveErrorUnexpectedElement:
            root::MTL::BinaryArchiveError = 2;
        pub const BinaryArchiveError_BinaryArchiveErrorCompilationFailure:
            root::MTL::BinaryArchiveError = 3;
        pub type BinaryArchiveError = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct BinaryArchiveDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL23BinaryArchiveDescriptor5allocEv"]
            pub fn BinaryArchiveDescriptor_alloc() -> *mut root::MTL::BinaryArchiveDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL23BinaryArchiveDescriptor4initEv"]
            pub fn BinaryArchiveDescriptor_init(
                this: *mut root::MTL::BinaryArchiveDescriptor,
            ) -> *mut root::MTL::BinaryArchiveDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL23BinaryArchiveDescriptor3urlEv"]
            pub fn BinaryArchiveDescriptor_url(
                this: *const root::MTL::BinaryArchiveDescriptor,
            ) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL23BinaryArchiveDescriptor6setUrlEPKN2NS3URLE"]
            pub fn BinaryArchiveDescriptor_setUrl(
                this: *mut root::MTL::BinaryArchiveDescriptor,
                url: *const root::NS::URL,
            );
        }
        impl BinaryArchiveDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::BinaryArchiveDescriptor {
                BinaryArchiveDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::BinaryArchiveDescriptor {
                BinaryArchiveDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn url(&self) -> *mut root::NS::URL {
                BinaryArchiveDescriptor_url(self)
            }
            #[inline]
            pub unsafe fn setUrl(&mut self, url: *const root::NS::URL) {
                BinaryArchiveDescriptor_setUrl(self, url)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct BinaryArchive {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13BinaryArchive5labelEv"]
            pub fn BinaryArchive_label(
                this: *const root::MTL::BinaryArchive,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13BinaryArchive8setLabelEPKN2NS6StringE"]
            pub fn BinaryArchive_setLabel(
                this: *mut root::MTL::BinaryArchive,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13BinaryArchive6deviceEv"]
            pub fn BinaryArchive_device(
                this: *const root::MTL::BinaryArchive,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13BinaryArchive27addComputePipelineFunctionsEPKNS_25ComputePipelineDescriptorEPPN2NS5ErrorE"]
            pub fn BinaryArchive_addComputePipelineFunctions(
                this: *mut root::MTL::BinaryArchive,
                descriptor: *const root::MTL::ComputePipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13BinaryArchive26addRenderPipelineFunctionsEPKNS_24RenderPipelineDescriptorEPPN2NS5ErrorE"]
            pub fn BinaryArchive_addRenderPipelineFunctions(
                this: *mut root::MTL::BinaryArchive,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13BinaryArchive30addTileRenderPipelineFunctionsEPKNS_28TileRenderPipelineDescriptorEPPN2NS5ErrorE"]
            pub fn BinaryArchive_addTileRenderPipelineFunctions(
                this: *mut root::MTL::BinaryArchive,
                descriptor: *const root::MTL::TileRenderPipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13BinaryArchive14serializeToURLEPKN2NS3URLEPPNS1_5ErrorE"]
            pub fn BinaryArchive_serializeToURL(
                this: *mut root::MTL::BinaryArchive,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13BinaryArchive11addFunctionEPKNS_18FunctionDescriptorEPKNS_7LibraryEPPN2NS5ErrorE"]
            pub fn BinaryArchive_addFunction(
                this: *mut root::MTL::BinaryArchive,
                descriptor: *const root::MTL::FunctionDescriptor,
                library: *const root::MTL::Library,
                error: *mut *mut root::NS::Error,
            ) -> bool;
        }
        impl BinaryArchive {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                BinaryArchive_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                BinaryArchive_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                BinaryArchive_device(self)
            }
            #[inline]
            pub unsafe fn addComputePipelineFunctions(
                &mut self,
                descriptor: *const root::MTL::ComputePipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool {
                BinaryArchive_addComputePipelineFunctions(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn addRenderPipelineFunctions(
                &mut self,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool {
                BinaryArchive_addRenderPipelineFunctions(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn addTileRenderPipelineFunctions(
                &mut self,
                descriptor: *const root::MTL::TileRenderPipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool {
                BinaryArchive_addTileRenderPipelineFunctions(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn serializeToURL(
                &mut self,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> bool {
                BinaryArchive_serializeToURL(self, url, error)
            }
            #[inline]
            pub unsafe fn addFunction(
                &mut self,
                descriptor: *const root::MTL::FunctionDescriptor,
                library: *const root::MTL::Library,
                error: *mut *mut root::NS::Error,
            ) -> bool {
                BinaryArchive_addFunction(self, descriptor, library, error)
            }
        }
        pub type BlitOption = root::NS::UInteger;
        pub const MTL_BlitOptionNone: root::MTL::BlitOption = 0;
        pub const MTL_BlitOptionDepthFromDepthStencil: root::MTL::BlitOption = 1;
        pub const MTL_BlitOptionStencilFromDepthStencil: root::MTL::BlitOption = 2;
        pub const MTL_BlitOptionRowLinearPVRTC: root::MTL::BlitOption = 4;
        pub type _bindgen_ty_13 = root::MTL::BlitOption;
        #[repr(C)]
        #[derive(Debug)]
        pub struct BlitCommandEncoder {
            pub _base: root::NS::Referencing<root::MTL::CommandEncoder>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder19synchronizeResourceEPKNS_8ResourceE"]
            pub fn BlitCommandEncoder_synchronizeResource(
                this: *mut root::MTL::BlitCommandEncoder,
                resource: *const root::MTL::Resource,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder18synchronizeTextureEPKNS_7TextureEmm"]
            pub fn BlitCommandEncoder_synchronizeTexture(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
                slice: root::NS::UInteger,
                level: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder15copyFromTextureEPKNS_7TextureEmmNS_6OriginENS_4SizeES3_mmS4_"]
            pub fn BlitCommandEncoder_copyFromTexture(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                sourceOrigin: root::MTL::Origin,
                sourceSize: root::MTL::Size,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                destinationOrigin: root::MTL::Origin,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder14copyFromBufferEPKNS_6BufferEmmmNS_4SizeEPKNS_7TextureEmmNS_6OriginE"]
            pub fn BlitCommandEncoder_copyFromBuffer(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceBuffer: *const root::MTL::Buffer,
                sourceOffset: root::NS::UInteger,
                sourceBytesPerRow: root::NS::UInteger,
                sourceBytesPerImage: root::NS::UInteger,
                sourceSize: root::MTL::Size,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                destinationOrigin: root::MTL::Origin,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder14copyFromBufferEPKNS_6BufferEmmmNS_4SizeEPKNS_7TextureEmmNS_6OriginEm"]
            pub fn BlitCommandEncoder_copyFromBuffer1(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceBuffer: *const root::MTL::Buffer,
                sourceOffset: root::NS::UInteger,
                sourceBytesPerRow: root::NS::UInteger,
                sourceBytesPerImage: root::NS::UInteger,
                sourceSize: root::MTL::Size,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                destinationOrigin: root::MTL::Origin,
                options: root::MTL::BlitOption,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder15copyFromTextureEPKNS_7TextureEmmNS_6OriginENS_4SizeEPKNS_6BufferEmmm"]
            pub fn BlitCommandEncoder_copyFromTexture1(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                sourceOrigin: root::MTL::Origin,
                sourceSize: root::MTL::Size,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
                destinationBytesPerRow: root::NS::UInteger,
                destinationBytesPerImage: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder15copyFromTextureEPKNS_7TextureEmmNS_6OriginENS_4SizeEPKNS_6BufferEmmmm"]
            pub fn BlitCommandEncoder_copyFromTexture2(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                sourceOrigin: root::MTL::Origin,
                sourceSize: root::MTL::Size,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
                destinationBytesPerRow: root::NS::UInteger,
                destinationBytesPerImage: root::NS::UInteger,
                options: root::MTL::BlitOption,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder15generateMipmapsEPKNS_7TextureE"]
            pub fn BlitCommandEncoder_generateMipmaps(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder10fillBufferEPKNS_6BufferEN2NS5RangeEh"]
            pub fn BlitCommandEncoder_fillBuffer(
                this: *mut root::MTL::BlitCommandEncoder,
                buffer: *const root::MTL::Buffer,
                range: root::NS::Range,
                value: u8,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder15copyFromTextureEPKNS_7TextureEmmS3_mmmm"]
            pub fn BlitCommandEncoder_copyFromTexture3(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                sliceCount: root::NS::UInteger,
                levelCount: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder15copyFromTextureEPKNS_7TextureES3_"]
            pub fn BlitCommandEncoder_copyFromTexture4(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceTexture: *const root::MTL::Texture,
                destinationTexture: *const root::MTL::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder14copyFromBufferEPKNS_6BufferEmS3_mm"]
            pub fn BlitCommandEncoder_copyFromBuffer2(
                this: *mut root::MTL::BlitCommandEncoder,
                sourceBuffer: *const root::MTL::Buffer,
                sourceOffset: root::NS::UInteger,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
                size: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder11updateFenceEPKNS_5FenceE"]
            pub fn BlitCommandEncoder_updateFence(
                this: *mut root::MTL::BlitCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder12waitForFenceEPKNS_5FenceE"]
            pub fn BlitCommandEncoder_waitForFence(
                this: *mut root::MTL::BlitCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder24getTextureAccessCountersEPKNS_7TextureENS_6RegionEmmbPKNS_6BufferEm"]
            pub fn BlitCommandEncoder_getTextureAccessCounters(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
                region: root::MTL::Region,
                mipLevel: root::NS::UInteger,
                slice: root::NS::UInteger,
                resetCounters: bool,
                countersBuffer: *const root::MTL::Buffer,
                countersBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder26resetTextureAccessCountersEPKNS_7TextureENS_6RegionEmm"]
            pub fn BlitCommandEncoder_resetTextureAccessCounters(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
                region: root::MTL::Region,
                mipLevel: root::NS::UInteger,
                slice: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder28optimizeContentsForGPUAccessEPKNS_7TextureE"]
            pub fn BlitCommandEncoder_optimizeContentsForGPUAccess(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder28optimizeContentsForGPUAccessEPKNS_7TextureEmm"]
            pub fn BlitCommandEncoder_optimizeContentsForGPUAccess1(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
                slice: root::NS::UInteger,
                level: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder28optimizeContentsForCPUAccessEPKNS_7TextureE"]
            pub fn BlitCommandEncoder_optimizeContentsForCPUAccess(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder28optimizeContentsForCPUAccessEPKNS_7TextureEmm"]
            pub fn BlitCommandEncoder_optimizeContentsForCPUAccess1(
                this: *mut root::MTL::BlitCommandEncoder,
                texture: *const root::MTL::Texture,
                slice: root::NS::UInteger,
                level: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder21resetCommandsInBufferEPKNS_21IndirectCommandBufferEN2NS5RangeE"]
            pub fn BlitCommandEncoder_resetCommandsInBuffer(
                this: *mut root::MTL::BlitCommandEncoder,
                buffer: *const root::MTL::IndirectCommandBuffer,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder25copyIndirectCommandBufferEPKNS_21IndirectCommandBufferEN2NS5RangeES3_m"]
            pub fn BlitCommandEncoder_copyIndirectCommandBuffer(
                this: *mut root::MTL::BlitCommandEncoder,
                source: *const root::MTL::IndirectCommandBuffer,
                sourceRange: root::NS::Range,
                destination: *const root::MTL::IndirectCommandBuffer,
                destinationIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder29optimizeIndirectCommandBufferEPKNS_21IndirectCommandBufferEN2NS5RangeE"]
            pub fn BlitCommandEncoder_optimizeIndirectCommandBuffer(
                this: *mut root::MTL::BlitCommandEncoder,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder22sampleCountersInBufferEPKNS_19CounterSampleBufferEmb"]
            pub fn BlitCommandEncoder_sampleCountersInBuffer(
                this: *mut root::MTL::BlitCommandEncoder,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitCommandEncoder15resolveCountersEPKNS_19CounterSampleBufferEN2NS5RangeEPKNS_6BufferEm"]
            pub fn BlitCommandEncoder_resolveCounters(
                this: *mut root::MTL::BlitCommandEncoder,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                range: root::NS::Range,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
            );
        }
        impl BlitCommandEncoder {
            #[inline]
            pub unsafe fn synchronizeResource(&mut self, resource: *const root::MTL::Resource) {
                BlitCommandEncoder_synchronizeResource(self, resource)
            }
            #[inline]
            pub unsafe fn synchronizeTexture(
                &mut self,
                texture: *const root::MTL::Texture,
                slice: root::NS::UInteger,
                level: root::NS::UInteger,
            ) {
                BlitCommandEncoder_synchronizeTexture(self, texture, slice, level)
            }
            #[inline]
            pub unsafe fn copyFromTexture(
                &mut self,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                sourceOrigin: root::MTL::Origin,
                sourceSize: root::MTL::Size,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                destinationOrigin: root::MTL::Origin,
            ) {
                BlitCommandEncoder_copyFromTexture(
                    self,
                    sourceTexture,
                    sourceSlice,
                    sourceLevel,
                    sourceOrigin,
                    sourceSize,
                    destinationTexture,
                    destinationSlice,
                    destinationLevel,
                    destinationOrigin,
                )
            }
            #[inline]
            pub unsafe fn copyFromBuffer(
                &mut self,
                sourceBuffer: *const root::MTL::Buffer,
                sourceOffset: root::NS::UInteger,
                sourceBytesPerRow: root::NS::UInteger,
                sourceBytesPerImage: root::NS::UInteger,
                sourceSize: root::MTL::Size,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                destinationOrigin: root::MTL::Origin,
            ) {
                BlitCommandEncoder_copyFromBuffer(
                    self,
                    sourceBuffer,
                    sourceOffset,
                    sourceBytesPerRow,
                    sourceBytesPerImage,
                    sourceSize,
                    destinationTexture,
                    destinationSlice,
                    destinationLevel,
                    destinationOrigin,
                )
            }
            #[inline]
            pub unsafe fn copyFromBuffer1(
                &mut self,
                sourceBuffer: *const root::MTL::Buffer,
                sourceOffset: root::NS::UInteger,
                sourceBytesPerRow: root::NS::UInteger,
                sourceBytesPerImage: root::NS::UInteger,
                sourceSize: root::MTL::Size,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                destinationOrigin: root::MTL::Origin,
                options: root::MTL::BlitOption,
            ) {
                BlitCommandEncoder_copyFromBuffer1(
                    self,
                    sourceBuffer,
                    sourceOffset,
                    sourceBytesPerRow,
                    sourceBytesPerImage,
                    sourceSize,
                    destinationTexture,
                    destinationSlice,
                    destinationLevel,
                    destinationOrigin,
                    options,
                )
            }
            #[inline]
            pub unsafe fn copyFromTexture1(
                &mut self,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                sourceOrigin: root::MTL::Origin,
                sourceSize: root::MTL::Size,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
                destinationBytesPerRow: root::NS::UInteger,
                destinationBytesPerImage: root::NS::UInteger,
            ) {
                BlitCommandEncoder_copyFromTexture1(
                    self,
                    sourceTexture,
                    sourceSlice,
                    sourceLevel,
                    sourceOrigin,
                    sourceSize,
                    destinationBuffer,
                    destinationOffset,
                    destinationBytesPerRow,
                    destinationBytesPerImage,
                )
            }
            #[inline]
            pub unsafe fn copyFromTexture2(
                &mut self,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                sourceOrigin: root::MTL::Origin,
                sourceSize: root::MTL::Size,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
                destinationBytesPerRow: root::NS::UInteger,
                destinationBytesPerImage: root::NS::UInteger,
                options: root::MTL::BlitOption,
            ) {
                BlitCommandEncoder_copyFromTexture2(
                    self,
                    sourceTexture,
                    sourceSlice,
                    sourceLevel,
                    sourceOrigin,
                    sourceSize,
                    destinationBuffer,
                    destinationOffset,
                    destinationBytesPerRow,
                    destinationBytesPerImage,
                    options,
                )
            }
            #[inline]
            pub unsafe fn generateMipmaps(&mut self, texture: *const root::MTL::Texture) {
                BlitCommandEncoder_generateMipmaps(self, texture)
            }
            #[inline]
            pub unsafe fn fillBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                range: root::NS::Range,
                value: u8,
            ) {
                BlitCommandEncoder_fillBuffer(self, buffer, range, value)
            }
            #[inline]
            pub unsafe fn copyFromTexture3(
                &mut self,
                sourceTexture: *const root::MTL::Texture,
                sourceSlice: root::NS::UInteger,
                sourceLevel: root::NS::UInteger,
                destinationTexture: *const root::MTL::Texture,
                destinationSlice: root::NS::UInteger,
                destinationLevel: root::NS::UInteger,
                sliceCount: root::NS::UInteger,
                levelCount: root::NS::UInteger,
            ) {
                BlitCommandEncoder_copyFromTexture3(
                    self,
                    sourceTexture,
                    sourceSlice,
                    sourceLevel,
                    destinationTexture,
                    destinationSlice,
                    destinationLevel,
                    sliceCount,
                    levelCount,
                )
            }
            #[inline]
            pub unsafe fn copyFromTexture4(
                &mut self,
                sourceTexture: *const root::MTL::Texture,
                destinationTexture: *const root::MTL::Texture,
            ) {
                BlitCommandEncoder_copyFromTexture4(self, sourceTexture, destinationTexture)
            }
            #[inline]
            pub unsafe fn copyFromBuffer2(
                &mut self,
                sourceBuffer: *const root::MTL::Buffer,
                sourceOffset: root::NS::UInteger,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
                size: root::NS::UInteger,
            ) {
                BlitCommandEncoder_copyFromBuffer2(
                    self,
                    sourceBuffer,
                    sourceOffset,
                    destinationBuffer,
                    destinationOffset,
                    size,
                )
            }
            #[inline]
            pub unsafe fn updateFence(&mut self, fence: *const root::MTL::Fence) {
                BlitCommandEncoder_updateFence(self, fence)
            }
            #[inline]
            pub unsafe fn waitForFence(&mut self, fence: *const root::MTL::Fence) {
                BlitCommandEncoder_waitForFence(self, fence)
            }
            #[inline]
            pub unsafe fn getTextureAccessCounters(
                &mut self,
                texture: *const root::MTL::Texture,
                region: root::MTL::Region,
                mipLevel: root::NS::UInteger,
                slice: root::NS::UInteger,
                resetCounters: bool,
                countersBuffer: *const root::MTL::Buffer,
                countersBufferOffset: root::NS::UInteger,
            ) {
                BlitCommandEncoder_getTextureAccessCounters(
                    self,
                    texture,
                    region,
                    mipLevel,
                    slice,
                    resetCounters,
                    countersBuffer,
                    countersBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn resetTextureAccessCounters(
                &mut self,
                texture: *const root::MTL::Texture,
                region: root::MTL::Region,
                mipLevel: root::NS::UInteger,
                slice: root::NS::UInteger,
            ) {
                BlitCommandEncoder_resetTextureAccessCounters(
                    self, texture, region, mipLevel, slice,
                )
            }
            #[inline]
            pub unsafe fn optimizeContentsForGPUAccess(
                &mut self,
                texture: *const root::MTL::Texture,
            ) {
                BlitCommandEncoder_optimizeContentsForGPUAccess(self, texture)
            }
            #[inline]
            pub unsafe fn optimizeContentsForGPUAccess1(
                &mut self,
                texture: *const root::MTL::Texture,
                slice: root::NS::UInteger,
                level: root::NS::UInteger,
            ) {
                BlitCommandEncoder_optimizeContentsForGPUAccess1(self, texture, slice, level)
            }
            #[inline]
            pub unsafe fn optimizeContentsForCPUAccess(
                &mut self,
                texture: *const root::MTL::Texture,
            ) {
                BlitCommandEncoder_optimizeContentsForCPUAccess(self, texture)
            }
            #[inline]
            pub unsafe fn optimizeContentsForCPUAccess1(
                &mut self,
                texture: *const root::MTL::Texture,
                slice: root::NS::UInteger,
                level: root::NS::UInteger,
            ) {
                BlitCommandEncoder_optimizeContentsForCPUAccess1(self, texture, slice, level)
            }
            #[inline]
            pub unsafe fn resetCommandsInBuffer(
                &mut self,
                buffer: *const root::MTL::IndirectCommandBuffer,
                range: root::NS::Range,
            ) {
                BlitCommandEncoder_resetCommandsInBuffer(self, buffer, range)
            }
            #[inline]
            pub unsafe fn copyIndirectCommandBuffer(
                &mut self,
                source: *const root::MTL::IndirectCommandBuffer,
                sourceRange: root::NS::Range,
                destination: *const root::MTL::IndirectCommandBuffer,
                destinationIndex: root::NS::UInteger,
            ) {
                BlitCommandEncoder_copyIndirectCommandBuffer(
                    self,
                    source,
                    sourceRange,
                    destination,
                    destinationIndex,
                )
            }
            #[inline]
            pub unsafe fn optimizeIndirectCommandBuffer(
                &mut self,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                range: root::NS::Range,
            ) {
                BlitCommandEncoder_optimizeIndirectCommandBuffer(self, indirectCommandBuffer, range)
            }
            #[inline]
            pub unsafe fn sampleCountersInBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            ) {
                BlitCommandEncoder_sampleCountersInBuffer(self, sampleBuffer, sampleIndex, barrier)
            }
            #[inline]
            pub unsafe fn resolveCounters(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                range: root::NS::Range,
                destinationBuffer: *const root::MTL::Buffer,
                destinationOffset: root::NS::UInteger,
            ) {
                BlitCommandEncoder_resolveCounters(
                    self,
                    sampleBuffer,
                    range,
                    destinationBuffer,
                    destinationOffset,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct BlitPassSampleBufferAttachmentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40BlitPassSampleBufferAttachmentDescriptor5allocEv"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40BlitPassSampleBufferAttachmentDescriptor4initEv"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_init(
                this: *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40BlitPassSampleBufferAttachmentDescriptor12sampleBufferEv"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_sampleBuffer(
                this: *const root::MTL::BlitPassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::CounterSampleBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40BlitPassSampleBufferAttachmentDescriptor15setSampleBufferEPKNS_19CounterSampleBufferE"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_setSampleBuffer(
                this: *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40BlitPassSampleBufferAttachmentDescriptor25startOfEncoderSampleIndexEv"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_startOfEncoderSampleIndex(
                this: *const root::MTL::BlitPassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40BlitPassSampleBufferAttachmentDescriptor28setStartOfEncoderSampleIndexEm"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_setStartOfEncoderSampleIndex(
                this: *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor,
                startOfEncoderSampleIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL40BlitPassSampleBufferAttachmentDescriptor23endOfEncoderSampleIndexEv"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_endOfEncoderSampleIndex(
                this: *const root::MTL::BlitPassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL40BlitPassSampleBufferAttachmentDescriptor26setEndOfEncoderSampleIndexEm"]
            pub fn BlitPassSampleBufferAttachmentDescriptor_setEndOfEncoderSampleIndex(
                this: *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor,
                endOfEncoderSampleIndex: root::NS::UInteger,
            );
        }
        impl BlitPassSampleBufferAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor {
                BlitPassSampleBufferAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor {
                BlitPassSampleBufferAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn sampleBuffer(&self) -> *mut root::MTL::CounterSampleBuffer {
                BlitPassSampleBufferAttachmentDescriptor_sampleBuffer(self)
            }
            #[inline]
            pub unsafe fn setSampleBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            ) {
                BlitPassSampleBufferAttachmentDescriptor_setSampleBuffer(self, sampleBuffer)
            }
            #[inline]
            pub unsafe fn startOfEncoderSampleIndex(&self) -> root::NS::UInteger {
                BlitPassSampleBufferAttachmentDescriptor_startOfEncoderSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setStartOfEncoderSampleIndex(
                &mut self,
                startOfEncoderSampleIndex: root::NS::UInteger,
            ) {
                BlitPassSampleBufferAttachmentDescriptor_setStartOfEncoderSampleIndex(
                    self,
                    startOfEncoderSampleIndex,
                )
            }
            #[inline]
            pub unsafe fn endOfEncoderSampleIndex(&self) -> root::NS::UInteger {
                BlitPassSampleBufferAttachmentDescriptor_endOfEncoderSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setEndOfEncoderSampleIndex(
                &mut self,
                endOfEncoderSampleIndex: root::NS::UInteger,
            ) {
                BlitPassSampleBufferAttachmentDescriptor_setEndOfEncoderSampleIndex(
                    self,
                    endOfEncoderSampleIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct BlitPassSampleBufferAttachmentDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL45BlitPassSampleBufferAttachmentDescriptorArray5allocEv"]
            pub fn BlitPassSampleBufferAttachmentDescriptorArray_alloc(
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL45BlitPassSampleBufferAttachmentDescriptorArray4initEv"]
            pub fn BlitPassSampleBufferAttachmentDescriptorArray_init(
                this: *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL45BlitPassSampleBufferAttachmentDescriptorArray6objectEm"]
            pub fn BlitPassSampleBufferAttachmentDescriptorArray_object(
                this: *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL45BlitPassSampleBufferAttachmentDescriptorArray9setObjectEPKNS_40BlitPassSampleBufferAttachmentDescriptorEm"]
            pub fn BlitPassSampleBufferAttachmentDescriptorArray_setObject(
                this: *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray,
                attachment: *const root::MTL::BlitPassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            );
        }
        impl BlitPassSampleBufferAttachmentDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray {
                BlitPassSampleBufferAttachmentDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray {
                BlitPassSampleBufferAttachmentDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptor {
                BlitPassSampleBufferAttachmentDescriptorArray_object(self, attachmentIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attachment: *const root::MTL::BlitPassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            ) {
                BlitPassSampleBufferAttachmentDescriptorArray_setObject(
                    self,
                    attachment,
                    attachmentIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct BlitPassDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitPassDescriptor5allocEv"]
            pub fn BlitPassDescriptor_alloc() -> *mut root::MTL::BlitPassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitPassDescriptor4initEv"]
            pub fn BlitPassDescriptor_init(
                this: *mut root::MTL::BlitPassDescriptor,
            ) -> *mut root::MTL::BlitPassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18BlitPassDescriptor18blitPassDescriptorEv"]
            pub fn BlitPassDescriptor_blitPassDescriptor() -> *mut root::MTL::BlitPassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18BlitPassDescriptor23sampleBufferAttachmentsEv"]
            pub fn BlitPassDescriptor_sampleBufferAttachments(
                this: *const root::MTL::BlitPassDescriptor,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray;
        }
        impl BlitPassDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::BlitPassDescriptor {
                BlitPassDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::BlitPassDescriptor {
                BlitPassDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn blitPassDescriptor() -> *mut root::MTL::BlitPassDescriptor {
                BlitPassDescriptor_blitPassDescriptor()
            }
            #[inline]
            pub unsafe fn sampleBufferAttachments(
                &self,
            ) -> *mut root::MTL::BlitPassSampleBufferAttachmentDescriptorArray {
                BlitPassDescriptor_sampleBufferAttachments(self)
            }
        }
        pub const CaptureError_CaptureErrorNotSupported: root::MTL::CaptureError = 1;
        pub const CaptureError_CaptureErrorAlreadyCapturing: root::MTL::CaptureError = 2;
        pub const CaptureError_CaptureErrorInvalidDescriptor: root::MTL::CaptureError = 3;
        pub type CaptureError = root::NS::Integer;
        pub const CaptureDestination_CaptureDestinationDeveloperTools:
            root::MTL::CaptureDestination = 1;
        pub const CaptureDestination_CaptureDestinationGPUTraceDocument:
            root::MTL::CaptureDestination = 2;
        pub type CaptureDestination = root::NS::Integer;
        #[repr(C)]
        #[derive(Debug)]
        pub struct CaptureDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17CaptureDescriptor5allocEv"]
            pub fn CaptureDescriptor_alloc() -> *mut root::MTL::CaptureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17CaptureDescriptor4initEv"]
            pub fn CaptureDescriptor_init(
                this: *mut root::MTL::CaptureDescriptor,
            ) -> *mut root::MTL::CaptureDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17CaptureDescriptor13captureObjectEv"]
            pub fn CaptureDescriptor_captureObject(
                this: *const root::MTL::CaptureDescriptor,
            ) -> root::id;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17CaptureDescriptor16setCaptureObjectEP11objc_object"]
            pub fn CaptureDescriptor_setCaptureObject(
                this: *mut root::MTL::CaptureDescriptor,
                captureObject: root::id,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17CaptureDescriptor11destinationEv"]
            pub fn CaptureDescriptor_destination(
                this: *const root::MTL::CaptureDescriptor,
            ) -> root::MTL::CaptureDestination;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17CaptureDescriptor14setDestinationENS_18CaptureDestinationE"]
            pub fn CaptureDescriptor_setDestination(
                this: *mut root::MTL::CaptureDescriptor,
                destination: root::MTL::CaptureDestination,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17CaptureDescriptor9outputURLEv"]
            pub fn CaptureDescriptor_outputURL(
                this: *const root::MTL::CaptureDescriptor,
            ) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17CaptureDescriptor12setOutputURLEPKN2NS3URLE"]
            pub fn CaptureDescriptor_setOutputURL(
                this: *mut root::MTL::CaptureDescriptor,
                outputURL: *const root::NS::URL,
            );
        }
        impl CaptureDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::CaptureDescriptor {
                CaptureDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::CaptureDescriptor {
                CaptureDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn captureObject(&self) -> root::id {
                CaptureDescriptor_captureObject(self)
            }
            #[inline]
            pub unsafe fn setCaptureObject(&mut self, captureObject: root::id) {
                CaptureDescriptor_setCaptureObject(self, captureObject)
            }
            #[inline]
            pub unsafe fn destination(&self) -> root::MTL::CaptureDestination {
                CaptureDescriptor_destination(self)
            }
            #[inline]
            pub unsafe fn setDestination(&mut self, destination: root::MTL::CaptureDestination) {
                CaptureDescriptor_setDestination(self, destination)
            }
            #[inline]
            pub unsafe fn outputURL(&self) -> *mut root::NS::URL {
                CaptureDescriptor_outputURL(self)
            }
            #[inline]
            pub unsafe fn setOutputURL(&mut self, outputURL: *const root::NS::URL) {
                CaptureDescriptor_setOutputURL(self, outputURL)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CaptureManager {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager5allocEv"]
            pub fn CaptureManager_alloc() -> *mut root::MTL::CaptureManager;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager20sharedCaptureManagerEv"]
            pub fn CaptureManager_sharedCaptureManager() -> *mut root::MTL::CaptureManager;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager4initEv"]
            pub fn CaptureManager_init(
                this: *mut root::MTL::CaptureManager,
            ) -> *mut root::MTL::CaptureManager;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager15newCaptureScopeEPKNS_6DeviceE"]
            pub fn CaptureManager_newCaptureScope(
                this: *mut root::MTL::CaptureManager,
                device: *const root::MTL::Device,
            ) -> *mut root::MTL::CaptureScope;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager15newCaptureScopeEPKNS_12CommandQueueE"]
            pub fn CaptureManager_newCaptureScope1(
                this: *mut root::MTL::CaptureManager,
                commandQueue: *const root::MTL::CommandQueue,
            ) -> *mut root::MTL::CaptureScope;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager19supportsDestinationENS_18CaptureDestinationE"]
            pub fn CaptureManager_supportsDestination(
                this: *mut root::MTL::CaptureManager,
                destination: root::MTL::CaptureDestination,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager12startCaptureEPKNS_17CaptureDescriptorEPPN2NS5ErrorE"]
            pub fn CaptureManager_startCapture(
                this: *mut root::MTL::CaptureManager,
                descriptor: *const root::MTL::CaptureDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager12startCaptureEPKNS_6DeviceE"]
            pub fn CaptureManager_startCapture1(
                this: *mut root::MTL::CaptureManager,
                device: *const root::MTL::Device,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager12startCaptureEPKNS_12CommandQueueE"]
            pub fn CaptureManager_startCapture2(
                this: *mut root::MTL::CaptureManager,
                commandQueue: *const root::MTL::CommandQueue,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager12startCaptureEPKNS_12CaptureScopeE"]
            pub fn CaptureManager_startCapture3(
                this: *mut root::MTL::CaptureManager,
                captureScope: *const root::MTL::CaptureScope,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager11stopCaptureEv"]
            pub fn CaptureManager_stopCapture(this: *mut root::MTL::CaptureManager);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CaptureManager19defaultCaptureScopeEv"]
            pub fn CaptureManager_defaultCaptureScope(
                this: *const root::MTL::CaptureManager,
            ) -> *mut root::MTL::CaptureScope;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CaptureManager22setDefaultCaptureScopeEPKNS_12CaptureScopeE"]
            pub fn CaptureManager_setDefaultCaptureScope(
                this: *mut root::MTL::CaptureManager,
                defaultCaptureScope: *const root::MTL::CaptureScope,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14CaptureManager11isCapturingEv"]
            pub fn CaptureManager_isCapturing(this: *const root::MTL::CaptureManager) -> bool;
        }
        impl CaptureManager {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::CaptureManager {
                CaptureManager_alloc()
            }
            #[inline]
            pub unsafe fn sharedCaptureManager() -> *mut root::MTL::CaptureManager {
                CaptureManager_sharedCaptureManager()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::CaptureManager {
                CaptureManager_init(self)
            }
            #[inline]
            pub unsafe fn newCaptureScope(
                &mut self,
                device: *const root::MTL::Device,
            ) -> *mut root::MTL::CaptureScope {
                CaptureManager_newCaptureScope(self, device)
            }
            #[inline]
            pub unsafe fn newCaptureScope1(
                &mut self,
                commandQueue: *const root::MTL::CommandQueue,
            ) -> *mut root::MTL::CaptureScope {
                CaptureManager_newCaptureScope1(self, commandQueue)
            }
            #[inline]
            pub unsafe fn supportsDestination(
                &mut self,
                destination: root::MTL::CaptureDestination,
            ) -> bool {
                CaptureManager_supportsDestination(self, destination)
            }
            #[inline]
            pub unsafe fn startCapture(
                &mut self,
                descriptor: *const root::MTL::CaptureDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> bool {
                CaptureManager_startCapture(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn startCapture1(&mut self, device: *const root::MTL::Device) {
                CaptureManager_startCapture1(self, device)
            }
            #[inline]
            pub unsafe fn startCapture2(&mut self, commandQueue: *const root::MTL::CommandQueue) {
                CaptureManager_startCapture2(self, commandQueue)
            }
            #[inline]
            pub unsafe fn startCapture3(&mut self, captureScope: *const root::MTL::CaptureScope) {
                CaptureManager_startCapture3(self, captureScope)
            }
            #[inline]
            pub unsafe fn stopCapture(&mut self) {
                CaptureManager_stopCapture(self)
            }
            #[inline]
            pub unsafe fn defaultCaptureScope(&self) -> *mut root::MTL::CaptureScope {
                CaptureManager_defaultCaptureScope(self)
            }
            #[inline]
            pub unsafe fn setDefaultCaptureScope(
                &mut self,
                defaultCaptureScope: *const root::MTL::CaptureScope,
            ) {
                CaptureManager_setDefaultCaptureScope(self, defaultCaptureScope)
            }
            #[inline]
            pub unsafe fn isCapturing(&self) -> bool {
                CaptureManager_isCapturing(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CaptureScope {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12CaptureScope6deviceEv"]
            pub fn CaptureScope_device(
                this: *const root::MTL::CaptureScope,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12CaptureScope5labelEv"]
            pub fn CaptureScope_label(
                this: *const root::MTL::CaptureScope,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CaptureScope8setLabelEPKN2NS6StringE"]
            pub fn CaptureScope_setLabel(
                this: *mut root::MTL::CaptureScope,
                pLabel: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12CaptureScope12commandQueueEv"]
            pub fn CaptureScope_commandQueue(
                this: *const root::MTL::CaptureScope,
            ) -> *mut root::MTL::CommandQueue;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CaptureScope10beginScopeEv"]
            pub fn CaptureScope_beginScope(this: *mut root::MTL::CaptureScope);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CaptureScope8endScopeEv"]
            pub fn CaptureScope_endScope(this: *mut root::MTL::CaptureScope);
        }
        impl CaptureScope {
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                CaptureScope_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                CaptureScope_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, pLabel: *const root::NS::String) {
                CaptureScope_setLabel(self, pLabel)
            }
            #[inline]
            pub unsafe fn commandQueue(&self) -> *mut root::MTL::CommandQueue {
                CaptureScope_commandQueue(self)
            }
            #[inline]
            pub unsafe fn beginScope(&mut self) {
                CaptureScope_beginScope(self)
            }
            #[inline]
            pub unsafe fn endScope(&mut self) {
                CaptureScope_endScope(self)
            }
        }
        pub const CommandBufferStatus_CommandBufferStatusNotEnqueued:
            root::MTL::CommandBufferStatus = 0;
        pub const CommandBufferStatus_CommandBufferStatusEnqueued: root::MTL::CommandBufferStatus =
            1;
        pub const CommandBufferStatus_CommandBufferStatusCommitted: root::MTL::CommandBufferStatus =
            2;
        pub const CommandBufferStatus_CommandBufferStatusScheduled: root::MTL::CommandBufferStatus =
            3;
        pub const CommandBufferStatus_CommandBufferStatusCompleted: root::MTL::CommandBufferStatus =
            4;
        pub const CommandBufferStatus_CommandBufferStatusError: root::MTL::CommandBufferStatus = 5;
        pub type CommandBufferStatus = root::NS::UInteger;
        pub const CommandBufferError_CommandBufferErrorNone: root::MTL::CommandBufferError = 0;
        pub const CommandBufferError_CommandBufferErrorTimeout: root::MTL::CommandBufferError = 2;
        pub const CommandBufferError_CommandBufferErrorPageFault: root::MTL::CommandBufferError = 3;
        pub const CommandBufferError_CommandBufferErrorAccessRevoked:
            root::MTL::CommandBufferError = 4;
        pub const CommandBufferError_CommandBufferErrorBlacklisted: root::MTL::CommandBufferError =
            4;
        pub const CommandBufferError_CommandBufferErrorNotPermitted: root::MTL::CommandBufferError =
            7;
        pub const CommandBufferError_CommandBufferErrorOutOfMemory: root::MTL::CommandBufferError =
            8;
        pub const CommandBufferError_CommandBufferErrorInvalidResource:
            root::MTL::CommandBufferError = 9;
        pub const CommandBufferError_CommandBufferErrorMemoryless: root::MTL::CommandBufferError =
            10;
        pub const CommandBufferError_CommandBufferErrorDeviceRemoved:
            root::MTL::CommandBufferError = 11;
        pub const CommandBufferError_CommandBufferErrorStackOverflow:
            root::MTL::CommandBufferError = 12;
        pub type CommandBufferError = root::NS::UInteger;
        pub type CommandBufferErrorOption = root::NS::UInteger;
        pub const MTL_CommandBufferErrorOptionNone: root::MTL::CommandBufferErrorOption = 0;
        pub const MTL_CommandBufferErrorOptionEncoderExecutionStatus:
            root::MTL::CommandBufferErrorOption = 1;
        pub type _bindgen_ty_14 = root::MTL::CommandBufferErrorOption;
        pub const CommandEncoderErrorState_CommandEncoderErrorStateUnknown:
            root::MTL::CommandEncoderErrorState = 0;
        pub const CommandEncoderErrorState_CommandEncoderErrorStateCompleted:
            root::MTL::CommandEncoderErrorState = 1;
        pub const CommandEncoderErrorState_CommandEncoderErrorStateAffected:
            root::MTL::CommandEncoderErrorState = 2;
        pub const CommandEncoderErrorState_CommandEncoderErrorStatePending:
            root::MTL::CommandEncoderErrorState = 3;
        pub const CommandEncoderErrorState_CommandEncoderErrorStateFaulted:
            root::MTL::CommandEncoderErrorState = 4;
        pub type CommandEncoderErrorState = root::NS::Integer;
        #[repr(C)]
        #[derive(Debug)]
        pub struct CommandBufferDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL23CommandBufferDescriptor5allocEv"]
            pub fn CommandBufferDescriptor_alloc() -> *mut root::MTL::CommandBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL23CommandBufferDescriptor4initEv"]
            pub fn CommandBufferDescriptor_init(
                this: *mut root::MTL::CommandBufferDescriptor,
            ) -> *mut root::MTL::CommandBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL23CommandBufferDescriptor18retainedReferencesEv"]
            pub fn CommandBufferDescriptor_retainedReferences(
                this: *const root::MTL::CommandBufferDescriptor,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL23CommandBufferDescriptor21setRetainedReferencesEb"]
            pub fn CommandBufferDescriptor_setRetainedReferences(
                this: *mut root::MTL::CommandBufferDescriptor,
                retainedReferences: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL23CommandBufferDescriptor12errorOptionsEv"]
            pub fn CommandBufferDescriptor_errorOptions(
                this: *const root::MTL::CommandBufferDescriptor,
            ) -> root::MTL::CommandBufferErrorOption;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL23CommandBufferDescriptor15setErrorOptionsEm"]
            pub fn CommandBufferDescriptor_setErrorOptions(
                this: *mut root::MTL::CommandBufferDescriptor,
                errorOptions: root::MTL::CommandBufferErrorOption,
            );
        }
        impl CommandBufferDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::CommandBufferDescriptor {
                CommandBufferDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::CommandBufferDescriptor {
                CommandBufferDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn retainedReferences(&self) -> bool {
                CommandBufferDescriptor_retainedReferences(self)
            }
            #[inline]
            pub unsafe fn setRetainedReferences(&mut self, retainedReferences: bool) {
                CommandBufferDescriptor_setRetainedReferences(self, retainedReferences)
            }
            #[inline]
            pub unsafe fn errorOptions(&self) -> root::MTL::CommandBufferErrorOption {
                CommandBufferDescriptor_errorOptions(self)
            }
            #[inline]
            pub unsafe fn setErrorOptions(
                &mut self,
                errorOptions: root::MTL::CommandBufferErrorOption,
            ) {
                CommandBufferDescriptor_setErrorOptions(self, errorOptions)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CommandBufferEncoderInfo {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24CommandBufferEncoderInfo5labelEv"]
            pub fn CommandBufferEncoderInfo_label(
                this: *const root::MTL::CommandBufferEncoderInfo,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24CommandBufferEncoderInfo14debugSignpostsEv"]
            pub fn CommandBufferEncoderInfo_debugSignposts(
                this: *const root::MTL::CommandBufferEncoderInfo,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24CommandBufferEncoderInfo10errorStateEv"]
            pub fn CommandBufferEncoderInfo_errorState(
                this: *const root::MTL::CommandBufferEncoderInfo,
            ) -> root::MTL::CommandEncoderErrorState;
        }
        impl CommandBufferEncoderInfo {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                CommandBufferEncoderInfo_label(self)
            }
            #[inline]
            pub unsafe fn debugSignposts(&self) -> *mut root::NS::Array {
                CommandBufferEncoderInfo_debugSignposts(self)
            }
            #[inline]
            pub unsafe fn errorState(&self) -> root::MTL::CommandEncoderErrorState {
                CommandBufferEncoderInfo_errorState(self)
            }
        }
        pub const DispatchType_DispatchTypeSerial: root::MTL::DispatchType = 0;
        pub const DispatchType_DispatchTypeConcurrent: root::MTL::DispatchType = 1;
        pub type DispatchType = root::NS::UInteger;
        pub type CommandBufferHandler = *mut ::std::os::raw::c_void;
        pub type HandlerFunction = [u64; 4usize];
        #[repr(C)]
        #[derive(Debug)]
        pub struct CommandBuffer {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer19addScheduledHandlerERKNSt3__18functionIFvPS0_EEE"]
            pub fn CommandBuffer_addScheduledHandler(
                this: *mut root::MTL::CommandBuffer,
                function: *const root::MTL::HandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer19addCompletedHandlerERKNSt3__18functionIFvPS0_EEE"]
            pub fn CommandBuffer_addCompletedHandler(
                this: *mut root::MTL::CommandBuffer,
                function: *const root::MTL::HandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer6deviceEv"]
            pub fn CommandBuffer_device(
                this: *const root::MTL::CommandBuffer,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer12commandQueueEv"]
            pub fn CommandBuffer_commandQueue(
                this: *const root::MTL::CommandBuffer,
            ) -> *mut root::MTL::CommandQueue;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer18retainedReferencesEv"]
            pub fn CommandBuffer_retainedReferences(this: *const root::MTL::CommandBuffer) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer12errorOptionsEv"]
            pub fn CommandBuffer_errorOptions(
                this: *const root::MTL::CommandBuffer,
            ) -> root::MTL::CommandBufferErrorOption;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer5labelEv"]
            pub fn CommandBuffer_label(
                this: *const root::MTL::CommandBuffer,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer8setLabelEPKN2NS6StringE"]
            pub fn CommandBuffer_setLabel(
                this: *mut root::MTL::CommandBuffer,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer15kernelStartTimeEv"]
            pub fn CommandBuffer_kernelStartTime(
                this: *const root::MTL::CommandBuffer,
            ) -> root::CFTimeInterval;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer13kernelEndTimeEv"]
            pub fn CommandBuffer_kernelEndTime(
                this: *const root::MTL::CommandBuffer,
            ) -> root::CFTimeInterval;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer4logsEv"]
            pub fn CommandBuffer_logs(
                this: *const root::MTL::CommandBuffer,
            ) -> *mut root::MTL::LogContainer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer12GPUStartTimeEv"]
            pub fn CommandBuffer_GPUStartTime(
                this: *const root::MTL::CommandBuffer,
            ) -> root::CFTimeInterval;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer10GPUEndTimeEv"]
            pub fn CommandBuffer_GPUEndTime(
                this: *const root::MTL::CommandBuffer,
            ) -> root::CFTimeInterval;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer7enqueueEv"]
            pub fn CommandBuffer_enqueue(this: *mut root::MTL::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer6commitEv"]
            pub fn CommandBuffer_commit(this: *mut root::MTL::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer19addScheduledHandlerEU13block_pointerFvPS0_E"]
            pub fn CommandBuffer_addScheduledHandler1(
                this: *mut root::MTL::CommandBuffer,
                block: root::MTL::CommandBufferHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer15presentDrawableEPKNS_8DrawableE"]
            pub fn CommandBuffer_presentDrawable(
                this: *mut root::MTL::CommandBuffer,
                drawable: *const root::MTL::Drawable,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer21presentDrawableAtTimeEPKNS_8DrawableEd"]
            pub fn CommandBuffer_presentDrawableAtTime(
                this: *mut root::MTL::CommandBuffer,
                drawable: *const root::MTL::Drawable,
                presentationTime: root::CFTimeInterval,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer35presentDrawableAfterMinimumDurationEPKNS_8DrawableEd"]
            pub fn CommandBuffer_presentDrawableAfterMinimumDuration(
                this: *mut root::MTL::CommandBuffer,
                drawable: *const root::MTL::Drawable,
                duration: root::CFTimeInterval,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer18waitUntilScheduledEv"]
            pub fn CommandBuffer_waitUntilScheduled(this: *mut root::MTL::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer19addCompletedHandlerEU13block_pointerFvPS0_E"]
            pub fn CommandBuffer_addCompletedHandler1(
                this: *mut root::MTL::CommandBuffer,
                block: root::MTL::CommandBufferHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer18waitUntilCompletedEv"]
            pub fn CommandBuffer_waitUntilCompleted(this: *mut root::MTL::CommandBuffer);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer6statusEv"]
            pub fn CommandBuffer_status(
                this: *const root::MTL::CommandBuffer,
            ) -> root::MTL::CommandBufferStatus;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL13CommandBuffer5errorEv"]
            pub fn CommandBuffer_error(
                this: *const root::MTL::CommandBuffer,
            ) -> *mut root::NS::Error;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer18blitCommandEncoderEv"]
            pub fn CommandBuffer_blitCommandEncoder(
                this: *mut root::MTL::CommandBuffer,
            ) -> *mut root::MTL::BlitCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer20renderCommandEncoderEPKNS_20RenderPassDescriptorE"]
            pub fn CommandBuffer_renderCommandEncoder(
                this: *mut root::MTL::CommandBuffer,
                renderPassDescriptor: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RenderCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer21computeCommandEncoderEPKNS_21ComputePassDescriptorE"]
            pub fn CommandBuffer_computeCommandEncoder(
                this: *mut root::MTL::CommandBuffer,
                computePassDescriptor: *const root::MTL::ComputePassDescriptor,
            ) -> *mut root::MTL::ComputeCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer18blitCommandEncoderEPKNS_18BlitPassDescriptorE"]
            pub fn CommandBuffer_blitCommandEncoder1(
                this: *mut root::MTL::CommandBuffer,
                blitPassDescriptor: *const root::MTL::BlitPassDescriptor,
            ) -> *mut root::MTL::BlitCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer21computeCommandEncoderEv"]
            pub fn CommandBuffer_computeCommandEncoder1(
                this: *mut root::MTL::CommandBuffer,
            ) -> *mut root::MTL::ComputeCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer21computeCommandEncoderENS_12DispatchTypeE"]
            pub fn CommandBuffer_computeCommandEncoder2(
                this: *mut root::MTL::CommandBuffer,
                dispatchType: root::MTL::DispatchType,
            ) -> *mut root::MTL::ComputeCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer10encodeWaitEPKNS_5EventEy"]
            pub fn CommandBuffer_encodeWait(
                this: *mut root::MTL::CommandBuffer,
                event: *const root::MTL::Event,
                value: u64,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer17encodeSignalEventEPKNS_5EventEy"]
            pub fn CommandBuffer_encodeSignalEvent(
                this: *mut root::MTL::CommandBuffer,
                event: *const root::MTL::Event,
                value: u64,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer28parallelRenderCommandEncoderEPKNS_20RenderPassDescriptorE"]
            pub fn CommandBuffer_parallelRenderCommandEncoder(
                this: *mut root::MTL::CommandBuffer,
                renderPassDescriptor: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::ParallelRenderCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer27resourceStateCommandEncoderEv"]
            pub fn CommandBuffer_resourceStateCommandEncoder(
                this: *mut root::MTL::CommandBuffer,
            ) -> *mut root::MTL::ResourceStateCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer27resourceStateCommandEncoderEPKNS_27ResourceStatePassDescriptorE"]
            pub fn CommandBuffer_resourceStateCommandEncoder1(
                this: *mut root::MTL::CommandBuffer,
                resourceStatePassDescriptor: *const root::MTL::ResourceStatePassDescriptor,
            ) -> *mut root::MTL::ResourceStateCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer35accelerationStructureCommandEncoderEv"]
            pub fn CommandBuffer_accelerationStructureCommandEncoder(
                this: *mut root::MTL::CommandBuffer,
            ) -> *mut root::MTL::AccelerationStructureCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer14pushDebugGroupEPKN2NS6StringE"]
            pub fn CommandBuffer_pushDebugGroup(
                this: *mut root::MTL::CommandBuffer,
                string: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL13CommandBuffer13popDebugGroupEv"]
            pub fn CommandBuffer_popDebugGroup(this: *mut root::MTL::CommandBuffer);
        }
        impl CommandBuffer {
            #[inline]
            pub unsafe fn addScheduledHandler(
                &mut self,
                function: *const root::MTL::HandlerFunction,
            ) {
                CommandBuffer_addScheduledHandler(self, function)
            }
            #[inline]
            pub unsafe fn addCompletedHandler(
                &mut self,
                function: *const root::MTL::HandlerFunction,
            ) {
                CommandBuffer_addCompletedHandler(self, function)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                CommandBuffer_device(self)
            }
            #[inline]
            pub unsafe fn commandQueue(&self) -> *mut root::MTL::CommandQueue {
                CommandBuffer_commandQueue(self)
            }
            #[inline]
            pub unsafe fn retainedReferences(&self) -> bool {
                CommandBuffer_retainedReferences(self)
            }
            #[inline]
            pub unsafe fn errorOptions(&self) -> root::MTL::CommandBufferErrorOption {
                CommandBuffer_errorOptions(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                CommandBuffer_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                CommandBuffer_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn kernelStartTime(&self) -> root::CFTimeInterval {
                CommandBuffer_kernelStartTime(self)
            }
            #[inline]
            pub unsafe fn kernelEndTime(&self) -> root::CFTimeInterval {
                CommandBuffer_kernelEndTime(self)
            }
            #[inline]
            pub unsafe fn logs(&self) -> *mut root::MTL::LogContainer {
                CommandBuffer_logs(self)
            }
            #[inline]
            pub unsafe fn GPUStartTime(&self) -> root::CFTimeInterval {
                CommandBuffer_GPUStartTime(self)
            }
            #[inline]
            pub unsafe fn GPUEndTime(&self) -> root::CFTimeInterval {
                CommandBuffer_GPUEndTime(self)
            }
            #[inline]
            pub unsafe fn enqueue(&mut self) {
                CommandBuffer_enqueue(self)
            }
            #[inline]
            pub unsafe fn commit(&mut self) {
                CommandBuffer_commit(self)
            }
            #[inline]
            pub unsafe fn addScheduledHandler1(&mut self, block: root::MTL::CommandBufferHandler) {
                CommandBuffer_addScheduledHandler1(self, block)
            }
            #[inline]
            pub unsafe fn presentDrawable(&mut self, drawable: *const root::MTL::Drawable) {
                CommandBuffer_presentDrawable(self, drawable)
            }
            #[inline]
            pub unsafe fn presentDrawableAtTime(
                &mut self,
                drawable: *const root::MTL::Drawable,
                presentationTime: root::CFTimeInterval,
            ) {
                CommandBuffer_presentDrawableAtTime(self, drawable, presentationTime)
            }
            #[inline]
            pub unsafe fn presentDrawableAfterMinimumDuration(
                &mut self,
                drawable: *const root::MTL::Drawable,
                duration: root::CFTimeInterval,
            ) {
                CommandBuffer_presentDrawableAfterMinimumDuration(self, drawable, duration)
            }
            #[inline]
            pub unsafe fn waitUntilScheduled(&mut self) {
                CommandBuffer_waitUntilScheduled(self)
            }
            #[inline]
            pub unsafe fn addCompletedHandler1(&mut self, block: root::MTL::CommandBufferHandler) {
                CommandBuffer_addCompletedHandler1(self, block)
            }
            #[inline]
            pub unsafe fn waitUntilCompleted(&mut self) {
                CommandBuffer_waitUntilCompleted(self)
            }
            #[inline]
            pub unsafe fn status(&self) -> root::MTL::CommandBufferStatus {
                CommandBuffer_status(self)
            }
            #[inline]
            pub unsafe fn error(&self) -> *mut root::NS::Error {
                CommandBuffer_error(self)
            }
            #[inline]
            pub unsafe fn blitCommandEncoder(&mut self) -> *mut root::MTL::BlitCommandEncoder {
                CommandBuffer_blitCommandEncoder(self)
            }
            #[inline]
            pub unsafe fn renderCommandEncoder(
                &mut self,
                renderPassDescriptor: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::RenderCommandEncoder {
                CommandBuffer_renderCommandEncoder(self, renderPassDescriptor)
            }
            #[inline]
            pub unsafe fn computeCommandEncoder(
                &mut self,
                computePassDescriptor: *const root::MTL::ComputePassDescriptor,
            ) -> *mut root::MTL::ComputeCommandEncoder {
                CommandBuffer_computeCommandEncoder(self, computePassDescriptor)
            }
            #[inline]
            pub unsafe fn blitCommandEncoder1(
                &mut self,
                blitPassDescriptor: *const root::MTL::BlitPassDescriptor,
            ) -> *mut root::MTL::BlitCommandEncoder {
                CommandBuffer_blitCommandEncoder1(self, blitPassDescriptor)
            }
            #[inline]
            pub unsafe fn computeCommandEncoder1(
                &mut self,
            ) -> *mut root::MTL::ComputeCommandEncoder {
                CommandBuffer_computeCommandEncoder1(self)
            }
            #[inline]
            pub unsafe fn computeCommandEncoder2(
                &mut self,
                dispatchType: root::MTL::DispatchType,
            ) -> *mut root::MTL::ComputeCommandEncoder {
                CommandBuffer_computeCommandEncoder2(self, dispatchType)
            }
            #[inline]
            pub unsafe fn encodeWait(&mut self, event: *const root::MTL::Event, value: u64) {
                CommandBuffer_encodeWait(self, event, value)
            }
            #[inline]
            pub unsafe fn encodeSignalEvent(&mut self, event: *const root::MTL::Event, value: u64) {
                CommandBuffer_encodeSignalEvent(self, event, value)
            }
            #[inline]
            pub unsafe fn parallelRenderCommandEncoder(
                &mut self,
                renderPassDescriptor: *const root::MTL::RenderPassDescriptor,
            ) -> *mut root::MTL::ParallelRenderCommandEncoder {
                CommandBuffer_parallelRenderCommandEncoder(self, renderPassDescriptor)
            }
            #[inline]
            pub unsafe fn resourceStateCommandEncoder(
                &mut self,
            ) -> *mut root::MTL::ResourceStateCommandEncoder {
                CommandBuffer_resourceStateCommandEncoder(self)
            }
            #[inline]
            pub unsafe fn resourceStateCommandEncoder1(
                &mut self,
                resourceStatePassDescriptor: *const root::MTL::ResourceStatePassDescriptor,
            ) -> *mut root::MTL::ResourceStateCommandEncoder {
                CommandBuffer_resourceStateCommandEncoder1(self, resourceStatePassDescriptor)
            }
            #[inline]
            pub unsafe fn accelerationStructureCommandEncoder(
                &mut self,
            ) -> *mut root::MTL::AccelerationStructureCommandEncoder {
                CommandBuffer_accelerationStructureCommandEncoder(self)
            }
            #[inline]
            pub unsafe fn pushDebugGroup(&mut self, string: *const root::NS::String) {
                CommandBuffer_pushDebugGroup(self, string)
            }
            #[inline]
            pub unsafe fn popDebugGroup(&mut self) {
                CommandBuffer_popDebugGroup(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CommandQueue {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12CommandQueue5labelEv"]
            pub fn CommandQueue_label(
                this: *const root::MTL::CommandQueue,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CommandQueue8setLabelEPKN2NS6StringE"]
            pub fn CommandQueue_setLabel(
                this: *mut root::MTL::CommandQueue,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL12CommandQueue6deviceEv"]
            pub fn CommandQueue_device(
                this: *const root::MTL::CommandQueue,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CommandQueue13commandBufferEv"]
            pub fn CommandQueue_commandBuffer(
                this: *mut root::MTL::CommandQueue,
            ) -> *mut root::MTL::CommandBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CommandQueue13commandBufferEPKNS_23CommandBufferDescriptorE"]
            pub fn CommandQueue_commandBuffer1(
                this: *mut root::MTL::CommandQueue,
                descriptor: *const root::MTL::CommandBufferDescriptor,
            ) -> *mut root::MTL::CommandBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CommandQueue37commandBufferWithUnretainedReferencesEv"]
            pub fn CommandQueue_commandBufferWithUnretainedReferences(
                this: *mut root::MTL::CommandQueue,
            ) -> *mut root::MTL::CommandBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL12CommandQueue26insertDebugCaptureBoundaryEv"]
            pub fn CommandQueue_insertDebugCaptureBoundary(this: *mut root::MTL::CommandQueue);
        }
        impl CommandQueue {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                CommandQueue_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                CommandQueue_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                CommandQueue_device(self)
            }
            #[inline]
            pub unsafe fn commandBuffer(&mut self) -> *mut root::MTL::CommandBuffer {
                CommandQueue_commandBuffer(self)
            }
            #[inline]
            pub unsafe fn commandBuffer1(
                &mut self,
                descriptor: *const root::MTL::CommandBufferDescriptor,
            ) -> *mut root::MTL::CommandBuffer {
                CommandQueue_commandBuffer1(self, descriptor)
            }
            #[inline]
            pub unsafe fn commandBufferWithUnretainedReferences(
                &mut self,
            ) -> *mut root::MTL::CommandBuffer {
                CommandQueue_commandBufferWithUnretainedReferences(self)
            }
            #[inline]
            pub unsafe fn insertDebugCaptureBoundary(&mut self) {
                CommandQueue_insertDebugCaptureBoundary(self)
            }
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct DispatchThreadgroupsIndirectArguments {
            pub threadgroupsPerGrid: [u32; 3usize],
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct StageInRegionIndirectArguments {
            pub stageInOrigin: [u32; 3usize],
            pub stageInSize: [u32; 3usize],
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ComputeCommandEncoder {
            pub _base: root::NS::Referencing<root::MTL::CommandEncoder>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL21ComputeCommandEncoder12dispatchTypeEv"]
            pub fn ComputeCommandEncoder_dispatchType(
                this: *const root::MTL::ComputeCommandEncoder,
            ) -> root::MTL::DispatchType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder23setComputePipelineStateEPKNS_20ComputePipelineStateE"]
            pub fn ComputeCommandEncoder_setComputePipelineState(
                this: *mut root::MTL::ComputeCommandEncoder,
                state: *const root::MTL::ComputePipelineState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder8setBytesEPKvmm"]
            pub fn ComputeCommandEncoder_setBytes(
                this: *mut root::MTL::ComputeCommandEncoder,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder9setBufferEPKNS_6BufferEmm"]
            pub fn ComputeCommandEncoder_setBuffer(
                this: *mut root::MTL::ComputeCommandEncoder,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder15setBufferOffsetEmm"]
            pub fn ComputeCommandEncoder_setBufferOffset(
                this: *mut root::MTL::ComputeCommandEncoder,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder10setBuffersEPPNS_6BufferEPKmN2NS5RangeE"]
            pub fn ComputeCommandEncoder_setBuffers(
                this: *mut root::MTL::ComputeCommandEncoder,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder23setVisibleFunctionTableEPKNS_20VisibleFunctionTableEm"]
            pub fn ComputeCommandEncoder_setVisibleFunctionTable(
                this: *mut root::MTL::ComputeCommandEncoder,
                visibleFunctionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder24setVisibleFunctionTablesEPPKNS_20VisibleFunctionTableEN2NS5RangeE"]
            pub fn ComputeCommandEncoder_setVisibleFunctionTables(
                this: *mut root::MTL::ComputeCommandEncoder,
                visibleFunctionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder28setIntersectionFunctionTableEPKNS_25IntersectionFunctionTableEm"]
            pub fn ComputeCommandEncoder_setIntersectionFunctionTable(
                this: *mut root::MTL::ComputeCommandEncoder,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder29setIntersectionFunctionTablesEPPKNS_25IntersectionFunctionTableEN2NS5RangeE"]
            pub fn ComputeCommandEncoder_setIntersectionFunctionTables(
                this: *mut root::MTL::ComputeCommandEncoder,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder24setAccelerationStructureEPKNS_21AccelerationStructureEm"]
            pub fn ComputeCommandEncoder_setAccelerationStructure(
                this: *mut root::MTL::ComputeCommandEncoder,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder10setTextureEPKNS_7TextureEm"]
            pub fn ComputeCommandEncoder_setTexture(
                this: *mut root::MTL::ComputeCommandEncoder,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder11setTexturesEPPNS_7TextureEN2NS5RangeE"]
            pub fn ComputeCommandEncoder_setTextures(
                this: *mut root::MTL::ComputeCommandEncoder,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder15setSamplerStateEPKNS_12SamplerStateEm"]
            pub fn ComputeCommandEncoder_setSamplerState(
                this: *mut root::MTL::ComputeCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder16setSamplerStatesEPPNS_12SamplerStateEN2NS5RangeE"]
            pub fn ComputeCommandEncoder_setSamplerStates(
                this: *mut root::MTL::ComputeCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder15setSamplerStateEPKNS_12SamplerStateEffm"]
            pub fn ComputeCommandEncoder_setSamplerState1(
                this: *mut root::MTL::ComputeCommandEncoder,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder16setSamplerStatesEPPNS_12SamplerStateEPKfS5_N2NS5RangeE"]
            pub fn ComputeCommandEncoder_setSamplerStates1(
                this: *mut root::MTL::ComputeCommandEncoder,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder26setThreadgroupMemoryLengthEmm"]
            pub fn ComputeCommandEncoder_setThreadgroupMemoryLength(
                this: *mut root::MTL::ComputeCommandEncoder,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder18setImageblockWidthEmm"]
            pub fn ComputeCommandEncoder_setImageblockWidth(
                this: *mut root::MTL::ComputeCommandEncoder,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder16setStageInRegionENS_6RegionE"]
            pub fn ComputeCommandEncoder_setStageInRegion(
                this: *mut root::MTL::ComputeCommandEncoder,
                region: root::MTL::Region,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder16setStageInRegionEPKNS_6BufferEm"]
            pub fn ComputeCommandEncoder_setStageInRegion1(
                this: *mut root::MTL::ComputeCommandEncoder,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder20dispatchThreadgroupsENS_4SizeES1_"]
            pub fn ComputeCommandEncoder_dispatchThreadgroups(
                this: *mut root::MTL::ComputeCommandEncoder,
                threadgroupsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder20dispatchThreadgroupsEPKNS_6BufferEmNS_4SizeE"]
            pub fn ComputeCommandEncoder_dispatchThreadgroups1(
                this: *mut root::MTL::ComputeCommandEncoder,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
                threadsPerThreadgroup: root::MTL::Size,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder15dispatchThreadsENS_4SizeES1_"]
            pub fn ComputeCommandEncoder_dispatchThreads(
                this: *mut root::MTL::ComputeCommandEncoder,
                threadsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder11updateFenceEPKNS_5FenceE"]
            pub fn ComputeCommandEncoder_updateFence(
                this: *mut root::MTL::ComputeCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder12waitForFenceEPKNS_5FenceE"]
            pub fn ComputeCommandEncoder_waitForFence(
                this: *mut root::MTL::ComputeCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder11useResourceEPKNS_8ResourceEm"]
            pub fn ComputeCommandEncoder_useResource(
                this: *mut root::MTL::ComputeCommandEncoder,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder12useResourcesEPPNS_8ResourceEmm"]
            pub fn ComputeCommandEncoder_useResources(
                this: *mut root::MTL::ComputeCommandEncoder,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder7useHeapEPKNS_4HeapE"]
            pub fn ComputeCommandEncoder_useHeap(
                this: *mut root::MTL::ComputeCommandEncoder,
                heap: *const root::MTL::Heap,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder8useHeapsEPPNS_4HeapEm"]
            pub fn ComputeCommandEncoder_useHeaps(
                this: *mut root::MTL::ComputeCommandEncoder,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder23executeCommandsInBufferEPKNS_21IndirectCommandBufferEN2NS5RangeE"]
            pub fn ComputeCommandEncoder_executeCommandsInBuffer(
                this: *mut root::MTL::ComputeCommandEncoder,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                executionRange: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder23executeCommandsInBufferEPKNS_21IndirectCommandBufferEPKNS_6BufferEm"]
            pub fn ComputeCommandEncoder_executeCommandsInBuffer1(
                this: *mut root::MTL::ComputeCommandEncoder,
                indirectCommandbuffer: *const root::MTL::IndirectCommandBuffer,
                indirectRangeBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder13memoryBarrierEm"]
            pub fn ComputeCommandEncoder_memoryBarrier(
                this: *mut root::MTL::ComputeCommandEncoder,
                scope: root::MTL::BarrierScope,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder13memoryBarrierEPPNS_8ResourceEm"]
            pub fn ComputeCommandEncoder_memoryBarrier1(
                this: *mut root::MTL::ComputeCommandEncoder,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputeCommandEncoder22sampleCountersInBufferEPKNS_19CounterSampleBufferEmb"]
            pub fn ComputeCommandEncoder_sampleCountersInBuffer(
                this: *mut root::MTL::ComputeCommandEncoder,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            );
        }
        impl ComputeCommandEncoder {
            #[inline]
            pub unsafe fn dispatchType(&self) -> root::MTL::DispatchType {
                ComputeCommandEncoder_dispatchType(self)
            }
            #[inline]
            pub unsafe fn setComputePipelineState(
                &mut self,
                state: *const root::MTL::ComputePipelineState,
            ) {
                ComputeCommandEncoder_setComputePipelineState(self, state)
            }
            #[inline]
            pub unsafe fn setBytes(
                &mut self,
                bytes: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setBytes(self, bytes, length, index)
            }
            #[inline]
            pub unsafe fn setBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn setBufferOffset(
                &mut self,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setBufferOffset(self, offset, index)
            }
            #[inline]
            pub unsafe fn setBuffers(
                &mut self,
                buffers: *mut *mut root::MTL::Buffer,
                offsets: *const root::NS::UInteger,
                range: root::NS::Range,
            ) {
                ComputeCommandEncoder_setBuffers(self, buffers, offsets, range)
            }
            #[inline]
            pub unsafe fn setVisibleFunctionTable(
                &mut self,
                visibleFunctionTable: *const root::MTL::VisibleFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setVisibleFunctionTable(
                    self,
                    visibleFunctionTable,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setVisibleFunctionTables(
                &mut self,
                visibleFunctionTables: *mut *const root::MTL::VisibleFunctionTable,
                range: root::NS::Range,
            ) {
                ComputeCommandEncoder_setVisibleFunctionTables(self, visibleFunctionTables, range)
            }
            #[inline]
            pub unsafe fn setIntersectionFunctionTable(
                &mut self,
                intersectionFunctionTable: *const root::MTL::IntersectionFunctionTable,
                bufferIndex: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setIntersectionFunctionTable(
                    self,
                    intersectionFunctionTable,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setIntersectionFunctionTables(
                &mut self,
                intersectionFunctionTables: *mut *const root::MTL::IntersectionFunctionTable,
                range: root::NS::Range,
            ) {
                ComputeCommandEncoder_setIntersectionFunctionTables(
                    self,
                    intersectionFunctionTables,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setAccelerationStructure(
                &mut self,
                accelerationStructure: *const root::MTL::AccelerationStructure,
                bufferIndex: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setAccelerationStructure(
                    self,
                    accelerationStructure,
                    bufferIndex,
                )
            }
            #[inline]
            pub unsafe fn setTexture(
                &mut self,
                texture: *const root::MTL::Texture,
                index: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setTexture(self, texture, index)
            }
            #[inline]
            pub unsafe fn setTextures(
                &mut self,
                textures: *mut *mut root::MTL::Texture,
                range: root::NS::Range,
            ) {
                ComputeCommandEncoder_setTextures(self, textures, range)
            }
            #[inline]
            pub unsafe fn setSamplerState(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                index: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setSamplerState(self, sampler, index)
            }
            #[inline]
            pub unsafe fn setSamplerStates(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                range: root::NS::Range,
            ) {
                ComputeCommandEncoder_setSamplerStates(self, samplers, range)
            }
            #[inline]
            pub unsafe fn setSamplerState1(
                &mut self,
                sampler: *const root::MTL::SamplerState,
                lodMinClamp: f32,
                lodMaxClamp: f32,
                index: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setSamplerState1(
                    self,
                    sampler,
                    lodMinClamp,
                    lodMaxClamp,
                    index,
                )
            }
            #[inline]
            pub unsafe fn setSamplerStates1(
                &mut self,
                samplers: *mut *mut root::MTL::SamplerState,
                lodMinClamps: *const f32,
                lodMaxClamps: *const f32,
                range: root::NS::Range,
            ) {
                ComputeCommandEncoder_setSamplerStates1(
                    self,
                    samplers,
                    lodMinClamps,
                    lodMaxClamps,
                    range,
                )
            }
            #[inline]
            pub unsafe fn setThreadgroupMemoryLength(
                &mut self,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setThreadgroupMemoryLength(self, length, index)
            }
            #[inline]
            pub unsafe fn setImageblockWidth(
                &mut self,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setImageblockWidth(self, width, height)
            }
            #[inline]
            pub unsafe fn setStageInRegion(&mut self, region: root::MTL::Region) {
                ComputeCommandEncoder_setStageInRegion(self, region)
            }
            #[inline]
            pub unsafe fn setStageInRegion1(
                &mut self,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_setStageInRegion1(self, indirectBuffer, indirectBufferOffset)
            }
            #[inline]
            pub unsafe fn dispatchThreadgroups(
                &mut self,
                threadgroupsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            ) {
                ComputeCommandEncoder_dispatchThreadgroups(
                    self,
                    threadgroupsPerGrid,
                    threadsPerThreadgroup,
                )
            }
            #[inline]
            pub unsafe fn dispatchThreadgroups1(
                &mut self,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
                threadsPerThreadgroup: root::MTL::Size,
            ) {
                ComputeCommandEncoder_dispatchThreadgroups1(
                    self,
                    indirectBuffer,
                    indirectBufferOffset,
                    threadsPerThreadgroup,
                )
            }
            #[inline]
            pub unsafe fn dispatchThreads(
                &mut self,
                threadsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            ) {
                ComputeCommandEncoder_dispatchThreads(self, threadsPerGrid, threadsPerThreadgroup)
            }
            #[inline]
            pub unsafe fn updateFence(&mut self, fence: *const root::MTL::Fence) {
                ComputeCommandEncoder_updateFence(self, fence)
            }
            #[inline]
            pub unsafe fn waitForFence(&mut self, fence: *const root::MTL::Fence) {
                ComputeCommandEncoder_waitForFence(self, fence)
            }
            #[inline]
            pub unsafe fn useResource(
                &mut self,
                resource: *const root::MTL::Resource,
                usage: root::MTL::ResourceUsage,
            ) {
                ComputeCommandEncoder_useResource(self, resource, usage)
            }
            #[inline]
            pub unsafe fn useResources(
                &mut self,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
                usage: root::MTL::ResourceUsage,
            ) {
                ComputeCommandEncoder_useResources(self, resources, count, usage)
            }
            #[inline]
            pub unsafe fn useHeap(&mut self, heap: *const root::MTL::Heap) {
                ComputeCommandEncoder_useHeap(self, heap)
            }
            #[inline]
            pub unsafe fn useHeaps(
                &mut self,
                heaps: *mut *mut root::MTL::Heap,
                count: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_useHeaps(self, heaps, count)
            }
            #[inline]
            pub unsafe fn executeCommandsInBuffer(
                &mut self,
                indirectCommandBuffer: *const root::MTL::IndirectCommandBuffer,
                executionRange: root::NS::Range,
            ) {
                ComputeCommandEncoder_executeCommandsInBuffer(
                    self,
                    indirectCommandBuffer,
                    executionRange,
                )
            }
            #[inline]
            pub unsafe fn executeCommandsInBuffer1(
                &mut self,
                indirectCommandbuffer: *const root::MTL::IndirectCommandBuffer,
                indirectRangeBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_executeCommandsInBuffer1(
                    self,
                    indirectCommandbuffer,
                    indirectRangeBuffer,
                    indirectBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn memoryBarrier(&mut self, scope: root::MTL::BarrierScope) {
                ComputeCommandEncoder_memoryBarrier(self, scope)
            }
            #[inline]
            pub unsafe fn memoryBarrier1(
                &mut self,
                resources: *mut *mut root::MTL::Resource,
                count: root::NS::UInteger,
            ) {
                ComputeCommandEncoder_memoryBarrier1(self, resources, count)
            }
            #[inline]
            pub unsafe fn sampleCountersInBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
                sampleIndex: root::NS::UInteger,
                barrier: bool,
            ) {
                ComputeCommandEncoder_sampleCountersInBuffer(
                    self,
                    sampleBuffer,
                    sampleIndex,
                    barrier,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ComputePassSampleBufferAttachmentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43ComputePassSampleBufferAttachmentDescriptor5allocEv"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43ComputePassSampleBufferAttachmentDescriptor4initEv"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_init(
                this: *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL43ComputePassSampleBufferAttachmentDescriptor12sampleBufferEv"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_sampleBuffer(
                this: *const root::MTL::ComputePassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::CounterSampleBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43ComputePassSampleBufferAttachmentDescriptor15setSampleBufferEPKNS_19CounterSampleBufferE"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_setSampleBuffer(
                this: *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL43ComputePassSampleBufferAttachmentDescriptor25startOfEncoderSampleIndexEv"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_startOfEncoderSampleIndex(
                this: *const root::MTL::ComputePassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43ComputePassSampleBufferAttachmentDescriptor28setStartOfEncoderSampleIndexEm"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_setStartOfEncoderSampleIndex(
                this: *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor,
                startOfEncoderSampleIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL43ComputePassSampleBufferAttachmentDescriptor23endOfEncoderSampleIndexEv"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_endOfEncoderSampleIndex(
                this: *const root::MTL::ComputePassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL43ComputePassSampleBufferAttachmentDescriptor26setEndOfEncoderSampleIndexEm"]
            pub fn ComputePassSampleBufferAttachmentDescriptor_setEndOfEncoderSampleIndex(
                this: *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor,
                endOfEncoderSampleIndex: root::NS::UInteger,
            );
        }
        impl ComputePassSampleBufferAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor {
                ComputePassSampleBufferAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor {
                ComputePassSampleBufferAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn sampleBuffer(&self) -> *mut root::MTL::CounterSampleBuffer {
                ComputePassSampleBufferAttachmentDescriptor_sampleBuffer(self)
            }
            #[inline]
            pub unsafe fn setSampleBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            ) {
                ComputePassSampleBufferAttachmentDescriptor_setSampleBuffer(self, sampleBuffer)
            }
            #[inline]
            pub unsafe fn startOfEncoderSampleIndex(&self) -> root::NS::UInteger {
                ComputePassSampleBufferAttachmentDescriptor_startOfEncoderSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setStartOfEncoderSampleIndex(
                &mut self,
                startOfEncoderSampleIndex: root::NS::UInteger,
            ) {
                ComputePassSampleBufferAttachmentDescriptor_setStartOfEncoderSampleIndex(
                    self,
                    startOfEncoderSampleIndex,
                )
            }
            #[inline]
            pub unsafe fn endOfEncoderSampleIndex(&self) -> root::NS::UInteger {
                ComputePassSampleBufferAttachmentDescriptor_endOfEncoderSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setEndOfEncoderSampleIndex(
                &mut self,
                endOfEncoderSampleIndex: root::NS::UInteger,
            ) {
                ComputePassSampleBufferAttachmentDescriptor_setEndOfEncoderSampleIndex(
                    self,
                    endOfEncoderSampleIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ComputePassSampleBufferAttachmentDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48ComputePassSampleBufferAttachmentDescriptorArray5allocEv"]
            pub fn ComputePassSampleBufferAttachmentDescriptorArray_alloc(
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48ComputePassSampleBufferAttachmentDescriptorArray4initEv"]
            pub fn ComputePassSampleBufferAttachmentDescriptorArray_init(
                this: *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48ComputePassSampleBufferAttachmentDescriptorArray6objectEm"]
            pub fn ComputePassSampleBufferAttachmentDescriptorArray_object(
                this: *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL48ComputePassSampleBufferAttachmentDescriptorArray9setObjectEPKNS_43ComputePassSampleBufferAttachmentDescriptorEm"]
            pub fn ComputePassSampleBufferAttachmentDescriptorArray_setObject(
                this: *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray,
                attachment: *const root::MTL::ComputePassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            );
        }
        impl ComputePassSampleBufferAttachmentDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray
            {
                ComputePassSampleBufferAttachmentDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray {
                ComputePassSampleBufferAttachmentDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptor {
                ComputePassSampleBufferAttachmentDescriptorArray_object(self, attachmentIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attachment: *const root::MTL::ComputePassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            ) {
                ComputePassSampleBufferAttachmentDescriptorArray_setObject(
                    self,
                    attachment,
                    attachmentIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ComputePassDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputePassDescriptor5allocEv"]
            pub fn ComputePassDescriptor_alloc() -> *mut root::MTL::ComputePassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputePassDescriptor4initEv"]
            pub fn ComputePassDescriptor_init(
                this: *mut root::MTL::ComputePassDescriptor,
            ) -> *mut root::MTL::ComputePassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputePassDescriptor21computePassDescriptorEv"]
            pub fn ComputePassDescriptor_computePassDescriptor(
            ) -> *mut root::MTL::ComputePassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL21ComputePassDescriptor12dispatchTypeEv"]
            pub fn ComputePassDescriptor_dispatchType(
                this: *const root::MTL::ComputePassDescriptor,
            ) -> root::MTL::DispatchType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21ComputePassDescriptor15setDispatchTypeENS_12DispatchTypeE"]
            pub fn ComputePassDescriptor_setDispatchType(
                this: *mut root::MTL::ComputePassDescriptor,
                dispatchType: root::MTL::DispatchType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL21ComputePassDescriptor23sampleBufferAttachmentsEv"]
            pub fn ComputePassDescriptor_sampleBufferAttachments(
                this: *const root::MTL::ComputePassDescriptor,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray;
        }
        impl ComputePassDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ComputePassDescriptor {
                ComputePassDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::ComputePassDescriptor {
                ComputePassDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn computePassDescriptor() -> *mut root::MTL::ComputePassDescriptor {
                ComputePassDescriptor_computePassDescriptor()
            }
            #[inline]
            pub unsafe fn dispatchType(&self) -> root::MTL::DispatchType {
                ComputePassDescriptor_dispatchType(self)
            }
            #[inline]
            pub unsafe fn setDispatchType(&mut self, dispatchType: root::MTL::DispatchType) {
                ComputePassDescriptor_setDispatchType(self, dispatchType)
            }
            #[inline]
            pub unsafe fn sampleBufferAttachments(
                &self,
            ) -> *mut root::MTL::ComputePassSampleBufferAttachmentDescriptorArray {
                ComputePassDescriptor_sampleBufferAttachments(self)
            }
        }
        pub type CommonCounter = *mut root::NS::String;
        pub type CommonCounterSet = *mut root::NS::String;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct CounterResultTimestamp {
            pub timestamp: u64,
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct CounterResultStageUtilization {
            pub totalCycles: u64,
            pub vertexCycles: u64,
            pub tessellationCycles: u64,
            pub postTessellationVertexCycles: u64,
            pub fragmentCycles: u64,
            pub renderTargetCycles: u64,
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct CounterResultStatistic {
            pub tessellationInputPatches: u64,
            pub vertexInvocations: u64,
            pub postTessellationVertexInvocations: u64,
            pub clipperInvocations: u64,
            pub clipperPrimitivesOut: u64,
            pub fragmentInvocations: u64,
            pub fragmentsPassed: u64,
            pub computeKernelInvocations: u64,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Counter {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL7Counter4nameEv"]
            pub fn Counter_name(this: *const root::MTL::Counter) -> *mut root::NS::String;
        }
        impl Counter {
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                Counter_name(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CounterSet {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL10CounterSet4nameEv"]
            pub fn CounterSet_name(this: *const root::MTL::CounterSet) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL10CounterSet8countersEv"]
            pub fn CounterSet_counters(this: *const root::MTL::CounterSet) -> *mut root::NS::Array;
        }
        impl CounterSet {
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                CounterSet_name(self)
            }
            #[inline]
            pub unsafe fn counters(&self) -> *mut root::NS::Array {
                CounterSet_counters(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CounterSampleBufferDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29CounterSampleBufferDescriptor5allocEv"]
            pub fn CounterSampleBufferDescriptor_alloc(
            ) -> *mut root::MTL::CounterSampleBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29CounterSampleBufferDescriptor4initEv"]
            pub fn CounterSampleBufferDescriptor_init(
                this: *mut root::MTL::CounterSampleBufferDescriptor,
            ) -> *mut root::MTL::CounterSampleBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL29CounterSampleBufferDescriptor10counterSetEv"]
            pub fn CounterSampleBufferDescriptor_counterSet(
                this: *const root::MTL::CounterSampleBufferDescriptor,
            ) -> *mut root::MTL::CounterSet;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29CounterSampleBufferDescriptor13setCounterSetEPKNS_10CounterSetE"]
            pub fn CounterSampleBufferDescriptor_setCounterSet(
                this: *mut root::MTL::CounterSampleBufferDescriptor,
                counterSet: *const root::MTL::CounterSet,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL29CounterSampleBufferDescriptor5labelEv"]
            pub fn CounterSampleBufferDescriptor_label(
                this: *const root::MTL::CounterSampleBufferDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29CounterSampleBufferDescriptor8setLabelEPKN2NS6StringE"]
            pub fn CounterSampleBufferDescriptor_setLabel(
                this: *mut root::MTL::CounterSampleBufferDescriptor,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL29CounterSampleBufferDescriptor11storageModeEv"]
            pub fn CounterSampleBufferDescriptor_storageMode(
                this: *const root::MTL::CounterSampleBufferDescriptor,
            ) -> root::MTL::StorageMode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29CounterSampleBufferDescriptor14setStorageModeENS_11StorageModeE"]
            pub fn CounterSampleBufferDescriptor_setStorageMode(
                this: *mut root::MTL::CounterSampleBufferDescriptor,
                storageMode: root::MTL::StorageMode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL29CounterSampleBufferDescriptor11sampleCountEv"]
            pub fn CounterSampleBufferDescriptor_sampleCount(
                this: *const root::MTL::CounterSampleBufferDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29CounterSampleBufferDescriptor14setSampleCountEm"]
            pub fn CounterSampleBufferDescriptor_setSampleCount(
                this: *mut root::MTL::CounterSampleBufferDescriptor,
                sampleCount: root::NS::UInteger,
            );
        }
        impl CounterSampleBufferDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::CounterSampleBufferDescriptor {
                CounterSampleBufferDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::CounterSampleBufferDescriptor {
                CounterSampleBufferDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn counterSet(&self) -> *mut root::MTL::CounterSet {
                CounterSampleBufferDescriptor_counterSet(self)
            }
            #[inline]
            pub unsafe fn setCounterSet(&mut self, counterSet: *const root::MTL::CounterSet) {
                CounterSampleBufferDescriptor_setCounterSet(self, counterSet)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                CounterSampleBufferDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                CounterSampleBufferDescriptor_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn storageMode(&self) -> root::MTL::StorageMode {
                CounterSampleBufferDescriptor_storageMode(self)
            }
            #[inline]
            pub unsafe fn setStorageMode(&mut self, storageMode: root::MTL::StorageMode) {
                CounterSampleBufferDescriptor_setStorageMode(self, storageMode)
            }
            #[inline]
            pub unsafe fn sampleCount(&self) -> root::NS::UInteger {
                CounterSampleBufferDescriptor_sampleCount(self)
            }
            #[inline]
            pub unsafe fn setSampleCount(&mut self, sampleCount: root::NS::UInteger) {
                CounterSampleBufferDescriptor_setSampleCount(self, sampleCount)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct CounterSampleBuffer {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19CounterSampleBuffer6deviceEv"]
            pub fn CounterSampleBuffer_device(
                this: *const root::MTL::CounterSampleBuffer,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19CounterSampleBuffer5labelEv"]
            pub fn CounterSampleBuffer_label(
                this: *const root::MTL::CounterSampleBuffer,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19CounterSampleBuffer11sampleCountEv"]
            pub fn CounterSampleBuffer_sampleCount(
                this: *const root::MTL::CounterSampleBuffer,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19CounterSampleBuffer19resolveCounterRangeEN2NS5RangeE"]
            pub fn CounterSampleBuffer_resolveCounterRange(
                this: *mut root::MTL::CounterSampleBuffer,
                range: root::NS::Range,
            ) -> *mut root::NS::Data;
        }
        impl CounterSampleBuffer {
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                CounterSampleBuffer_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                CounterSampleBuffer_label(self)
            }
            #[inline]
            pub unsafe fn sampleCount(&self) -> root::NS::UInteger {
                CounterSampleBuffer_sampleCount(self)
            }
            #[inline]
            pub unsafe fn resolveCounterRange(
                &mut self,
                range: root::NS::Range,
            ) -> *mut root::NS::Data {
                CounterSampleBuffer_resolveCounterRange(self, range)
            }
        }
        pub const CounterSampleBufferError_CounterSampleBufferErrorOutOfMemory:
            root::MTL::CounterSampleBufferError = 0;
        pub const CounterSampleBufferError_CounterSampleBufferErrorInvalid:
            root::MTL::CounterSampleBufferError = 1;
        pub type CounterSampleBufferError = root::NS::Integer;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily1_v1: root::MTL::FeatureSet = 0;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily2_v1: root::MTL::FeatureSet = 1;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily1_v2: root::MTL::FeatureSet = 2;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily2_v2: root::MTL::FeatureSet = 3;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily3_v1: root::MTL::FeatureSet = 4;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily1_v3: root::MTL::FeatureSet = 5;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily2_v3: root::MTL::FeatureSet = 6;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily3_v2: root::MTL::FeatureSet = 7;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily1_v4: root::MTL::FeatureSet = 8;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily2_v4: root::MTL::FeatureSet = 9;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily3_v3: root::MTL::FeatureSet = 10;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily4_v1: root::MTL::FeatureSet = 11;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily1_v5: root::MTL::FeatureSet = 12;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily2_v5: root::MTL::FeatureSet = 13;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily3_v4: root::MTL::FeatureSet = 14;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily4_v2: root::MTL::FeatureSet = 15;
        pub const FeatureSet_FeatureSet_iOS_GPUFamily5_v1: root::MTL::FeatureSet = 16;
        pub const FeatureSet_FeatureSet_macOS_GPUFamily1_v1: root::MTL::FeatureSet = 10000;
        pub const FeatureSet_FeatureSet_OSX_GPUFamily1_v1: root::MTL::FeatureSet = 10000;
        pub const FeatureSet_FeatureSet_macOS_GPUFamily1_v2: root::MTL::FeatureSet = 10001;
        pub const FeatureSet_FeatureSet_OSX_GPUFamily1_v2: root::MTL::FeatureSet = 10001;
        pub const FeatureSet_FeatureSet_OSX_ReadWriteTextureTier2: root::MTL::FeatureSet = 10002;
        pub const FeatureSet_FeatureSet_macOS_ReadWriteTextureTier2: root::MTL::FeatureSet = 10002;
        pub const FeatureSet_FeatureSet_macOS_GPUFamily1_v3: root::MTL::FeatureSet = 10003;
        pub const FeatureSet_FeatureSet_macOS_GPUFamily1_v4: root::MTL::FeatureSet = 10004;
        pub const FeatureSet_FeatureSet_macOS_GPUFamily2_v1: root::MTL::FeatureSet = 10005;
        pub const FeatureSet_FeatureSet_watchOS_GPUFamily1_v1: root::MTL::FeatureSet = 20000;
        pub const FeatureSet_FeatureSet_WatchOS_GPUFamily1_v1: root::MTL::FeatureSet = 20000;
        pub const FeatureSet_FeatureSet_watchOS_GPUFamily2_v1: root::MTL::FeatureSet = 20001;
        pub const FeatureSet_FeatureSet_WatchOS_GPUFamily2_v1: root::MTL::FeatureSet = 20001;
        pub const FeatureSet_FeatureSet_tvOS_GPUFamily1_v1: root::MTL::FeatureSet = 30000;
        pub const FeatureSet_FeatureSet_TVOS_GPUFamily1_v1: root::MTL::FeatureSet = 30000;
        pub const FeatureSet_FeatureSet_tvOS_GPUFamily1_v2: root::MTL::FeatureSet = 30001;
        pub const FeatureSet_FeatureSet_tvOS_GPUFamily1_v3: root::MTL::FeatureSet = 30002;
        pub const FeatureSet_FeatureSet_tvOS_GPUFamily2_v1: root::MTL::FeatureSet = 30003;
        pub const FeatureSet_FeatureSet_tvOS_GPUFamily1_v4: root::MTL::FeatureSet = 30004;
        pub const FeatureSet_FeatureSet_tvOS_GPUFamily2_v2: root::MTL::FeatureSet = 30005;
        pub type FeatureSet = root::NS::UInteger;
        pub const GPUFamily_GPUFamilyApple1: root::MTL::GPUFamily = 1001;
        pub const GPUFamily_GPUFamilyApple2: root::MTL::GPUFamily = 1002;
        pub const GPUFamily_GPUFamilyApple3: root::MTL::GPUFamily = 1003;
        pub const GPUFamily_GPUFamilyApple4: root::MTL::GPUFamily = 1004;
        pub const GPUFamily_GPUFamilyApple5: root::MTL::GPUFamily = 1005;
        pub const GPUFamily_GPUFamilyApple6: root::MTL::GPUFamily = 1006;
        pub const GPUFamily_GPUFamilyApple7: root::MTL::GPUFamily = 1007;
        pub const GPUFamily_GPUFamilyApple8: root::MTL::GPUFamily = 1008;
        pub const GPUFamily_GPUFamilyMac1: root::MTL::GPUFamily = 2001;
        pub const GPUFamily_GPUFamilyMac2: root::MTL::GPUFamily = 2002;
        pub const GPUFamily_GPUFamilyCommon1: root::MTL::GPUFamily = 3001;
        pub const GPUFamily_GPUFamilyCommon2: root::MTL::GPUFamily = 3002;
        pub const GPUFamily_GPUFamilyCommon3: root::MTL::GPUFamily = 3003;
        pub const GPUFamily_GPUFamilyMacCatalyst1: root::MTL::GPUFamily = 4001;
        pub const GPUFamily_GPUFamilyMacCatalyst2: root::MTL::GPUFamily = 4002;
        pub type GPUFamily = root::NS::Integer;
        pub const DeviceLocation_DeviceLocationBuiltIn: root::MTL::DeviceLocation = 0;
        pub const DeviceLocation_DeviceLocationSlot: root::MTL::DeviceLocation = 1;
        pub const DeviceLocation_DeviceLocationExternal: root::MTL::DeviceLocation = 2;
        pub const DeviceLocation_DeviceLocationUnspecified: root::MTL::DeviceLocation =
            18446744073709551615;
        pub type DeviceLocation = root::NS::UInteger;
        pub type PipelineOption = root::NS::UInteger;
        pub const MTL_PipelineOptionNone: root::MTL::PipelineOption = 0;
        pub const MTL_PipelineOptionArgumentInfo: root::MTL::PipelineOption = 1;
        pub const MTL_PipelineOptionBufferTypeInfo: root::MTL::PipelineOption = 2;
        pub const MTL_PipelineOptionFailOnBinaryArchiveMiss: root::MTL::PipelineOption = 4;
        pub type _bindgen_ty_15 = root::MTL::PipelineOption;
        pub const ReadWriteTextureTier_ReadWriteTextureTierNone: root::MTL::ReadWriteTextureTier =
            0;
        pub const ReadWriteTextureTier_ReadWriteTextureTier1: root::MTL::ReadWriteTextureTier = 1;
        pub const ReadWriteTextureTier_ReadWriteTextureTier2: root::MTL::ReadWriteTextureTier = 2;
        pub type ReadWriteTextureTier = root::NS::UInteger;
        pub const ArgumentBuffersTier_ArgumentBuffersTier1: root::MTL::ArgumentBuffersTier = 0;
        pub const ArgumentBuffersTier_ArgumentBuffersTier2: root::MTL::ArgumentBuffersTier = 1;
        pub type ArgumentBuffersTier = root::NS::UInteger;
        pub const SparseTextureRegionAlignmentMode_SparseTextureRegionAlignmentModeOutward:
            root::MTL::SparseTextureRegionAlignmentMode = 0;
        pub const SparseTextureRegionAlignmentMode_SparseTextureRegionAlignmentModeInward:
            root::MTL::SparseTextureRegionAlignmentMode = 1;
        pub type SparseTextureRegionAlignmentMode = root::NS::UInteger;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct AccelerationStructureSizes {
            pub accelerationStructureSize: root::NS::UInteger,
            pub buildScratchBufferSize: root::NS::UInteger,
            pub refitScratchBufferSize: root::NS::UInteger,
        }
        pub const CounterSamplingPoint_CounterSamplingPointAtStageBoundary:
            root::MTL::CounterSamplingPoint = 0;
        pub const CounterSamplingPoint_CounterSamplingPointAtDrawBoundary:
            root::MTL::CounterSamplingPoint = 1;
        pub const CounterSamplingPoint_CounterSamplingPointAtDispatchBoundary:
            root::MTL::CounterSamplingPoint = 2;
        pub const CounterSamplingPoint_CounterSamplingPointAtTileDispatchBoundary:
            root::MTL::CounterSamplingPoint = 3;
        pub const CounterSamplingPoint_CounterSamplingPointAtBlitBoundary:
            root::MTL::CounterSamplingPoint = 4;
        pub type CounterSamplingPoint = root::NS::UInteger;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct SizeAndAlign {
            pub size: root::NS::UInteger,
            pub align: root::NS::UInteger,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ArgumentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor5allocEv"]
            pub fn ArgumentDescriptor_alloc() -> *mut root::MTL::ArgumentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor4initEv"]
            pub fn ArgumentDescriptor_init(
                this: *mut root::MTL::ArgumentDescriptor,
            ) -> *mut root::MTL::ArgumentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor18argumentDescriptorEv"]
            pub fn ArgumentDescriptor_argumentDescriptor() -> *mut root::MTL::ArgumentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18ArgumentDescriptor8dataTypeEv"]
            pub fn ArgumentDescriptor_dataType(
                this: *const root::MTL::ArgumentDescriptor,
            ) -> root::MTL::DataType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor11setDataTypeENS_8DataTypeE"]
            pub fn ArgumentDescriptor_setDataType(
                this: *mut root::MTL::ArgumentDescriptor,
                dataType: root::MTL::DataType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18ArgumentDescriptor5indexEv"]
            pub fn ArgumentDescriptor_index(
                this: *const root::MTL::ArgumentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor8setIndexEm"]
            pub fn ArgumentDescriptor_setIndex(
                this: *mut root::MTL::ArgumentDescriptor,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18ArgumentDescriptor11arrayLengthEv"]
            pub fn ArgumentDescriptor_arrayLength(
                this: *const root::MTL::ArgumentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor14setArrayLengthEm"]
            pub fn ArgumentDescriptor_setArrayLength(
                this: *mut root::MTL::ArgumentDescriptor,
                arrayLength: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18ArgumentDescriptor6accessEv"]
            pub fn ArgumentDescriptor_access(
                this: *const root::MTL::ArgumentDescriptor,
            ) -> root::MTL::ArgumentAccess;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor9setAccessENS_14ArgumentAccessE"]
            pub fn ArgumentDescriptor_setAccess(
                this: *mut root::MTL::ArgumentDescriptor,
                access: root::MTL::ArgumentAccess,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18ArgumentDescriptor11textureTypeEv"]
            pub fn ArgumentDescriptor_textureType(
                this: *const root::MTL::ArgumentDescriptor,
            ) -> root::MTL::TextureType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor14setTextureTypeENS_11TextureTypeE"]
            pub fn ArgumentDescriptor_setTextureType(
                this: *mut root::MTL::ArgumentDescriptor,
                textureType: root::MTL::TextureType,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL18ArgumentDescriptor22constantBlockAlignmentEv"]
            pub fn ArgumentDescriptor_constantBlockAlignment(
                this: *const root::MTL::ArgumentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL18ArgumentDescriptor25setConstantBlockAlignmentEm"]
            pub fn ArgumentDescriptor_setConstantBlockAlignment(
                this: *mut root::MTL::ArgumentDescriptor,
                constantBlockAlignment: root::NS::UInteger,
            );
        }
        impl ArgumentDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ArgumentDescriptor {
                ArgumentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::ArgumentDescriptor {
                ArgumentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn argumentDescriptor() -> *mut root::MTL::ArgumentDescriptor {
                ArgumentDescriptor_argumentDescriptor()
            }
            #[inline]
            pub unsafe fn dataType(&self) -> root::MTL::DataType {
                ArgumentDescriptor_dataType(self)
            }
            #[inline]
            pub unsafe fn setDataType(&mut self, dataType: root::MTL::DataType) {
                ArgumentDescriptor_setDataType(self, dataType)
            }
            #[inline]
            pub unsafe fn index(&self) -> root::NS::UInteger {
                ArgumentDescriptor_index(self)
            }
            #[inline]
            pub unsafe fn setIndex(&mut self, index: root::NS::UInteger) {
                ArgumentDescriptor_setIndex(self, index)
            }
            #[inline]
            pub unsafe fn arrayLength(&self) -> root::NS::UInteger {
                ArgumentDescriptor_arrayLength(self)
            }
            #[inline]
            pub unsafe fn setArrayLength(&mut self, arrayLength: root::NS::UInteger) {
                ArgumentDescriptor_setArrayLength(self, arrayLength)
            }
            #[inline]
            pub unsafe fn access(&self) -> root::MTL::ArgumentAccess {
                ArgumentDescriptor_access(self)
            }
            #[inline]
            pub unsafe fn setAccess(&mut self, access: root::MTL::ArgumentAccess) {
                ArgumentDescriptor_setAccess(self, access)
            }
            #[inline]
            pub unsafe fn textureType(&self) -> root::MTL::TextureType {
                ArgumentDescriptor_textureType(self)
            }
            #[inline]
            pub unsafe fn setTextureType(&mut self, textureType: root::MTL::TextureType) {
                ArgumentDescriptor_setTextureType(self, textureType)
            }
            #[inline]
            pub unsafe fn constantBlockAlignment(&self) -> root::NS::UInteger {
                ArgumentDescriptor_constantBlockAlignment(self)
            }
            #[inline]
            pub unsafe fn setConstantBlockAlignment(
                &mut self,
                constantBlockAlignment: root::NS::UInteger,
            ) {
                ArgumentDescriptor_setConstantBlockAlignment(self, constantBlockAlignment)
            }
        }
        pub type DeviceNotificationName = *mut root::NS::String;
        pub type DeviceNotificationHandlerBlock = *mut ::std::os::raw::c_void;
        pub type DeviceNotificationHandlerFunction = [u64; 4usize];
        pub type AutoreleasedComputePipelineReflection = *mut root::MTL::ComputePipelineReflection;
        pub type AutoreleasedRenderPipelineReflection = *mut root::MTL::RenderPipelineReflection;
        pub type NewLibraryCompletionHandler = *mut ::std::os::raw::c_void;
        pub type NewLibraryCompletionHandlerFunction = [u64; 4usize];
        pub type NewRenderPipelineStateCompletionHandler = *mut ::std::os::raw::c_void;
        pub type NewRenderPipelineStateCompletionHandlerFunction = [u64; 4usize];
        pub type NewRenderPipelineStateWithReflectionCompletionHandler =
            *mut ::std::os::raw::c_void;
        pub type NewRenderPipelineStateWithReflectionCompletionHandlerFunction = [u64; 4usize];
        pub type NewComputePipelineStateCompletionHandler = *mut ::std::os::raw::c_void;
        pub type NewComputePipelineStateCompletionHandlerFunction = [u64; 4usize];
        pub type NewComputePipelineStateWithReflectionCompletionHandler =
            *mut ::std::os::raw::c_void;
        pub type NewComputePipelineStateWithReflectionCompletionHandlerFunction = [u64; 4usize];
        pub type Timestamp = u64;
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25CreateSystemDefaultDeviceEv"]
            pub fn CreateSystemDefaultDevice() -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14CopyAllDevicesEv"]
            pub fn CopyAllDevices() -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26CopyAllDevicesWithObserverEPPN2NS6ObjectEU13block_pointerFvPNS_6DeviceEPNS0_6StringEE"]
            pub fn CopyAllDevicesWithObserver(
                pOutObserver: *mut *mut root::NS::Object,
                handler: root::MTL::DeviceNotificationHandlerBlock,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26CopyAllDevicesWithObserverEPPN2NS6ObjectERKNSt3__18functionIFvPNS_6DeviceEPNS0_6StringEEEE"]
            pub fn CopyAllDevicesWithObserver1(
                pOutObserver: *mut *mut root::NS::Object,
                handler: *const root::MTL::DeviceNotificationHandlerFunction,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RemoveDeviceObserverEPKN2NS6ObjectE"]
            pub fn RemoveDeviceObserver(pObserver: *const root::NS::Object);
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Device {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKN2NS6StringEPKNS_14CompileOptionsERKNSt3__18functionIFvPNS_7LibraryEPNS1_5ErrorEEEE"]
            pub fn Device_newLibrary(
                this: *mut root::MTL::Device,
                pSource: *const root::NS::String,
                pOptions: *const root::MTL::CompileOptions,
                completionHandler: *const root::MTL::NewLibraryCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKNS_25StitchedLibraryDescriptorERKNSt3__18functionIFvPNS_7LibraryEPN2NS5ErrorEEEE"]
            pub fn Device_newLibrary1(
                this: *mut root::MTL::Device,
                pDescriptor: *const root::MTL::StitchedLibraryDescriptor,
                completionHandler: *const root::MTL::NewLibraryCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_24RenderPipelineDescriptorERKNSt3__18functionIFvPNS_19RenderPipelineStateEPN2NS5ErrorEEEE"]
            pub fn Device_newRenderPipelineState(
                this: *mut root::MTL::Device,
                pDescriptor: *const root::MTL::RenderPipelineDescriptor,
                completionHandler : * const root :: MTL :: NewRenderPipelineStateCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_24RenderPipelineDescriptorEmRKNSt3__18functionIFvPNS_19RenderPipelineStateEPNS_24RenderPipelineReflectionEPN2NS5ErrorEEEE"]
            pub fn Device_newRenderPipelineState1(
                this: *mut root::MTL::Device,
                pDescriptor: *const root::MTL::RenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewRenderPipelineStateWithReflectionCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_28TileRenderPipelineDescriptorEmRKNSt3__18functionIFvPNS_19RenderPipelineStateEPNS_24RenderPipelineReflectionEPN2NS5ErrorEEEE"]
            pub fn Device_newRenderPipelineState2(
                this: *mut root::MTL::Device,
                pDescriptor: *const root::MTL::TileRenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewRenderPipelineStateWithReflectionCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_8FunctionERKNSt3__18functionIFvPNS_20ComputePipelineStateEPN2NS5ErrorEEEE"]
            pub fn Device_newComputePipelineState(
                this: *mut root::MTL::Device,
                pFunction: *const root::MTL::Function,
                completionHandler : * const root :: MTL :: NewComputePipelineStateCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_8FunctionEmRKNSt3__18functionIFvPNS_20ComputePipelineStateEPNS_25ComputePipelineReflectionEPN2NS5ErrorEEEE"]
            pub fn Device_newComputePipelineState1(
                this: *mut root::MTL::Device,
                pFunction: *const root::MTL::Function,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_25ComputePipelineDescriptorEmRKNSt3__18functionIFvPNS_20ComputePipelineStateEPNS_25ComputePipelineReflectionEPN2NS5ErrorEEEE"]
            pub fn Device_newComputePipelineState2(
                this: *mut root::MTL::Device,
                pDescriptor: *const root::MTL::ComputePipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device10isHeadlessEv"]
            pub fn Device_isHeadless(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device4nameEv"]
            pub fn Device_name(this: *const root::MTL::Device) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device10registryIDEv"]
            pub fn Device_registryID(this: *const root::MTL::Device) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device24maxThreadsPerThreadgroupEv"]
            pub fn Device_maxThreadsPerThreadgroup(
                this: *const root::MTL::Device,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device8lowPowerEv"]
            pub fn Device_lowPower(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device8headlessEv"]
            pub fn Device_headless(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device9removableEv"]
            pub fn Device_removable(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device16hasUnifiedMemoryEv"]
            pub fn Device_hasUnifiedMemory(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device28recommendedMaxWorkingSetSizeEv"]
            pub fn Device_recommendedMaxWorkingSetSize(this: *const root::MTL::Device) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device8locationEv"]
            pub fn Device_location(this: *const root::MTL::Device) -> root::MTL::DeviceLocation;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device14locationNumberEv"]
            pub fn Device_locationNumber(this: *const root::MTL::Device) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device15maxTransferRateEv"]
            pub fn Device_maxTransferRate(this: *const root::MTL::Device) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device35depth24Stencil8PixelFormatSupportedEv"]
            pub fn Device_depth24Stencil8PixelFormatSupported(
                this: *const root::MTL::Device,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device23readWriteTextureSupportEv"]
            pub fn Device_readWriteTextureSupport(
                this: *const root::MTL::Device,
            ) -> root::MTL::ReadWriteTextureTier;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device22argumentBuffersSupportEv"]
            pub fn Device_argumentBuffersSupport(
                this: *const root::MTL::Device,
            ) -> root::MTL::ArgumentBuffersTier;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device26rasterOrderGroupsSupportedEv"]
            pub fn Device_rasterOrderGroupsSupported(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device27supports32BitFloatFilteringEv"]
            pub fn Device_supports32BitFloatFiltering(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device17supports32BitMSAAEv"]
            pub fn Device_supports32BitMSAA(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device23supportsQueryTextureLODEv"]
            pub fn Device_supportsQueryTextureLOD(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device28supportsBCTextureCompressionEv"]
            pub fn Device_supportsBCTextureCompression(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device30supportsPullModelInterpolationEv"]
            pub fn Device_supportsPullModelInterpolation(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device26barycentricCoordsSupportedEv"]
            pub fn Device_barycentricCoordsSupported(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device36supportsShaderBarycentricCoordinatesEv"]
            pub fn Device_supportsShaderBarycentricCoordinates(
                this: *const root::MTL::Device,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device20currentAllocatedSizeEv"]
            pub fn Device_currentAllocatedSize(
                this: *const root::MTL::Device,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device15newCommandQueueEv"]
            pub fn Device_newCommandQueue(
                this: *mut root::MTL::Device,
            ) -> *mut root::MTL::CommandQueue;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device15newCommandQueueEm"]
            pub fn Device_newCommandQueue1(
                this: *mut root::MTL::Device,
                maxCommandBufferCount: root::NS::UInteger,
            ) -> *mut root::MTL::CommandQueue;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23heapTextureSizeAndAlignEPKNS_17TextureDescriptorE"]
            pub fn Device_heapTextureSizeAndAlign(
                this: *mut root::MTL::Device,
                desc: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::SizeAndAlign;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22heapBufferSizeAndAlignEmm"]
            pub fn Device_heapBufferSizeAndAlign(
                this: *mut root::MTL::Device,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> root::MTL::SizeAndAlign;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device7newHeapEPKNS_14HeapDescriptorE"]
            pub fn Device_newHeap(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::HeapDescriptor,
            ) -> *mut root::MTL::Heap;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device9newBufferEmm"]
            pub fn Device_newBuffer(
                this: *mut root::MTL::Device,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device9newBufferEPKvmm"]
            pub fn Device_newBuffer1(
                this: *mut root::MTL::Device,
                pointer: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device9newBufferEPKvmmU13block_pointerFS1_PvmE"]
            pub fn Device_newBuffer2(
                this: *mut root::MTL::Device,
                pointer: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
                deallocator: *mut ::std::os::raw::c_void,
            ) -> *mut root::MTL::Buffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device20newDepthStencilStateEPKNS_22DepthStencilDescriptorE"]
            pub fn Device_newDepthStencilState(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::DepthStencilDescriptor,
            ) -> *mut root::MTL::DepthStencilState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newTextureEPKNS_17TextureDescriptorE"]
            pub fn Device_newTexture(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::TextureDescriptor,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newTextureEPKNS_17TextureDescriptorEP11__IOSurfacem"]
            pub fn Device_newTexture1(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::TextureDescriptor,
                iosurface: root::IOSurfaceRef,
                plane: root::NS::UInteger,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device16newSharedTextureEPKNS_17TextureDescriptorE"]
            pub fn Device_newSharedTexture(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::TextureDescriptor,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device16newSharedTextureEPKNS_19SharedTextureHandleE"]
            pub fn Device_newSharedTexture1(
                this: *mut root::MTL::Device,
                sharedHandle: *const root::MTL::SharedTextureHandle,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device15newSamplerStateEPKNS_17SamplerDescriptorE"]
            pub fn Device_newSamplerState(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::SamplerDescriptor,
            ) -> *mut root::MTL::SamplerState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device17newDefaultLibraryEv"]
            pub fn Device_newDefaultLibrary(
                this: *mut root::MTL::Device,
            ) -> *mut root::MTL::Library;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device17newDefaultLibraryEPKN2NS6BundleEPPNS1_5ErrorE"]
            pub fn Device_newDefaultLibrary1(
                this: *mut root::MTL::Device,
                bundle: *const root::NS::Bundle,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKN2NS6StringEPPNS1_5ErrorE"]
            pub fn Device_newLibrary2(
                this: *mut root::MTL::Device,
                filepath: *const root::NS::String,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKN2NS3URLEPPNS1_5ErrorE"]
            pub fn Device_newLibrary3(
                this: *mut root::MTL::Device,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEP15dispatch_data_sPPN2NS5ErrorE"]
            pub fn Device_newLibrary4(
                this: *mut root::MTL::Device,
                data: root::dispatch_data_t,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKN2NS6StringEPKNS_14CompileOptionsEPPNS1_5ErrorE"]
            pub fn Device_newLibrary5(
                this: *mut root::MTL::Device,
                source: *const root::NS::String,
                options: *const root::MTL::CompileOptions,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKN2NS6StringEPKNS_14CompileOptionsEU13block_pointerFvPNS_7LibraryEPNS1_5ErrorEE"]
            pub fn Device_newLibrary6(
                this: *mut root::MTL::Device,
                source: *const root::NS::String,
                options: *const root::MTL::CompileOptions,
                completionHandler: root::MTL::NewLibraryCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKNS_25StitchedLibraryDescriptorEPPN2NS5ErrorE"]
            pub fn Device_newLibrary7(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::StitchedLibraryDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device10newLibraryEPKNS_25StitchedLibraryDescriptorEU13block_pointerFvPNS_7LibraryEPN2NS5ErrorEE"]
            pub fn Device_newLibrary8(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::StitchedLibraryDescriptor,
                completionHandler: root::MTL::NewLibraryCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_24RenderPipelineDescriptorEPPN2NS5ErrorE"]
            pub fn Device_newRenderPipelineState3(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_24RenderPipelineDescriptorEmPKPNS_24RenderPipelineReflectionEPPN2NS5ErrorE"]
            pub fn Device_newRenderPipelineState4(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedRenderPipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_24RenderPipelineDescriptorEU13block_pointerFvPNS_19RenderPipelineStateEPN2NS5ErrorEE"]
            pub fn Device_newRenderPipelineState5(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                completionHandler: root::MTL::NewRenderPipelineStateCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_24RenderPipelineDescriptorEmU13block_pointerFvPNS_19RenderPipelineStateEPNS_24RenderPipelineReflectionEPN2NS5ErrorEE"]
            pub fn Device_newRenderPipelineState6(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler: root::MTL::NewRenderPipelineStateWithReflectionCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_8FunctionEPPN2NS5ErrorE"]
            pub fn Device_newComputePipelineState3(
                this: *mut root::MTL::Device,
                computeFunction: *const root::MTL::Function,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_8FunctionEmPKPNS_25ComputePipelineReflectionEPPN2NS5ErrorE"]
            pub fn Device_newComputePipelineState4(
                this: *mut root::MTL::Device,
                computeFunction: *const root::MTL::Function,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedComputePipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_8FunctionEU13block_pointerFvPNS_20ComputePipelineStateEPN2NS5ErrorEE"]
            pub fn Device_newComputePipelineState5(
                this: *mut root::MTL::Device,
                computeFunction: *const root::MTL::Function,
                completionHandler: root::MTL::NewComputePipelineStateCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_8FunctionEmU13block_pointerFvPNS_20ComputePipelineStateEPNS_25ComputePipelineReflectionEPN2NS5ErrorEE"]
            pub fn Device_newComputePipelineState6(
                this: *mut root::MTL::Device,
                computeFunction: *const root::MTL::Function,
                options: root::MTL::PipelineOption,
                completionHandler : root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_25ComputePipelineDescriptorEmPKPNS_25ComputePipelineReflectionEPPN2NS5ErrorE"]
            pub fn Device_newComputePipelineState7(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::ComputePipelineDescriptor,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedComputePipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newComputePipelineStateEPKNS_25ComputePipelineDescriptorEmU13block_pointerFvPNS_20ComputePipelineStateEPNS_25ComputePipelineReflectionEPN2NS5ErrorEE"]
            pub fn Device_newComputePipelineState8(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::ComputePipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device8newFenceEv"]
            pub fn Device_newFence(this: *mut root::MTL::Device) -> *mut root::MTL::Fence;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device18supportsFeatureSetENS_10FeatureSetE"]
            pub fn Device_supportsFeatureSet(
                this: *mut root::MTL::Device,
                featureSet: root::MTL::FeatureSet,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device14supportsFamilyENS_9GPUFamilyE"]
            pub fn Device_supportsFamily(
                this: *mut root::MTL::Device,
                gpuFamily: root::MTL::GPUFamily,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device26supportsTextureSampleCountEm"]
            pub fn Device_supportsTextureSampleCount(
                this: *mut root::MTL::Device,
                sampleCount: root::NS::UInteger,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device43minimumLinearTextureAlignmentForPixelFormatENS_11PixelFormatE"]
            pub fn Device_minimumLinearTextureAlignmentForPixelFormat(
                this: *mut root::MTL::Device,
                format: root::MTL::PixelFormat,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device43minimumTextureBufferAlignmentForPixelFormatENS_11PixelFormatE"]
            pub fn Device_minimumTextureBufferAlignmentForPixelFormat(
                this: *mut root::MTL::Device,
                format: root::MTL::PixelFormat,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_28TileRenderPipelineDescriptorEmPKPNS_24RenderPipelineReflectionEPPN2NS5ErrorE"]
            pub fn Device_newRenderPipelineState7(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::TileRenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedRenderPipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newRenderPipelineStateEPKNS_28TileRenderPipelineDescriptorEmU13block_pointerFvPNS_19RenderPipelineStateEPNS_24RenderPipelineReflectionEPN2NS5ErrorEE"]
            pub fn Device_newRenderPipelineState8(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::TileRenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler: root::MTL::NewRenderPipelineStateWithReflectionCompletionHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device26maxThreadgroupMemoryLengthEv"]
            pub fn Device_maxThreadgroupMemoryLength(
                this: *const root::MTL::Device,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device29maxArgumentBufferSamplerCountEv"]
            pub fn Device_maxArgumentBufferSamplerCount(
                this: *const root::MTL::Device,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device36programmableSamplePositionsSupportedEv"]
            pub fn Device_programmableSamplePositionsSupported(
                this: *const root::MTL::Device,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device25getDefaultSamplePositionsEPNS_14SamplePositionEm"]
            pub fn Device_getDefaultSamplePositions(
                this: *mut root::MTL::Device,
                positions: *mut root::MTL::SamplePosition,
                count: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device18newArgumentEncoderEPKN2NS5ArrayE"]
            pub fn Device_newArgumentEncoder(
                this: *mut root::MTL::Device,
                arguments: *const root::NS::Array,
            ) -> *mut root::MTL::ArgumentEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device28supportsRasterizationRateMapEm"]
            pub fn Device_supportsRasterizationRateMap(
                this: *mut root::MTL::Device,
                layerCount: root::NS::UInteger,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23newRasterizationRateMapEPKNS_30RasterizationRateMapDescriptorE"]
            pub fn Device_newRasterizationRateMap(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::RasterizationRateMapDescriptor,
            ) -> *mut root::MTL::RasterizationRateMap;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device24newIndirectCommandBufferEPKNS_31IndirectCommandBufferDescriptorEmm"]
            pub fn Device_newIndirectCommandBuffer(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::IndirectCommandBufferDescriptor,
                maxCount: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::IndirectCommandBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device8newEventEv"]
            pub fn Device_newEvent(this: *mut root::MTL::Device) -> *mut root::MTL::Event;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device14newSharedEventEv"]
            pub fn Device_newSharedEvent(
                this: *mut root::MTL::Device,
            ) -> *mut root::MTL::SharedEvent;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device14newSharedEventEPKNS_17SharedEventHandleE"]
            pub fn Device_newSharedEvent1(
                this: *mut root::MTL::Device,
                sharedEventHandle: *const root::MTL::SharedEventHandle,
            ) -> *mut root::MTL::SharedEvent;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device11peerGroupIDEv"]
            pub fn Device_peerGroupID(this: *const root::MTL::Device) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device9peerIndexEv"]
            pub fn Device_peerIndex(this: *const root::MTL::Device) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device9peerCountEv"]
            pub fn Device_peerCount(this: *const root::MTL::Device) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device14sparseTileSizeENS_11TextureTypeENS_11PixelFormatEm"]
            pub fn Device_sparseTileSize(
                this: *mut root::MTL::Device,
                textureType: root::MTL::TextureType,
                pixelFormat: root::MTL::PixelFormat,
                sampleCount: root::NS::UInteger,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device21sparseTileSizeInBytesEv"]
            pub fn Device_sparseTileSizeInBytes(
                this: *const root::MTL::Device,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device25convertSparsePixelRegionsEPKNS_6RegionEPS1_NS_4SizeENS_32SparseTextureRegionAlignmentModeEm"]
            pub fn Device_convertSparsePixelRegions(
                this: *mut root::MTL::Device,
                pixelRegions: *const root::MTL::Region,
                tileRegions: *mut root::MTL::Region,
                tileSize: root::MTL::Size,
                mode: root::MTL::SparseTextureRegionAlignmentMode,
                numRegions: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device24convertSparseTileRegionsEPKNS_6RegionEPS1_NS_4SizeEm"]
            pub fn Device_convertSparseTileRegions(
                this: *mut root::MTL::Device,
                tileRegions: *const root::MTL::Region,
                pixelRegions: *mut root::MTL::Region,
                tileSize: root::MTL::Size,
                numRegions: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device15maxBufferLengthEv"]
            pub fn Device_maxBufferLength(this: *const root::MTL::Device) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device11counterSetsEv"]
            pub fn Device_counterSets(this: *const root::MTL::Device) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device22newCounterSampleBufferEPKNS_29CounterSampleBufferDescriptorEPPN2NS5ErrorE"]
            pub fn Device_newCounterSampleBuffer(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::CounterSampleBufferDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::CounterSampleBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device16sampleTimestampsEPyS1_"]
            pub fn Device_sampleTimestamps(
                this: *mut root::MTL::Device,
                cpuTimestamp: *mut root::MTL::Timestamp,
                gpuTimestamp: *mut root::MTL::Timestamp,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device23supportsCounterSamplingENS_20CounterSamplingPointE"]
            pub fn Device_supportsCounterSampling(
                this: *mut root::MTL::Device,
                samplingPoint: root::MTL::CounterSamplingPoint,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device32supportsVertexAmplificationCountEm"]
            pub fn Device_supportsVertexAmplificationCount(
                this: *mut root::MTL::Device,
                count: root::NS::UInteger,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device24supportsDynamicLibrariesEv"]
            pub fn Device_supportsDynamicLibraries(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device30supportsRenderDynamicLibrariesEv"]
            pub fn Device_supportsRenderDynamicLibraries(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device17newDynamicLibraryEPKNS_7LibraryEPPN2NS5ErrorE"]
            pub fn Device_newDynamicLibrary(
                this: *mut root::MTL::Device,
                library: *const root::MTL::Library,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::DynamicLibrary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device17newDynamicLibraryEPKN2NS3URLEPPNS1_5ErrorE"]
            pub fn Device_newDynamicLibrary1(
                this: *mut root::MTL::Device,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::DynamicLibrary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device16newBinaryArchiveEPKNS_23BinaryArchiveDescriptorEPPN2NS5ErrorE"]
            pub fn Device_newBinaryArchive(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::BinaryArchiveDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::BinaryArchive;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device18supportsRaytracingEv"]
            pub fn Device_supportsRaytracing(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device26accelerationStructureSizesEPKNS_31AccelerationStructureDescriptorE"]
            pub fn Device_accelerationStructureSizes(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
            ) -> root::MTL::AccelerationStructureSizes;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device24newAccelerationStructureEm"]
            pub fn Device_newAccelerationStructure(
                this: *mut root::MTL::Device,
                size: root::NS::UInteger,
            ) -> *mut root::MTL::AccelerationStructure;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL6Device24newAccelerationStructureEPKNS_31AccelerationStructureDescriptorE"]
            pub fn Device_newAccelerationStructure1(
                this: *mut root::MTL::Device,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
            ) -> *mut root::MTL::AccelerationStructure;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device24supportsFunctionPointersEv"]
            pub fn Device_supportsFunctionPointers(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device34supportsFunctionPointersFromRenderEv"]
            pub fn Device_supportsFunctionPointersFromRender(
                this: *const root::MTL::Device,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device28supportsRaytracingFromRenderEv"]
            pub fn Device_supportsRaytracingFromRender(this: *const root::MTL::Device) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL6Device27supportsPrimitiveMotionBlurEv"]
            pub fn Device_supportsPrimitiveMotionBlur(this: *const root::MTL::Device) -> bool;
        }
        impl Device {
            #[inline]
            pub unsafe fn newLibrary(
                &mut self,
                pSource: *const root::NS::String,
                pOptions: *const root::MTL::CompileOptions,
                completionHandler: *const root::MTL::NewLibraryCompletionHandlerFunction,
            ) {
                Device_newLibrary(self, pSource, pOptions, completionHandler)
            }
            #[inline]
            pub unsafe fn newLibrary1(
                &mut self,
                pDescriptor: *const root::MTL::StitchedLibraryDescriptor,
                completionHandler: *const root::MTL::NewLibraryCompletionHandlerFunction,
            ) {
                Device_newLibrary1(self, pDescriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState(
                &mut self,
                pDescriptor: *const root::MTL::RenderPipelineDescriptor,
                completionHandler : * const root :: MTL :: NewRenderPipelineStateCompletionHandlerFunction,
            ) {
                Device_newRenderPipelineState(self, pDescriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState1(
                &mut self,
                pDescriptor: *const root::MTL::RenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewRenderPipelineStateWithReflectionCompletionHandlerFunction,
            ) {
                Device_newRenderPipelineState1(self, pDescriptor, options, completionHandler)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState2(
                &mut self,
                pDescriptor: *const root::MTL::TileRenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewRenderPipelineStateWithReflectionCompletionHandlerFunction,
            ) {
                Device_newRenderPipelineState2(self, pDescriptor, options, completionHandler)
            }
            #[inline]
            pub unsafe fn newComputePipelineState(
                &mut self,
                pFunction: *const root::MTL::Function,
                completionHandler : * const root :: MTL :: NewComputePipelineStateCompletionHandlerFunction,
            ) {
                Device_newComputePipelineState(self, pFunction, completionHandler)
            }
            #[inline]
            pub unsafe fn newComputePipelineState1(
                &mut self,
                pFunction: *const root::MTL::Function,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandlerFunction,
            ) {
                Device_newComputePipelineState1(self, pFunction, options, completionHandler)
            }
            #[inline]
            pub unsafe fn newComputePipelineState2(
                &mut self,
                pDescriptor: *const root::MTL::ComputePipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : * const root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandlerFunction,
            ) {
                Device_newComputePipelineState2(self, pDescriptor, options, completionHandler)
            }
            #[inline]
            pub unsafe fn isHeadless(&self) -> bool {
                Device_isHeadless(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                Device_name(self)
            }
            #[inline]
            pub unsafe fn registryID(&self) -> u64 {
                Device_registryID(self)
            }
            #[inline]
            pub unsafe fn maxThreadsPerThreadgroup(&self) -> root::MTL::Size {
                Device_maxThreadsPerThreadgroup(self)
            }
            #[inline]
            pub unsafe fn lowPower(&self) -> bool {
                Device_lowPower(self)
            }
            #[inline]
            pub unsafe fn headless(&self) -> bool {
                Device_headless(self)
            }
            #[inline]
            pub unsafe fn removable(&self) -> bool {
                Device_removable(self)
            }
            #[inline]
            pub unsafe fn hasUnifiedMemory(&self) -> bool {
                Device_hasUnifiedMemory(self)
            }
            #[inline]
            pub unsafe fn recommendedMaxWorkingSetSize(&self) -> u64 {
                Device_recommendedMaxWorkingSetSize(self)
            }
            #[inline]
            pub unsafe fn location(&self) -> root::MTL::DeviceLocation {
                Device_location(self)
            }
            #[inline]
            pub unsafe fn locationNumber(&self) -> root::NS::UInteger {
                Device_locationNumber(self)
            }
            #[inline]
            pub unsafe fn maxTransferRate(&self) -> u64 {
                Device_maxTransferRate(self)
            }
            #[inline]
            pub unsafe fn depth24Stencil8PixelFormatSupported(&self) -> bool {
                Device_depth24Stencil8PixelFormatSupported(self)
            }
            #[inline]
            pub unsafe fn readWriteTextureSupport(&self) -> root::MTL::ReadWriteTextureTier {
                Device_readWriteTextureSupport(self)
            }
            #[inline]
            pub unsafe fn argumentBuffersSupport(&self) -> root::MTL::ArgumentBuffersTier {
                Device_argumentBuffersSupport(self)
            }
            #[inline]
            pub unsafe fn rasterOrderGroupsSupported(&self) -> bool {
                Device_rasterOrderGroupsSupported(self)
            }
            #[inline]
            pub unsafe fn supports32BitFloatFiltering(&self) -> bool {
                Device_supports32BitFloatFiltering(self)
            }
            #[inline]
            pub unsafe fn supports32BitMSAA(&self) -> bool {
                Device_supports32BitMSAA(self)
            }
            #[inline]
            pub unsafe fn supportsQueryTextureLOD(&self) -> bool {
                Device_supportsQueryTextureLOD(self)
            }
            #[inline]
            pub unsafe fn supportsBCTextureCompression(&self) -> bool {
                Device_supportsBCTextureCompression(self)
            }
            #[inline]
            pub unsafe fn supportsPullModelInterpolation(&self) -> bool {
                Device_supportsPullModelInterpolation(self)
            }
            #[inline]
            pub unsafe fn barycentricCoordsSupported(&self) -> bool {
                Device_barycentricCoordsSupported(self)
            }
            #[inline]
            pub unsafe fn supportsShaderBarycentricCoordinates(&self) -> bool {
                Device_supportsShaderBarycentricCoordinates(self)
            }
            #[inline]
            pub unsafe fn currentAllocatedSize(&self) -> root::NS::UInteger {
                Device_currentAllocatedSize(self)
            }
            #[inline]
            pub unsafe fn newCommandQueue(&mut self) -> *mut root::MTL::CommandQueue {
                Device_newCommandQueue(self)
            }
            #[inline]
            pub unsafe fn newCommandQueue1(
                &mut self,
                maxCommandBufferCount: root::NS::UInteger,
            ) -> *mut root::MTL::CommandQueue {
                Device_newCommandQueue1(self, maxCommandBufferCount)
            }
            #[inline]
            pub unsafe fn heapTextureSizeAndAlign(
                &mut self,
                desc: *const root::MTL::TextureDescriptor,
            ) -> root::MTL::SizeAndAlign {
                Device_heapTextureSizeAndAlign(self, desc)
            }
            #[inline]
            pub unsafe fn heapBufferSizeAndAlign(
                &mut self,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> root::MTL::SizeAndAlign {
                Device_heapBufferSizeAndAlign(self, length, options)
            }
            #[inline]
            pub unsafe fn newHeap(
                &mut self,
                descriptor: *const root::MTL::HeapDescriptor,
            ) -> *mut root::MTL::Heap {
                Device_newHeap(self, descriptor)
            }
            #[inline]
            pub unsafe fn newBuffer(
                &mut self,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::Buffer {
                Device_newBuffer(self, length, options)
            }
            #[inline]
            pub unsafe fn newBuffer1(
                &mut self,
                pointer: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::Buffer {
                Device_newBuffer1(self, pointer, length, options)
            }
            #[inline]
            pub unsafe fn newBuffer2(
                &mut self,
                pointer: *const ::std::os::raw::c_void,
                length: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
                deallocator: *mut ::std::os::raw::c_void,
            ) -> *mut root::MTL::Buffer {
                Device_newBuffer2(self, pointer, length, options, deallocator)
            }
            #[inline]
            pub unsafe fn newDepthStencilState(
                &mut self,
                descriptor: *const root::MTL::DepthStencilDescriptor,
            ) -> *mut root::MTL::DepthStencilState {
                Device_newDepthStencilState(self, descriptor)
            }
            #[inline]
            pub unsafe fn newTexture(
                &mut self,
                descriptor: *const root::MTL::TextureDescriptor,
            ) -> *mut root::MTL::Texture {
                Device_newTexture(self, descriptor)
            }
            #[inline]
            pub unsafe fn newTexture1(
                &mut self,
                descriptor: *const root::MTL::TextureDescriptor,
                iosurface: root::IOSurfaceRef,
                plane: root::NS::UInteger,
            ) -> *mut root::MTL::Texture {
                Device_newTexture1(self, descriptor, iosurface, plane)
            }
            #[inline]
            pub unsafe fn newSharedTexture(
                &mut self,
                descriptor: *const root::MTL::TextureDescriptor,
            ) -> *mut root::MTL::Texture {
                Device_newSharedTexture(self, descriptor)
            }
            #[inline]
            pub unsafe fn newSharedTexture1(
                &mut self,
                sharedHandle: *const root::MTL::SharedTextureHandle,
            ) -> *mut root::MTL::Texture {
                Device_newSharedTexture1(self, sharedHandle)
            }
            #[inline]
            pub unsafe fn newSamplerState(
                &mut self,
                descriptor: *const root::MTL::SamplerDescriptor,
            ) -> *mut root::MTL::SamplerState {
                Device_newSamplerState(self, descriptor)
            }
            #[inline]
            pub unsafe fn newDefaultLibrary(&mut self) -> *mut root::MTL::Library {
                Device_newDefaultLibrary(self)
            }
            #[inline]
            pub unsafe fn newDefaultLibrary1(
                &mut self,
                bundle: *const root::NS::Bundle,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library {
                Device_newDefaultLibrary1(self, bundle, error)
            }
            #[inline]
            pub unsafe fn newLibrary2(
                &mut self,
                filepath: *const root::NS::String,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library {
                Device_newLibrary2(self, filepath, error)
            }
            #[inline]
            pub unsafe fn newLibrary3(
                &mut self,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library {
                Device_newLibrary3(self, url, error)
            }
            #[inline]
            pub unsafe fn newLibrary4(
                &mut self,
                data: root::dispatch_data_t,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library {
                Device_newLibrary4(self, data, error)
            }
            #[inline]
            pub unsafe fn newLibrary5(
                &mut self,
                source: *const root::NS::String,
                options: *const root::MTL::CompileOptions,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library {
                Device_newLibrary5(self, source, options, error)
            }
            #[inline]
            pub unsafe fn newLibrary6(
                &mut self,
                source: *const root::NS::String,
                options: *const root::MTL::CompileOptions,
                completionHandler: root::MTL::NewLibraryCompletionHandler,
            ) {
                Device_newLibrary6(self, source, options, completionHandler)
            }
            #[inline]
            pub unsafe fn newLibrary7(
                &mut self,
                descriptor: *const root::MTL::StitchedLibraryDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::Library {
                Device_newLibrary7(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn newLibrary8(
                &mut self,
                descriptor: *const root::MTL::StitchedLibraryDescriptor,
                completionHandler: root::MTL::NewLibraryCompletionHandler,
            ) {
                Device_newLibrary8(self, descriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState3(
                &mut self,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState {
                Device_newRenderPipelineState3(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState4(
                &mut self,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedRenderPipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState {
                Device_newRenderPipelineState4(self, descriptor, options, reflection, error)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState5(
                &mut self,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                completionHandler: root::MTL::NewRenderPipelineStateCompletionHandler,
            ) {
                Device_newRenderPipelineState5(self, descriptor, completionHandler)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState6(
                &mut self,
                descriptor: *const root::MTL::RenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler: root::MTL::NewRenderPipelineStateWithReflectionCompletionHandler,
            ) {
                Device_newRenderPipelineState6(self, descriptor, options, completionHandler)
            }
            #[inline]
            pub unsafe fn newComputePipelineState3(
                &mut self,
                computeFunction: *const root::MTL::Function,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState {
                Device_newComputePipelineState3(self, computeFunction, error)
            }
            #[inline]
            pub unsafe fn newComputePipelineState4(
                &mut self,
                computeFunction: *const root::MTL::Function,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedComputePipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState {
                Device_newComputePipelineState4(self, computeFunction, options, reflection, error)
            }
            #[inline]
            pub unsafe fn newComputePipelineState5(
                &mut self,
                computeFunction: *const root::MTL::Function,
                completionHandler: root::MTL::NewComputePipelineStateCompletionHandler,
            ) {
                Device_newComputePipelineState5(self, computeFunction, completionHandler)
            }
            #[inline]
            pub unsafe fn newComputePipelineState6(
                &mut self,
                computeFunction: *const root::MTL::Function,
                options: root::MTL::PipelineOption,
                completionHandler : root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandler,
            ) {
                Device_newComputePipelineState6(self, computeFunction, options, completionHandler)
            }
            #[inline]
            pub unsafe fn newComputePipelineState7(
                &mut self,
                descriptor: *const root::MTL::ComputePipelineDescriptor,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedComputePipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::ComputePipelineState {
                Device_newComputePipelineState7(self, descriptor, options, reflection, error)
            }
            #[inline]
            pub unsafe fn newComputePipelineState8(
                &mut self,
                descriptor: *const root::MTL::ComputePipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler : root :: MTL :: NewComputePipelineStateWithReflectionCompletionHandler,
            ) {
                Device_newComputePipelineState8(self, descriptor, options, completionHandler)
            }
            #[inline]
            pub unsafe fn newFence(&mut self) -> *mut root::MTL::Fence {
                Device_newFence(self)
            }
            #[inline]
            pub unsafe fn supportsFeatureSet(&mut self, featureSet: root::MTL::FeatureSet) -> bool {
                Device_supportsFeatureSet(self, featureSet)
            }
            #[inline]
            pub unsafe fn supportsFamily(&mut self, gpuFamily: root::MTL::GPUFamily) -> bool {
                Device_supportsFamily(self, gpuFamily)
            }
            #[inline]
            pub unsafe fn supportsTextureSampleCount(
                &mut self,
                sampleCount: root::NS::UInteger,
            ) -> bool {
                Device_supportsTextureSampleCount(self, sampleCount)
            }
            #[inline]
            pub unsafe fn minimumLinearTextureAlignmentForPixelFormat(
                &mut self,
                format: root::MTL::PixelFormat,
            ) -> root::NS::UInteger {
                Device_minimumLinearTextureAlignmentForPixelFormat(self, format)
            }
            #[inline]
            pub unsafe fn minimumTextureBufferAlignmentForPixelFormat(
                &mut self,
                format: root::MTL::PixelFormat,
            ) -> root::NS::UInteger {
                Device_minimumTextureBufferAlignmentForPixelFormat(self, format)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState7(
                &mut self,
                descriptor: *const root::MTL::TileRenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                reflection: *const root::MTL::AutoreleasedRenderPipelineReflection,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::RenderPipelineState {
                Device_newRenderPipelineState7(self, descriptor, options, reflection, error)
            }
            #[inline]
            pub unsafe fn newRenderPipelineState8(
                &mut self,
                descriptor: *const root::MTL::TileRenderPipelineDescriptor,
                options: root::MTL::PipelineOption,
                completionHandler: root::MTL::NewRenderPipelineStateWithReflectionCompletionHandler,
            ) {
                Device_newRenderPipelineState8(self, descriptor, options, completionHandler)
            }
            #[inline]
            pub unsafe fn maxThreadgroupMemoryLength(&self) -> root::NS::UInteger {
                Device_maxThreadgroupMemoryLength(self)
            }
            #[inline]
            pub unsafe fn maxArgumentBufferSamplerCount(&self) -> root::NS::UInteger {
                Device_maxArgumentBufferSamplerCount(self)
            }
            #[inline]
            pub unsafe fn programmableSamplePositionsSupported(&self) -> bool {
                Device_programmableSamplePositionsSupported(self)
            }
            #[inline]
            pub unsafe fn getDefaultSamplePositions(
                &mut self,
                positions: *mut root::MTL::SamplePosition,
                count: root::NS::UInteger,
            ) {
                Device_getDefaultSamplePositions(self, positions, count)
            }
            #[inline]
            pub unsafe fn newArgumentEncoder(
                &mut self,
                arguments: *const root::NS::Array,
            ) -> *mut root::MTL::ArgumentEncoder {
                Device_newArgumentEncoder(self, arguments)
            }
            #[inline]
            pub unsafe fn supportsRasterizationRateMap(
                &mut self,
                layerCount: root::NS::UInteger,
            ) -> bool {
                Device_supportsRasterizationRateMap(self, layerCount)
            }
            #[inline]
            pub unsafe fn newRasterizationRateMap(
                &mut self,
                descriptor: *const root::MTL::RasterizationRateMapDescriptor,
            ) -> *mut root::MTL::RasterizationRateMap {
                Device_newRasterizationRateMap(self, descriptor)
            }
            #[inline]
            pub unsafe fn newIndirectCommandBuffer(
                &mut self,
                descriptor: *const root::MTL::IndirectCommandBufferDescriptor,
                maxCount: root::NS::UInteger,
                options: root::MTL::ResourceOptions,
            ) -> *mut root::MTL::IndirectCommandBuffer {
                Device_newIndirectCommandBuffer(self, descriptor, maxCount, options)
            }
            #[inline]
            pub unsafe fn newEvent(&mut self) -> *mut root::MTL::Event {
                Device_newEvent(self)
            }
            #[inline]
            pub unsafe fn newSharedEvent(&mut self) -> *mut root::MTL::SharedEvent {
                Device_newSharedEvent(self)
            }
            #[inline]
            pub unsafe fn newSharedEvent1(
                &mut self,
                sharedEventHandle: *const root::MTL::SharedEventHandle,
            ) -> *mut root::MTL::SharedEvent {
                Device_newSharedEvent1(self, sharedEventHandle)
            }
            #[inline]
            pub unsafe fn peerGroupID(&self) -> u64 {
                Device_peerGroupID(self)
            }
            #[inline]
            pub unsafe fn peerIndex(&self) -> u32 {
                Device_peerIndex(self)
            }
            #[inline]
            pub unsafe fn peerCount(&self) -> u32 {
                Device_peerCount(self)
            }
            #[inline]
            pub unsafe fn sparseTileSize(
                &mut self,
                textureType: root::MTL::TextureType,
                pixelFormat: root::MTL::PixelFormat,
                sampleCount: root::NS::UInteger,
            ) -> root::MTL::Size {
                Device_sparseTileSize(self, textureType, pixelFormat, sampleCount)
            }
            #[inline]
            pub unsafe fn sparseTileSizeInBytes(&self) -> root::NS::UInteger {
                Device_sparseTileSizeInBytes(self)
            }
            #[inline]
            pub unsafe fn convertSparsePixelRegions(
                &mut self,
                pixelRegions: *const root::MTL::Region,
                tileRegions: *mut root::MTL::Region,
                tileSize: root::MTL::Size,
                mode: root::MTL::SparseTextureRegionAlignmentMode,
                numRegions: root::NS::UInteger,
            ) {
                Device_convertSparsePixelRegions(
                    self,
                    pixelRegions,
                    tileRegions,
                    tileSize,
                    mode,
                    numRegions,
                )
            }
            #[inline]
            pub unsafe fn convertSparseTileRegions(
                &mut self,
                tileRegions: *const root::MTL::Region,
                pixelRegions: *mut root::MTL::Region,
                tileSize: root::MTL::Size,
                numRegions: root::NS::UInteger,
            ) {
                Device_convertSparseTileRegions(
                    self,
                    tileRegions,
                    pixelRegions,
                    tileSize,
                    numRegions,
                )
            }
            #[inline]
            pub unsafe fn maxBufferLength(&self) -> root::NS::UInteger {
                Device_maxBufferLength(self)
            }
            #[inline]
            pub unsafe fn counterSets(&self) -> *mut root::NS::Array {
                Device_counterSets(self)
            }
            #[inline]
            pub unsafe fn newCounterSampleBuffer(
                &mut self,
                descriptor: *const root::MTL::CounterSampleBufferDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::CounterSampleBuffer {
                Device_newCounterSampleBuffer(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn sampleTimestamps(
                &mut self,
                cpuTimestamp: *mut root::MTL::Timestamp,
                gpuTimestamp: *mut root::MTL::Timestamp,
            ) {
                Device_sampleTimestamps(self, cpuTimestamp, gpuTimestamp)
            }
            #[inline]
            pub unsafe fn supportsCounterSampling(
                &mut self,
                samplingPoint: root::MTL::CounterSamplingPoint,
            ) -> bool {
                Device_supportsCounterSampling(self, samplingPoint)
            }
            #[inline]
            pub unsafe fn supportsVertexAmplificationCount(
                &mut self,
                count: root::NS::UInteger,
            ) -> bool {
                Device_supportsVertexAmplificationCount(self, count)
            }
            #[inline]
            pub unsafe fn supportsDynamicLibraries(&self) -> bool {
                Device_supportsDynamicLibraries(self)
            }
            #[inline]
            pub unsafe fn supportsRenderDynamicLibraries(&self) -> bool {
                Device_supportsRenderDynamicLibraries(self)
            }
            #[inline]
            pub unsafe fn newDynamicLibrary(
                &mut self,
                library: *const root::MTL::Library,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::DynamicLibrary {
                Device_newDynamicLibrary(self, library, error)
            }
            #[inline]
            pub unsafe fn newDynamicLibrary1(
                &mut self,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::DynamicLibrary {
                Device_newDynamicLibrary1(self, url, error)
            }
            #[inline]
            pub unsafe fn newBinaryArchive(
                &mut self,
                descriptor: *const root::MTL::BinaryArchiveDescriptor,
                error: *mut *mut root::NS::Error,
            ) -> *mut root::MTL::BinaryArchive {
                Device_newBinaryArchive(self, descriptor, error)
            }
            #[inline]
            pub unsafe fn supportsRaytracing(&self) -> bool {
                Device_supportsRaytracing(self)
            }
            #[inline]
            pub unsafe fn accelerationStructureSizes(
                &mut self,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
            ) -> root::MTL::AccelerationStructureSizes {
                Device_accelerationStructureSizes(self, descriptor)
            }
            #[inline]
            pub unsafe fn newAccelerationStructure(
                &mut self,
                size: root::NS::UInteger,
            ) -> *mut root::MTL::AccelerationStructure {
                Device_newAccelerationStructure(self, size)
            }
            #[inline]
            pub unsafe fn newAccelerationStructure1(
                &mut self,
                descriptor: *const root::MTL::AccelerationStructureDescriptor,
            ) -> *mut root::MTL::AccelerationStructure {
                Device_newAccelerationStructure1(self, descriptor)
            }
            #[inline]
            pub unsafe fn supportsFunctionPointers(&self) -> bool {
                Device_supportsFunctionPointers(self)
            }
            #[inline]
            pub unsafe fn supportsFunctionPointersFromRender(&self) -> bool {
                Device_supportsFunctionPointersFromRender(self)
            }
            #[inline]
            pub unsafe fn supportsRaytracingFromRender(&self) -> bool {
                Device_supportsRaytracingFromRender(self)
            }
            #[inline]
            pub unsafe fn supportsPrimitiveMotionBlur(&self) -> bool {
                Device_supportsPrimitiveMotionBlur(self)
            }
        }
        pub type DrawablePresentedHandler = *mut ::std::os::raw::c_void;
        pub type DrawablePresentedHandlerFunction = [u64; 4usize];
        #[repr(C)]
        #[derive(Debug)]
        pub struct Drawable {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Drawable19addPresentedHandlerERKNSt3__18functionIFvPS0_EEE"]
            pub fn Drawable_addPresentedHandler(
                this: *mut root::MTL::Drawable,
                function: *const root::MTL::DrawablePresentedHandlerFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Drawable7presentEv"]
            pub fn Drawable_present(this: *mut root::MTL::Drawable);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Drawable13presentAtTimeEd"]
            pub fn Drawable_presentAtTime(
                this: *mut root::MTL::Drawable,
                presentationTime: root::CFTimeInterval,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Drawable27presentAfterMinimumDurationEd"]
            pub fn Drawable_presentAfterMinimumDuration(
                this: *mut root::MTL::Drawable,
                duration: root::CFTimeInterval,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL8Drawable19addPresentedHandlerEU13block_pointerFvPS0_E"]
            pub fn Drawable_addPresentedHandler1(
                this: *mut root::MTL::Drawable,
                block: root::MTL::DrawablePresentedHandler,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Drawable13presentedTimeEv"]
            pub fn Drawable_presentedTime(this: *const root::MTL::Drawable)
                -> root::CFTimeInterval;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL8Drawable10drawableIDEv"]
            pub fn Drawable_drawableID(this: *const root::MTL::Drawable) -> root::NS::UInteger;
        }
        impl Drawable {
            #[inline]
            pub unsafe fn addPresentedHandler(
                &mut self,
                function: *const root::MTL::DrawablePresentedHandlerFunction,
            ) {
                Drawable_addPresentedHandler(self, function)
            }
            #[inline]
            pub unsafe fn present(&mut self) {
                Drawable_present(self)
            }
            #[inline]
            pub unsafe fn presentAtTime(&mut self, presentationTime: root::CFTimeInterval) {
                Drawable_presentAtTime(self, presentationTime)
            }
            #[inline]
            pub unsafe fn presentAfterMinimumDuration(&mut self, duration: root::CFTimeInterval) {
                Drawable_presentAfterMinimumDuration(self, duration)
            }
            #[inline]
            pub unsafe fn addPresentedHandler1(
                &mut self,
                block: root::MTL::DrawablePresentedHandler,
            ) {
                Drawable_addPresentedHandler1(self, block)
            }
            #[inline]
            pub unsafe fn presentedTime(&self) -> root::CFTimeInterval {
                Drawable_presentedTime(self)
            }
            #[inline]
            pub unsafe fn drawableID(&self) -> root::NS::UInteger {
                Drawable_drawableID(self)
            }
        }
        pub const DynamicLibraryError_DynamicLibraryErrorNone: root::MTL::DynamicLibraryError = 0;
        pub const DynamicLibraryError_DynamicLibraryErrorInvalidFile:
            root::MTL::DynamicLibraryError = 1;
        pub const DynamicLibraryError_DynamicLibraryErrorCompilationFailure:
            root::MTL::DynamicLibraryError = 2;
        pub const DynamicLibraryError_DynamicLibraryErrorUnresolvedInstallName:
            root::MTL::DynamicLibraryError = 3;
        pub const DynamicLibraryError_DynamicLibraryErrorDependencyLoadFailure:
            root::MTL::DynamicLibraryError = 4;
        pub const DynamicLibraryError_DynamicLibraryErrorUnsupported:
            root::MTL::DynamicLibraryError = 5;
        pub type DynamicLibraryError = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct DynamicLibrary {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14DynamicLibrary5labelEv"]
            pub fn DynamicLibrary_label(
                this: *const root::MTL::DynamicLibrary,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14DynamicLibrary8setLabelEPKN2NS6StringE"]
            pub fn DynamicLibrary_setLabel(
                this: *mut root::MTL::DynamicLibrary,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14DynamicLibrary6deviceEv"]
            pub fn DynamicLibrary_device(
                this: *const root::MTL::DynamicLibrary,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL14DynamicLibrary11installNameEv"]
            pub fn DynamicLibrary_installName(
                this: *const root::MTL::DynamicLibrary,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL14DynamicLibrary14serializeToURLEPKN2NS3URLEPPNS1_5ErrorE"]
            pub fn DynamicLibrary_serializeToURL(
                this: *mut root::MTL::DynamicLibrary,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> bool;
        }
        impl DynamicLibrary {
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                DynamicLibrary_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                DynamicLibrary_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                DynamicLibrary_device(self)
            }
            #[inline]
            pub unsafe fn installName(&self) -> *mut root::NS::String {
                DynamicLibrary_installName(self)
            }
            #[inline]
            pub unsafe fn serializeToURL(
                &mut self,
                url: *const root::NS::URL,
                error: *mut *mut root::NS::Error,
            ) -> bool {
                DynamicLibrary_serializeToURL(self, url, error)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Event {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL5Event6deviceEv"]
            pub fn Event_device(this: *const root::MTL::Event) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL5Event5labelEv"]
            pub fn Event_label(this: *const root::MTL::Event) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL5Event8setLabelEPKN2NS6StringE"]
            pub fn Event_setLabel(this: *mut root::MTL::Event, label: *const root::NS::String);
        }
        impl Event {
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                Event_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                Event_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                Event_setLabel(self, label)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct SharedEventListener {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19SharedEventListener5allocEv"]
            pub fn SharedEventListener_alloc() -> *mut root::MTL::SharedEventListener;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19SharedEventListener4initEv"]
            pub fn SharedEventListener_init(
                this: *mut root::MTL::SharedEventListener,
            ) -> *mut root::MTL::SharedEventListener;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL19SharedEventListener4initEP16dispatch_queue_s"]
            pub fn SharedEventListener_init1(
                this: *mut root::MTL::SharedEventListener,
                dispatchQueue: root::dispatch_queue_t,
            ) -> *mut root::MTL::SharedEventListener;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL19SharedEventListener13dispatchQueueEv"]
            pub fn SharedEventListener_dispatchQueue(
                this: *const root::MTL::SharedEventListener,
            ) -> root::dispatch_queue_t;
        }
        impl SharedEventListener {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::SharedEventListener {
                SharedEventListener_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::SharedEventListener {
                SharedEventListener_init(self)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                dispatchQueue: root::dispatch_queue_t,
            ) -> *mut root::MTL::SharedEventListener {
                SharedEventListener_init1(self, dispatchQueue)
            }
            #[inline]
            pub unsafe fn dispatchQueue(&self) -> root::dispatch_queue_t {
                SharedEventListener_dispatchQueue(self)
            }
        }
        pub type SharedEventNotificationBlock = *mut ::std::os::raw::c_void;
        #[repr(C)]
        #[derive(Debug)]
        pub struct SharedEvent {
            pub _base: root::NS::Referencing<root::MTL::Event>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL11SharedEvent14notifyListenerEPKNS_19SharedEventListenerEyU13block_pointerFvPS0_yE"]
            pub fn SharedEvent_notifyListener(
                this: *mut root::MTL::SharedEvent,
                listener: *const root::MTL::SharedEventListener,
                value: u64,
                block: root::MTL::SharedEventNotificationBlock,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL11SharedEvent20newSharedEventHandleEv"]
            pub fn SharedEvent_newSharedEventHandle(
                this: *mut root::MTL::SharedEvent,
            ) -> *mut root::MTL::SharedEventHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11SharedEvent13signaledValueEv"]
            pub fn SharedEvent_signaledValue(this: *const root::MTL::SharedEvent) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL11SharedEvent16setSignaledValueEy"]
            pub fn SharedEvent_setSignaledValue(
                this: *mut root::MTL::SharedEvent,
                signaledValue: u64,
            );
        }
        impl SharedEvent {
            #[inline]
            pub unsafe fn notifyListener(
                &mut self,
                listener: *const root::MTL::SharedEventListener,
                value: u64,
                block: root::MTL::SharedEventNotificationBlock,
            ) {
                SharedEvent_notifyListener(self, listener, value, block)
            }
            #[inline]
            pub unsafe fn newSharedEventHandle(&mut self) -> *mut root::MTL::SharedEventHandle {
                SharedEvent_newSharedEventHandle(self)
            }
            #[inline]
            pub unsafe fn signaledValue(&self) -> u64 {
                SharedEvent_signaledValue(self)
            }
            #[inline]
            pub unsafe fn setSignaledValue(&mut self, signaledValue: u64) {
                SharedEvent_setSignaledValue(self, signaledValue)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct SharedEventHandle {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SharedEventHandle5allocEv"]
            pub fn SharedEventHandle_alloc() -> *mut root::MTL::SharedEventHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL17SharedEventHandle4initEv"]
            pub fn SharedEventHandle_init(
                this: *mut root::MTL::SharedEventHandle,
            ) -> *mut root::MTL::SharedEventHandle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL17SharedEventHandle5labelEv"]
            pub fn SharedEventHandle_label(
                this: *const root::MTL::SharedEventHandle,
            ) -> *mut root::NS::String;
        }
        impl SharedEventHandle {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::SharedEventHandle {
                SharedEventHandle_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::SharedEventHandle {
                SharedEventHandle_init(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                SharedEventHandle_label(self)
            }
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct SharedEventHandlePrivate {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Fence {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL5Fence6deviceEv"]
            pub fn Fence_device(this: *const root::MTL::Fence) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL5Fence5labelEv"]
            pub fn Fence_label(this: *const root::MTL::Fence) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL5Fence8setLabelEPKN2NS6StringE"]
            pub fn Fence_setLabel(this: *mut root::MTL::Fence, label: *const root::NS::String);
        }
        impl Fence {
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                Fence_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                Fence_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                Fence_setLabel(self, label)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionConstantValues {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionConstantValues5allocEv"]
            pub fn FunctionConstantValues_alloc() -> *mut root::MTL::FunctionConstantValues;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionConstantValues4initEv"]
            pub fn FunctionConstantValues_init(
                this: *mut root::MTL::FunctionConstantValues,
            ) -> *mut root::MTL::FunctionConstantValues;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionConstantValues16setConstantValueEPKvNS_8DataTypeEm"]
            pub fn FunctionConstantValues_setConstantValue(
                this: *mut root::MTL::FunctionConstantValues,
                value: *const ::std::os::raw::c_void,
                type_: root::MTL::DataType,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionConstantValues17setConstantValuesEPKvNS_8DataTypeEN2NS5RangeE"]
            pub fn FunctionConstantValues_setConstantValues(
                this: *mut root::MTL::FunctionConstantValues,
                values: *const ::std::os::raw::c_void,
                type_: root::MTL::DataType,
                range: root::NS::Range,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionConstantValues16setConstantValueEPKvNS_8DataTypeEPKN2NS6StringE"]
            pub fn FunctionConstantValues_setConstantValue1(
                this: *mut root::MTL::FunctionConstantValues,
                value: *const ::std::os::raw::c_void,
                type_: root::MTL::DataType,
                name: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionConstantValues5resetEv"]
            pub fn FunctionConstantValues_reset(this: *mut root::MTL::FunctionConstantValues);
        }
        impl FunctionConstantValues {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::FunctionConstantValues {
                FunctionConstantValues_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::FunctionConstantValues {
                FunctionConstantValues_init(self)
            }
            #[inline]
            pub unsafe fn setConstantValue(
                &mut self,
                value: *const ::std::os::raw::c_void,
                type_: root::MTL::DataType,
                index: root::NS::UInteger,
            ) {
                FunctionConstantValues_setConstantValue(self, value, type_, index)
            }
            #[inline]
            pub unsafe fn setConstantValues(
                &mut self,
                values: *const ::std::os::raw::c_void,
                type_: root::MTL::DataType,
                range: root::NS::Range,
            ) {
                FunctionConstantValues_setConstantValues(self, values, type_, range)
            }
            #[inline]
            pub unsafe fn setConstantValue1(
                &mut self,
                value: *const ::std::os::raw::c_void,
                type_: root::MTL::DataType,
                name: *const root::NS::String,
            ) {
                FunctionConstantValues_setConstantValue1(self, value, type_, name)
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                FunctionConstantValues_reset(self)
            }
        }
        pub const FunctionLogType_FunctionLogTypeValidation: root::MTL::FunctionLogType = 0;
        pub type FunctionLogType = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct LogContainer {
            pub _base: root::NS::Referencing<root::NS::FastEnumeration>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionLogDebugLocation {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24FunctionLogDebugLocation12functionNameEv"]
            pub fn FunctionLogDebugLocation_functionName(
                this: *const root::MTL::FunctionLogDebugLocation,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24FunctionLogDebugLocation3URLEv"]
            pub fn FunctionLogDebugLocation_URL(
                this: *const root::MTL::FunctionLogDebugLocation,
            ) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24FunctionLogDebugLocation4lineEv"]
            pub fn FunctionLogDebugLocation_line(
                this: *const root::MTL::FunctionLogDebugLocation,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24FunctionLogDebugLocation6columnEv"]
            pub fn FunctionLogDebugLocation_column(
                this: *const root::MTL::FunctionLogDebugLocation,
            ) -> root::NS::UInteger;
        }
        impl FunctionLogDebugLocation {
            #[inline]
            pub unsafe fn functionName(&self) -> *mut root::NS::String {
                FunctionLogDebugLocation_functionName(self)
            }
            #[inline]
            pub unsafe fn URL(&self) -> *mut root::NS::URL {
                FunctionLogDebugLocation_URL(self)
            }
            #[inline]
            pub unsafe fn line(&self) -> root::NS::UInteger {
                FunctionLogDebugLocation_line(self)
            }
            #[inline]
            pub unsafe fn column(&self) -> root::NS::UInteger {
                FunctionLogDebugLocation_column(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionLog {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11FunctionLog4typeEv"]
            pub fn FunctionLog_type(
                this: *const root::MTL::FunctionLog,
            ) -> root::MTL::FunctionLogType;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11FunctionLog12encoderLabelEv"]
            pub fn FunctionLog_encoderLabel(
                this: *const root::MTL::FunctionLog,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11FunctionLog8functionEv"]
            pub fn FunctionLog_function(
                this: *const root::MTL::FunctionLog,
            ) -> *mut root::MTL::Function;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL11FunctionLog13debugLocationEv"]
            pub fn FunctionLog_debugLocation(
                this: *const root::MTL::FunctionLog,
            ) -> *mut root::MTL::FunctionLogDebugLocation;
        }
        impl FunctionLog {
            #[inline]
            pub unsafe fn type_(&self) -> root::MTL::FunctionLogType {
                FunctionLog_type(self)
            }
            #[inline]
            pub unsafe fn encoderLabel(&self) -> *mut root::NS::String {
                FunctionLog_encoderLabel(self)
            }
            #[inline]
            pub unsafe fn function(&self) -> *mut root::MTL::Function {
                FunctionLog_function(self)
            }
            #[inline]
            pub unsafe fn debugLocation(&self) -> *mut root::MTL::FunctionLogDebugLocation {
                FunctionLog_debugLocation(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionStitchingAttribute {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionStitchingAttributeAlwaysInline {
            pub _base: root::NS::Referencing<root::MTL::FunctionStitchingAttribute>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL38FunctionStitchingAttributeAlwaysInline5allocEv"]
            pub fn FunctionStitchingAttributeAlwaysInline_alloc(
            ) -> *mut root::MTL::FunctionStitchingAttributeAlwaysInline;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL38FunctionStitchingAttributeAlwaysInline4initEv"]
            pub fn FunctionStitchingAttributeAlwaysInline_init(
                this: *mut root::MTL::FunctionStitchingAttributeAlwaysInline,
            ) -> *mut root::MTL::FunctionStitchingAttributeAlwaysInline;
        }
        impl FunctionStitchingAttributeAlwaysInline {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::FunctionStitchingAttributeAlwaysInline {
                FunctionStitchingAttributeAlwaysInline_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::FunctionStitchingAttributeAlwaysInline {
                FunctionStitchingAttributeAlwaysInline_init(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionStitchingNode {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionStitchingInputNode {
            pub _base: root::NS::Referencing<root::MTL::FunctionStitchingNode>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26FunctionStitchingInputNode5allocEv"]
            pub fn FunctionStitchingInputNode_alloc() -> *mut root::MTL::FunctionStitchingInputNode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26FunctionStitchingInputNode4initEv"]
            pub fn FunctionStitchingInputNode_init(
                this: *mut root::MTL::FunctionStitchingInputNode,
            ) -> *mut root::MTL::FunctionStitchingInputNode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL26FunctionStitchingInputNode13argumentIndexEv"]
            pub fn FunctionStitchingInputNode_argumentIndex(
                this: *const root::MTL::FunctionStitchingInputNode,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26FunctionStitchingInputNode16setArgumentIndexEm"]
            pub fn FunctionStitchingInputNode_setArgumentIndex(
                this: *mut root::MTL::FunctionStitchingInputNode,
                argumentIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL26FunctionStitchingInputNode4initEm"]
            pub fn FunctionStitchingInputNode_init1(
                this: *mut root::MTL::FunctionStitchingInputNode,
                argument: root::NS::UInteger,
            ) -> *mut root::MTL::FunctionStitchingInputNode;
        }
        impl FunctionStitchingInputNode {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::FunctionStitchingInputNode {
                FunctionStitchingInputNode_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::FunctionStitchingInputNode {
                FunctionStitchingInputNode_init(self)
            }
            #[inline]
            pub unsafe fn argumentIndex(&self) -> root::NS::UInteger {
                FunctionStitchingInputNode_argumentIndex(self)
            }
            #[inline]
            pub unsafe fn setArgumentIndex(&mut self, argumentIndex: root::NS::UInteger) {
                FunctionStitchingInputNode_setArgumentIndex(self, argumentIndex)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                argument: root::NS::UInteger,
            ) -> *mut root::MTL::FunctionStitchingInputNode {
                FunctionStitchingInputNode_init1(self, argument)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionStitchingFunctionNode {
            pub _base: root::NS::Referencing<root::MTL::FunctionStitchingNode>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29FunctionStitchingFunctionNode5allocEv"]
            pub fn FunctionStitchingFunctionNode_alloc(
            ) -> *mut root::MTL::FunctionStitchingFunctionNode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29FunctionStitchingFunctionNode4initEv"]
            pub fn FunctionStitchingFunctionNode_init(
                this: *mut root::MTL::FunctionStitchingFunctionNode,
            ) -> *mut root::MTL::FunctionStitchingFunctionNode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL29FunctionStitchingFunctionNode4nameEv"]
            pub fn FunctionStitchingFunctionNode_name(
                this: *const root::MTL::FunctionStitchingFunctionNode,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29FunctionStitchingFunctionNode7setNameEPKN2NS6StringE"]
            pub fn FunctionStitchingFunctionNode_setName(
                this: *mut root::MTL::FunctionStitchingFunctionNode,
                name: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL29FunctionStitchingFunctionNode9argumentsEv"]
            pub fn FunctionStitchingFunctionNode_arguments(
                this: *const root::MTL::FunctionStitchingFunctionNode,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29FunctionStitchingFunctionNode12setArgumentsEPKN2NS5ArrayE"]
            pub fn FunctionStitchingFunctionNode_setArguments(
                this: *mut root::MTL::FunctionStitchingFunctionNode,
                arguments: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL29FunctionStitchingFunctionNode19controlDependenciesEv"]
            pub fn FunctionStitchingFunctionNode_controlDependencies(
                this: *const root::MTL::FunctionStitchingFunctionNode,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29FunctionStitchingFunctionNode22setControlDependenciesEPKN2NS5ArrayE"]
            pub fn FunctionStitchingFunctionNode_setControlDependencies(
                this: *mut root::MTL::FunctionStitchingFunctionNode,
                controlDependencies: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29FunctionStitchingFunctionNode4initEPKN2NS6StringEPKNS1_5ArrayES7_"]
            pub fn FunctionStitchingFunctionNode_init1(
                this: *mut root::MTL::FunctionStitchingFunctionNode,
                name: *const root::NS::String,
                arguments: *const root::NS::Array,
                controlDependencies: *const root::NS::Array,
            ) -> *mut root::MTL::FunctionStitchingFunctionNode;
        }
        impl FunctionStitchingFunctionNode {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::FunctionStitchingFunctionNode {
                FunctionStitchingFunctionNode_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::FunctionStitchingFunctionNode {
                FunctionStitchingFunctionNode_init(self)
            }
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                FunctionStitchingFunctionNode_name(self)
            }
            #[inline]
            pub unsafe fn setName(&mut self, name: *const root::NS::String) {
                FunctionStitchingFunctionNode_setName(self, name)
            }
            #[inline]
            pub unsafe fn arguments(&self) -> *mut root::NS::Array {
                FunctionStitchingFunctionNode_arguments(self)
            }
            #[inline]
            pub unsafe fn setArguments(&mut self, arguments: *const root::NS::Array) {
                FunctionStitchingFunctionNode_setArguments(self, arguments)
            }
            #[inline]
            pub unsafe fn controlDependencies(&self) -> *mut root::NS::Array {
                FunctionStitchingFunctionNode_controlDependencies(self)
            }
            #[inline]
            pub unsafe fn setControlDependencies(
                &mut self,
                controlDependencies: *const root::NS::Array,
            ) {
                FunctionStitchingFunctionNode_setControlDependencies(self, controlDependencies)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                name: *const root::NS::String,
                arguments: *const root::NS::Array,
                controlDependencies: *const root::NS::Array,
            ) -> *mut root::MTL::FunctionStitchingFunctionNode {
                FunctionStitchingFunctionNode_init1(self, name, arguments, controlDependencies)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FunctionStitchingGraph {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionStitchingGraph5allocEv"]
            pub fn FunctionStitchingGraph_alloc() -> *mut root::MTL::FunctionStitchingGraph;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionStitchingGraph4initEv"]
            pub fn FunctionStitchingGraph_init(
                this: *mut root::MTL::FunctionStitchingGraph,
            ) -> *mut root::MTL::FunctionStitchingGraph;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22FunctionStitchingGraph12functionNameEv"]
            pub fn FunctionStitchingGraph_functionName(
                this: *const root::MTL::FunctionStitchingGraph,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionStitchingGraph15setFunctionNameEPKN2NS6StringE"]
            pub fn FunctionStitchingGraph_setFunctionName(
                this: *mut root::MTL::FunctionStitchingGraph,
                functionName: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22FunctionStitchingGraph5nodesEv"]
            pub fn FunctionStitchingGraph_nodes(
                this: *const root::MTL::FunctionStitchingGraph,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionStitchingGraph8setNodesEPKN2NS5ArrayE"]
            pub fn FunctionStitchingGraph_setNodes(
                this: *mut root::MTL::FunctionStitchingGraph,
                nodes: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22FunctionStitchingGraph10outputNodeEv"]
            pub fn FunctionStitchingGraph_outputNode(
                this: *const root::MTL::FunctionStitchingGraph,
            ) -> *mut root::MTL::FunctionStitchingFunctionNode;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionStitchingGraph13setOutputNodeEPKNS_29FunctionStitchingFunctionNodeE"]
            pub fn FunctionStitchingGraph_setOutputNode(
                this: *mut root::MTL::FunctionStitchingGraph,
                outputNode: *const root::MTL::FunctionStitchingFunctionNode,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL22FunctionStitchingGraph10attributesEv"]
            pub fn FunctionStitchingGraph_attributes(
                this: *const root::MTL::FunctionStitchingGraph,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionStitchingGraph13setAttributesEPKN2NS5ArrayE"]
            pub fn FunctionStitchingGraph_setAttributes(
                this: *mut root::MTL::FunctionStitchingGraph,
                attributes: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22FunctionStitchingGraph4initEPKN2NS6StringEPKNS1_5ArrayEPKNS_29FunctionStitchingFunctionNodeES7_"]
            pub fn FunctionStitchingGraph_init1(
                this: *mut root::MTL::FunctionStitchingGraph,
                functionName: *const root::NS::String,
                nodes: *const root::NS::Array,
                outputNode: *const root::MTL::FunctionStitchingFunctionNode,
                attributes: *const root::NS::Array,
            ) -> *mut root::MTL::FunctionStitchingGraph;
        }
        impl FunctionStitchingGraph {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::FunctionStitchingGraph {
                FunctionStitchingGraph_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::FunctionStitchingGraph {
                FunctionStitchingGraph_init(self)
            }
            #[inline]
            pub unsafe fn functionName(&self) -> *mut root::NS::String {
                FunctionStitchingGraph_functionName(self)
            }
            #[inline]
            pub unsafe fn setFunctionName(&mut self, functionName: *const root::NS::String) {
                FunctionStitchingGraph_setFunctionName(self, functionName)
            }
            #[inline]
            pub unsafe fn nodes(&self) -> *mut root::NS::Array {
                FunctionStitchingGraph_nodes(self)
            }
            #[inline]
            pub unsafe fn setNodes(&mut self, nodes: *const root::NS::Array) {
                FunctionStitchingGraph_setNodes(self, nodes)
            }
            #[inline]
            pub unsafe fn outputNode(&self) -> *mut root::MTL::FunctionStitchingFunctionNode {
                FunctionStitchingGraph_outputNode(self)
            }
            #[inline]
            pub unsafe fn setOutputNode(
                &mut self,
                outputNode: *const root::MTL::FunctionStitchingFunctionNode,
            ) {
                FunctionStitchingGraph_setOutputNode(self, outputNode)
            }
            #[inline]
            pub unsafe fn attributes(&self) -> *mut root::NS::Array {
                FunctionStitchingGraph_attributes(self)
            }
            #[inline]
            pub unsafe fn setAttributes(&mut self, attributes: *const root::NS::Array) {
                FunctionStitchingGraph_setAttributes(self, attributes)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                functionName: *const root::NS::String,
                nodes: *const root::NS::Array,
                outputNode: *const root::MTL::FunctionStitchingFunctionNode,
                attributes: *const root::NS::Array,
            ) -> *mut root::MTL::FunctionStitchingGraph {
                FunctionStitchingGraph_init1(self, functionName, nodes, outputNode, attributes)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct StitchedLibraryDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25StitchedLibraryDescriptor5allocEv"]
            pub fn StitchedLibraryDescriptor_alloc() -> *mut root::MTL::StitchedLibraryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25StitchedLibraryDescriptor4initEv"]
            pub fn StitchedLibraryDescriptor_init(
                this: *mut root::MTL::StitchedLibraryDescriptor,
            ) -> *mut root::MTL::StitchedLibraryDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25StitchedLibraryDescriptor14functionGraphsEv"]
            pub fn StitchedLibraryDescriptor_functionGraphs(
                this: *const root::MTL::StitchedLibraryDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25StitchedLibraryDescriptor17setFunctionGraphsEPKN2NS5ArrayE"]
            pub fn StitchedLibraryDescriptor_setFunctionGraphs(
                this: *mut root::MTL::StitchedLibraryDescriptor,
                functionGraphs: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25StitchedLibraryDescriptor9functionsEv"]
            pub fn StitchedLibraryDescriptor_functions(
                this: *const root::MTL::StitchedLibraryDescriptor,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25StitchedLibraryDescriptor12setFunctionsEPKN2NS5ArrayE"]
            pub fn StitchedLibraryDescriptor_setFunctions(
                this: *mut root::MTL::StitchedLibraryDescriptor,
                functions: *const root::NS::Array,
            );
        }
        impl StitchedLibraryDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::StitchedLibraryDescriptor {
                StitchedLibraryDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::StitchedLibraryDescriptor {
                StitchedLibraryDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn functionGraphs(&self) -> *mut root::NS::Array {
                StitchedLibraryDescriptor_functionGraphs(self)
            }
            #[inline]
            pub unsafe fn setFunctionGraphs(&mut self, functionGraphs: *const root::NS::Array) {
                StitchedLibraryDescriptor_setFunctionGraphs(self, functionGraphs)
            }
            #[inline]
            pub unsafe fn functions(&self) -> *mut root::NS::Array {
                StitchedLibraryDescriptor_functions(self)
            }
            #[inline]
            pub unsafe fn setFunctions(&mut self, functions: *const root::NS::Array) {
                StitchedLibraryDescriptor_setFunctions(self, functions)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct IndirectRenderCommand {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand22setRenderPipelineStateEPKNS_19RenderPipelineStateE"]
            pub fn IndirectRenderCommand_setRenderPipelineState(
                this: *mut root::MTL::IndirectRenderCommand,
                pipelineState: *const root::MTL::RenderPipelineState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand15setVertexBufferEPKNS_6BufferEmm"]
            pub fn IndirectRenderCommand_setVertexBuffer(
                this: *mut root::MTL::IndirectRenderCommand,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand17setFragmentBufferEPKNS_6BufferEmm"]
            pub fn IndirectRenderCommand_setFragmentBuffer(
                this: *mut root::MTL::IndirectRenderCommand,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand11drawPatchesEmmmPKNS_6BufferEmmmS3_mm"]
            pub fn IndirectRenderCommand_drawPatches(
                this: *mut root::MTL::IndirectRenderCommand,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                instanceStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand18drawIndexedPatchesEmmmPKNS_6BufferEmS3_mmmS3_mm"]
            pub fn IndirectRenderCommand_drawIndexedPatches(
                this: *mut root::MTL::IndirectRenderCommand,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                controlPointIndexBuffer: *const root::MTL::Buffer,
                controlPointIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                instanceStride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand14drawPrimitivesENS_13PrimitiveTypeEmmmm"]
            pub fn IndirectRenderCommand_drawPrimitives(
                this: *mut root::MTL::IndirectRenderCommand,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand21drawIndexedPrimitivesENS_13PrimitiveTypeEmNS_9IndexTypeEPKNS_6BufferEmmlm"]
            pub fn IndirectRenderCommand_drawIndexedPrimitives(
                this: *mut root::MTL::IndirectRenderCommand,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseVertex: root::NS::Integer,
                baseInstance: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL21IndirectRenderCommand5resetEv"]
            pub fn IndirectRenderCommand_reset(this: *mut root::MTL::IndirectRenderCommand);
        }
        impl IndirectRenderCommand {
            #[inline]
            pub unsafe fn setRenderPipelineState(
                &mut self,
                pipelineState: *const root::MTL::RenderPipelineState,
            ) {
                IndirectRenderCommand_setRenderPipelineState(self, pipelineState)
            }
            #[inline]
            pub unsafe fn setVertexBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                IndirectRenderCommand_setVertexBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn setFragmentBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                IndirectRenderCommand_setFragmentBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn drawPatches(
                &mut self,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                instanceStride: root::NS::UInteger,
            ) {
                IndirectRenderCommand_drawPatches(
                    self,
                    numberOfPatchControlPoints,
                    patchStart,
                    patchCount,
                    patchIndexBuffer,
                    patchIndexBufferOffset,
                    instanceCount,
                    baseInstance,
                    buffer,
                    offset,
                    instanceStride,
                )
            }
            #[inline]
            pub unsafe fn drawIndexedPatches(
                &mut self,
                numberOfPatchControlPoints: root::NS::UInteger,
                patchStart: root::NS::UInteger,
                patchCount: root::NS::UInteger,
                patchIndexBuffer: *const root::MTL::Buffer,
                patchIndexBufferOffset: root::NS::UInteger,
                controlPointIndexBuffer: *const root::MTL::Buffer,
                controlPointIndexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                instanceStride: root::NS::UInteger,
            ) {
                IndirectRenderCommand_drawIndexedPatches(
                    self,
                    numberOfPatchControlPoints,
                    patchStart,
                    patchCount,
                    patchIndexBuffer,
                    patchIndexBufferOffset,
                    controlPointIndexBuffer,
                    controlPointIndexBufferOffset,
                    instanceCount,
                    baseInstance,
                    buffer,
                    offset,
                    instanceStride,
                )
            }
            #[inline]
            pub unsafe fn drawPrimitives(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                vertexStart: root::NS::UInteger,
                vertexCount: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseInstance: root::NS::UInteger,
            ) {
                IndirectRenderCommand_drawPrimitives(
                    self,
                    primitiveType,
                    vertexStart,
                    vertexCount,
                    instanceCount,
                    baseInstance,
                )
            }
            #[inline]
            pub unsafe fn drawIndexedPrimitives(
                &mut self,
                primitiveType: root::MTL::PrimitiveType,
                indexCount: root::NS::UInteger,
                indexType: root::MTL::IndexType,
                indexBuffer: *const root::MTL::Buffer,
                indexBufferOffset: root::NS::UInteger,
                instanceCount: root::NS::UInteger,
                baseVertex: root::NS::Integer,
                baseInstance: root::NS::UInteger,
            ) {
                IndirectRenderCommand_drawIndexedPrimitives(
                    self,
                    primitiveType,
                    indexCount,
                    indexType,
                    indexBuffer,
                    indexBufferOffset,
                    instanceCount,
                    baseVertex,
                    baseInstance,
                )
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                IndirectRenderCommand_reset(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct IndirectComputeCommand {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand23setComputePipelineStateEPKNS_20ComputePipelineStateE"]
            pub fn IndirectComputeCommand_setComputePipelineState(
                this: *mut root::MTL::IndirectComputeCommand,
                pipelineState: *const root::MTL::ComputePipelineState,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand15setKernelBufferEPKNS_6BufferEmm"]
            pub fn IndirectComputeCommand_setKernelBuffer(
                this: *mut root::MTL::IndirectComputeCommand,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand30concurrentDispatchThreadgroupsENS_4SizeES1_"]
            pub fn IndirectComputeCommand_concurrentDispatchThreadgroups(
                this: *mut root::MTL::IndirectComputeCommand,
                threadgroupsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand25concurrentDispatchThreadsENS_4SizeES1_"]
            pub fn IndirectComputeCommand_concurrentDispatchThreads(
                this: *mut root::MTL::IndirectComputeCommand,
                threadsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand10setBarrierEv"]
            pub fn IndirectComputeCommand_setBarrier(this: *mut root::MTL::IndirectComputeCommand);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand12clearBarrierEv"]
            pub fn IndirectComputeCommand_clearBarrier(
                this: *mut root::MTL::IndirectComputeCommand,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand18setImageblockWidthEmm"]
            pub fn IndirectComputeCommand_setImageblockWidth(
                this: *mut root::MTL::IndirectComputeCommand,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand5resetEv"]
            pub fn IndirectComputeCommand_reset(this: *mut root::MTL::IndirectComputeCommand);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand26setThreadgroupMemoryLengthEmm"]
            pub fn IndirectComputeCommand_setThreadgroupMemoryLength(
                this: *mut root::MTL::IndirectComputeCommand,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL22IndirectComputeCommand16setStageInRegionENS_6RegionE"]
            pub fn IndirectComputeCommand_setStageInRegion(
                this: *mut root::MTL::IndirectComputeCommand,
                region: root::MTL::Region,
            );
        }
        impl IndirectComputeCommand {
            #[inline]
            pub unsafe fn setComputePipelineState(
                &mut self,
                pipelineState: *const root::MTL::ComputePipelineState,
            ) {
                IndirectComputeCommand_setComputePipelineState(self, pipelineState)
            }
            #[inline]
            pub unsafe fn setKernelBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                IndirectComputeCommand_setKernelBuffer(self, buffer, offset, index)
            }
            #[inline]
            pub unsafe fn concurrentDispatchThreadgroups(
                &mut self,
                threadgroupsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            ) {
                IndirectComputeCommand_concurrentDispatchThreadgroups(
                    self,
                    threadgroupsPerGrid,
                    threadsPerThreadgroup,
                )
            }
            #[inline]
            pub unsafe fn concurrentDispatchThreads(
                &mut self,
                threadsPerGrid: root::MTL::Size,
                threadsPerThreadgroup: root::MTL::Size,
            ) {
                IndirectComputeCommand_concurrentDispatchThreads(
                    self,
                    threadsPerGrid,
                    threadsPerThreadgroup,
                )
            }
            #[inline]
            pub unsafe fn setBarrier(&mut self) {
                IndirectComputeCommand_setBarrier(self)
            }
            #[inline]
            pub unsafe fn clearBarrier(&mut self) {
                IndirectComputeCommand_clearBarrier(self)
            }
            #[inline]
            pub unsafe fn setImageblockWidth(
                &mut self,
                width: root::NS::UInteger,
                height: root::NS::UInteger,
            ) {
                IndirectComputeCommand_setImageblockWidth(self, width, height)
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                IndirectComputeCommand_reset(self)
            }
            #[inline]
            pub unsafe fn setThreadgroupMemoryLength(
                &mut self,
                length: root::NS::UInteger,
                index: root::NS::UInteger,
            ) {
                IndirectComputeCommand_setThreadgroupMemoryLength(self, length, index)
            }
            #[inline]
            pub unsafe fn setStageInRegion(&mut self, region: root::MTL::Region) {
                IndirectComputeCommand_setStageInRegion(self, region)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct LinkedFunctions {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15LinkedFunctions5allocEv"]
            pub fn LinkedFunctions_alloc() -> *mut root::MTL::LinkedFunctions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15LinkedFunctions4initEv"]
            pub fn LinkedFunctions_init(
                this: *mut root::MTL::LinkedFunctions,
            ) -> *mut root::MTL::LinkedFunctions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15LinkedFunctions15linkedFunctionsEv"]
            pub fn LinkedFunctions_linkedFunctions() -> *mut root::MTL::LinkedFunctions;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15LinkedFunctions9functionsEv"]
            pub fn LinkedFunctions_functions(
                this: *const root::MTL::LinkedFunctions,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15LinkedFunctions12setFunctionsEPKN2NS5ArrayE"]
            pub fn LinkedFunctions_setFunctions(
                this: *mut root::MTL::LinkedFunctions,
                functions: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15LinkedFunctions15binaryFunctionsEv"]
            pub fn LinkedFunctions_binaryFunctions(
                this: *const root::MTL::LinkedFunctions,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15LinkedFunctions18setBinaryFunctionsEPKN2NS5ArrayE"]
            pub fn LinkedFunctions_setBinaryFunctions(
                this: *mut root::MTL::LinkedFunctions,
                binaryFunctions: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15LinkedFunctions6groupsEv"]
            pub fn LinkedFunctions_groups(
                this: *const root::MTL::LinkedFunctions,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15LinkedFunctions9setGroupsEPKN2NS5ArrayE"]
            pub fn LinkedFunctions_setGroups(
                this: *mut root::MTL::LinkedFunctions,
                groups: *const root::NS::Array,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL15LinkedFunctions16privateFunctionsEv"]
            pub fn LinkedFunctions_privateFunctions(
                this: *const root::MTL::LinkedFunctions,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL15LinkedFunctions19setPrivateFunctionsEPKN2NS5ArrayE"]
            pub fn LinkedFunctions_setPrivateFunctions(
                this: *mut root::MTL::LinkedFunctions,
                privateFunctions: *const root::NS::Array,
            );
        }
        impl LinkedFunctions {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::LinkedFunctions {
                LinkedFunctions_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::LinkedFunctions {
                LinkedFunctions_init(self)
            }
            #[inline]
            pub unsafe fn linkedFunctions() -> *mut root::MTL::LinkedFunctions {
                LinkedFunctions_linkedFunctions()
            }
            #[inline]
            pub unsafe fn functions(&self) -> *mut root::NS::Array {
                LinkedFunctions_functions(self)
            }
            #[inline]
            pub unsafe fn setFunctions(&mut self, functions: *const root::NS::Array) {
                LinkedFunctions_setFunctions(self, functions)
            }
            #[inline]
            pub unsafe fn binaryFunctions(&self) -> *mut root::NS::Array {
                LinkedFunctions_binaryFunctions(self)
            }
            #[inline]
            pub unsafe fn setBinaryFunctions(&mut self, binaryFunctions: *const root::NS::Array) {
                LinkedFunctions_setBinaryFunctions(self, binaryFunctions)
            }
            #[inline]
            pub unsafe fn groups(&self) -> *mut root::NS::Array {
                LinkedFunctions_groups(self)
            }
            #[inline]
            pub unsafe fn setGroups(&mut self, groups: *const root::NS::Array) {
                LinkedFunctions_setGroups(self, groups)
            }
            #[inline]
            pub unsafe fn privateFunctions(&self) -> *mut root::NS::Array {
                LinkedFunctions_privateFunctions(self)
            }
            #[inline]
            pub unsafe fn setPrivateFunctions(&mut self, privateFunctions: *const root::NS::Array) {
                LinkedFunctions_setPrivateFunctions(self, privateFunctions)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ParallelRenderCommandEncoder {
            pub _base: root::NS::Referencing<root::MTL::CommandEncoder>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28ParallelRenderCommandEncoder20renderCommandEncoderEv"]
            pub fn ParallelRenderCommandEncoder_renderCommandEncoder(
                this: *mut root::MTL::ParallelRenderCommandEncoder,
            ) -> *mut root::MTL::RenderCommandEncoder;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28ParallelRenderCommandEncoder19setColorStoreActionENS_11StoreActionEm"]
            pub fn ParallelRenderCommandEncoder_setColorStoreAction(
                this: *mut root::MTL::ParallelRenderCommandEncoder,
                storeAction: root::MTL::StoreAction,
                colorAttachmentIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28ParallelRenderCommandEncoder19setDepthStoreActionENS_11StoreActionE"]
            pub fn ParallelRenderCommandEncoder_setDepthStoreAction(
                this: *mut root::MTL::ParallelRenderCommandEncoder,
                storeAction: root::MTL::StoreAction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28ParallelRenderCommandEncoder21setStencilStoreActionENS_11StoreActionE"]
            pub fn ParallelRenderCommandEncoder_setStencilStoreAction(
                this: *mut root::MTL::ParallelRenderCommandEncoder,
                storeAction: root::MTL::StoreAction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28ParallelRenderCommandEncoder26setColorStoreActionOptionsEmm"]
            pub fn ParallelRenderCommandEncoder_setColorStoreActionOptions(
                this: *mut root::MTL::ParallelRenderCommandEncoder,
                storeActionOptions: root::MTL::StoreActionOptions,
                colorAttachmentIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28ParallelRenderCommandEncoder26setDepthStoreActionOptionsEm"]
            pub fn ParallelRenderCommandEncoder_setDepthStoreActionOptions(
                this: *mut root::MTL::ParallelRenderCommandEncoder,
                storeActionOptions: root::MTL::StoreActionOptions,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28ParallelRenderCommandEncoder28setStencilStoreActionOptionsEm"]
            pub fn ParallelRenderCommandEncoder_setStencilStoreActionOptions(
                this: *mut root::MTL::ParallelRenderCommandEncoder,
                storeActionOptions: root::MTL::StoreActionOptions,
            );
        }
        impl ParallelRenderCommandEncoder {
            #[inline]
            pub unsafe fn renderCommandEncoder(&mut self) -> *mut root::MTL::RenderCommandEncoder {
                ParallelRenderCommandEncoder_renderCommandEncoder(self)
            }
            #[inline]
            pub unsafe fn setColorStoreAction(
                &mut self,
                storeAction: root::MTL::StoreAction,
                colorAttachmentIndex: root::NS::UInteger,
            ) {
                ParallelRenderCommandEncoder_setColorStoreAction(
                    self,
                    storeAction,
                    colorAttachmentIndex,
                )
            }
            #[inline]
            pub unsafe fn setDepthStoreAction(&mut self, storeAction: root::MTL::StoreAction) {
                ParallelRenderCommandEncoder_setDepthStoreAction(self, storeAction)
            }
            #[inline]
            pub unsafe fn setStencilStoreAction(&mut self, storeAction: root::MTL::StoreAction) {
                ParallelRenderCommandEncoder_setStencilStoreAction(self, storeAction)
            }
            #[inline]
            pub unsafe fn setColorStoreActionOptions(
                &mut self,
                storeActionOptions: root::MTL::StoreActionOptions,
                colorAttachmentIndex: root::NS::UInteger,
            ) {
                ParallelRenderCommandEncoder_setColorStoreActionOptions(
                    self,
                    storeActionOptions,
                    colorAttachmentIndex,
                )
            }
            #[inline]
            pub unsafe fn setDepthStoreActionOptions(
                &mut self,
                storeActionOptions: root::MTL::StoreActionOptions,
            ) {
                ParallelRenderCommandEncoder_setDepthStoreActionOptions(self, storeActionOptions)
            }
            #[inline]
            pub unsafe fn setStencilStoreActionOptions(
                &mut self,
                storeActionOptions: root::MTL::StoreActionOptions,
            ) {
                ParallelRenderCommandEncoder_setStencilStoreActionOptions(self, storeActionOptions)
            }
        }
        pub const Mutability_MutabilityDefault: root::MTL::Mutability = 0;
        pub const Mutability_MutabilityMutable: root::MTL::Mutability = 1;
        pub const Mutability_MutabilityImmutable: root::MTL::Mutability = 2;
        pub type Mutability = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct PipelineBufferDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24PipelineBufferDescriptor5allocEv"]
            pub fn PipelineBufferDescriptor_alloc() -> *mut root::MTL::PipelineBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24PipelineBufferDescriptor4initEv"]
            pub fn PipelineBufferDescriptor_init(
                this: *mut root::MTL::PipelineBufferDescriptor,
            ) -> *mut root::MTL::PipelineBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL24PipelineBufferDescriptor10mutabilityEv"]
            pub fn PipelineBufferDescriptor_mutability(
                this: *const root::MTL::PipelineBufferDescriptor,
            ) -> root::MTL::Mutability;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL24PipelineBufferDescriptor13setMutabilityENS_10MutabilityE"]
            pub fn PipelineBufferDescriptor_setMutability(
                this: *mut root::MTL::PipelineBufferDescriptor,
                mutability: root::MTL::Mutability,
            );
        }
        impl PipelineBufferDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::PipelineBufferDescriptor {
                PipelineBufferDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::PipelineBufferDescriptor {
                PipelineBufferDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn mutability(&self) -> root::MTL::Mutability {
                PipelineBufferDescriptor_mutability(self)
            }
            #[inline]
            pub unsafe fn setMutability(&mut self, mutability: root::MTL::Mutability) {
                PipelineBufferDescriptor_setMutability(self, mutability)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct PipelineBufferDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29PipelineBufferDescriptorArray5allocEv"]
            pub fn PipelineBufferDescriptorArray_alloc(
            ) -> *mut root::MTL::PipelineBufferDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29PipelineBufferDescriptorArray4initEv"]
            pub fn PipelineBufferDescriptorArray_init(
                this: *mut root::MTL::PipelineBufferDescriptorArray,
            ) -> *mut root::MTL::PipelineBufferDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29PipelineBufferDescriptorArray6objectEm"]
            pub fn PipelineBufferDescriptorArray_object(
                this: *mut root::MTL::PipelineBufferDescriptorArray,
                bufferIndex: root::NS::UInteger,
            ) -> *mut root::MTL::PipelineBufferDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL29PipelineBufferDescriptorArray9setObjectEPKNS_24PipelineBufferDescriptorEm"]
            pub fn PipelineBufferDescriptorArray_setObject(
                this: *mut root::MTL::PipelineBufferDescriptorArray,
                buffer: *const root::MTL::PipelineBufferDescriptor,
                bufferIndex: root::NS::UInteger,
            );
        }
        impl PipelineBufferDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::PipelineBufferDescriptorArray {
                PipelineBufferDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::PipelineBufferDescriptorArray {
                PipelineBufferDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                bufferIndex: root::NS::UInteger,
            ) -> *mut root::MTL::PipelineBufferDescriptor {
                PipelineBufferDescriptorArray_object(self, bufferIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                buffer: *const root::MTL::PipelineBufferDescriptor,
                bufferIndex: root::NS::UInteger,
            ) {
                PipelineBufferDescriptorArray_setObject(self, buffer, bufferIndex)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RasterizationRateSampleArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28RasterizationRateSampleArray5allocEv"]
            pub fn RasterizationRateSampleArray_alloc(
            ) -> *mut root::MTL::RasterizationRateSampleArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28RasterizationRateSampleArray4initEv"]
            pub fn RasterizationRateSampleArray_init(
                this: *mut root::MTL::RasterizationRateSampleArray,
            ) -> *mut root::MTL::RasterizationRateSampleArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28RasterizationRateSampleArray6objectEm"]
            pub fn RasterizationRateSampleArray_object(
                this: *mut root::MTL::RasterizationRateSampleArray,
                index: root::NS::UInteger,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28RasterizationRateSampleArray9setObjectEPKN2NS6NumberEm"]
            pub fn RasterizationRateSampleArray_setObject(
                this: *mut root::MTL::RasterizationRateSampleArray,
                value: *const root::NS::Number,
                index: root::NS::UInteger,
            );
        }
        impl RasterizationRateSampleArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RasterizationRateSampleArray {
                RasterizationRateSampleArray_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RasterizationRateSampleArray {
                RasterizationRateSampleArray_init(self)
            }
            #[inline]
            pub unsafe fn object(&mut self, index: root::NS::UInteger) -> *mut root::NS::Number {
                RasterizationRateSampleArray_object(self, index)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                value: *const root::NS::Number,
                index: root::NS::UInteger,
            ) {
                RasterizationRateSampleArray_setObject(self, value, index)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RasterizationRateLayerDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL32RasterizationRateLayerDescriptor5allocEv"]
            pub fn RasterizationRateLayerDescriptor_alloc(
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL32RasterizationRateLayerDescriptor4initEv"]
            pub fn RasterizationRateLayerDescriptor_init(
                this: *mut root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL32RasterizationRateLayerDescriptor4initENS_4SizeE"]
            pub fn RasterizationRateLayerDescriptor_init1(
                this: *mut root::MTL::RasterizationRateLayerDescriptor,
                sampleCount: root::MTL::Size,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL32RasterizationRateLayerDescriptor4initENS_4SizeEPKfS3_"]
            pub fn RasterizationRateLayerDescriptor_init2(
                this: *mut root::MTL::RasterizationRateLayerDescriptor,
                sampleCount: root::MTL::Size,
                horizontal: *const f32,
                vertical: *const f32,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL32RasterizationRateLayerDescriptor11sampleCountEv"]
            pub fn RasterizationRateLayerDescriptor_sampleCount(
                this: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL32RasterizationRateLayerDescriptor14maxSampleCountEv"]
            pub fn RasterizationRateLayerDescriptor_maxSampleCount(
                this: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL32RasterizationRateLayerDescriptor23horizontalSampleStorageEv"]
            pub fn RasterizationRateLayerDescriptor_horizontalSampleStorage(
                this: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut f32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL32RasterizationRateLayerDescriptor21verticalSampleStorageEv"]
            pub fn RasterizationRateLayerDescriptor_verticalSampleStorage(
                this: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut f32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL32RasterizationRateLayerDescriptor10horizontalEv"]
            pub fn RasterizationRateLayerDescriptor_horizontal(
                this: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut root::MTL::RasterizationRateSampleArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL32RasterizationRateLayerDescriptor8verticalEv"]
            pub fn RasterizationRateLayerDescriptor_vertical(
                this: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut root::MTL::RasterizationRateSampleArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL32RasterizationRateLayerDescriptor14setSampleCountENS_4SizeE"]
            pub fn RasterizationRateLayerDescriptor_setSampleCount(
                this: *mut root::MTL::RasterizationRateLayerDescriptor,
                sampleCount: root::MTL::Size,
            );
        }
        impl RasterizationRateLayerDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RasterizationRateLayerDescriptor {
                RasterizationRateLayerDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RasterizationRateLayerDescriptor {
                RasterizationRateLayerDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                sampleCount: root::MTL::Size,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor {
                RasterizationRateLayerDescriptor_init1(self, sampleCount)
            }
            #[inline]
            pub unsafe fn init2(
                &mut self,
                sampleCount: root::MTL::Size,
                horizontal: *const f32,
                vertical: *const f32,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor {
                RasterizationRateLayerDescriptor_init2(self, sampleCount, horizontal, vertical)
            }
            #[inline]
            pub unsafe fn sampleCount(&self) -> root::MTL::Size {
                RasterizationRateLayerDescriptor_sampleCount(self)
            }
            #[inline]
            pub unsafe fn maxSampleCount(&self) -> root::MTL::Size {
                RasterizationRateLayerDescriptor_maxSampleCount(self)
            }
            #[inline]
            pub unsafe fn horizontalSampleStorage(&self) -> *mut f32 {
                RasterizationRateLayerDescriptor_horizontalSampleStorage(self)
            }
            #[inline]
            pub unsafe fn verticalSampleStorage(&self) -> *mut f32 {
                RasterizationRateLayerDescriptor_verticalSampleStorage(self)
            }
            #[inline]
            pub unsafe fn horizontal(&self) -> *mut root::MTL::RasterizationRateSampleArray {
                RasterizationRateLayerDescriptor_horizontal(self)
            }
            #[inline]
            pub unsafe fn vertical(&self) -> *mut root::MTL::RasterizationRateSampleArray {
                RasterizationRateLayerDescriptor_vertical(self)
            }
            #[inline]
            pub unsafe fn setSampleCount(&mut self, sampleCount: root::MTL::Size) {
                RasterizationRateLayerDescriptor_setSampleCount(self, sampleCount)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RasterizationRateLayerArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27RasterizationRateLayerArray5allocEv"]
            pub fn RasterizationRateLayerArray_alloc() -> *mut root::MTL::RasterizationRateLayerArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27RasterizationRateLayerArray4initEv"]
            pub fn RasterizationRateLayerArray_init(
                this: *mut root::MTL::RasterizationRateLayerArray,
            ) -> *mut root::MTL::RasterizationRateLayerArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27RasterizationRateLayerArray6objectEm"]
            pub fn RasterizationRateLayerArray_object(
                this: *mut root::MTL::RasterizationRateLayerArray,
                layerIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27RasterizationRateLayerArray9setObjectEPKNS_32RasterizationRateLayerDescriptorEm"]
            pub fn RasterizationRateLayerArray_setObject(
                this: *mut root::MTL::RasterizationRateLayerArray,
                layer: *const root::MTL::RasterizationRateLayerDescriptor,
                layerIndex: root::NS::UInteger,
            );
        }
        impl RasterizationRateLayerArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RasterizationRateLayerArray {
                RasterizationRateLayerArray_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RasterizationRateLayerArray {
                RasterizationRateLayerArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                layerIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor {
                RasterizationRateLayerArray_object(self, layerIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                layer: *const root::MTL::RasterizationRateLayerDescriptor,
                layerIndex: root::NS::UInteger,
            ) {
                RasterizationRateLayerArray_setObject(self, layer, layerIndex)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RasterizationRateMapDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor5allocEv"]
            pub fn RasterizationRateMapDescriptor_alloc(
            ) -> *mut root::MTL::RasterizationRateMapDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor4initEv"]
            pub fn RasterizationRateMapDescriptor_init(
                this: *mut root::MTL::RasterizationRateMapDescriptor,
            ) -> *mut root::MTL::RasterizationRateMapDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor30rasterizationRateMapDescriptorENS_4SizeE"]
            pub fn RasterizationRateMapDescriptor_rasterizationRateMapDescriptor(
                screenSize: root::MTL::Size,
            ) -> *mut root::MTL::RasterizationRateMapDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor30rasterizationRateMapDescriptorENS_4SizeEPKNS_32RasterizationRateLayerDescriptorE"]
            pub fn RasterizationRateMapDescriptor_rasterizationRateMapDescriptor1(
                screenSize: root::MTL::Size,
                layer: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut root::MTL::RasterizationRateMapDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor30rasterizationRateMapDescriptorENS_4SizeEmPKPNS_32RasterizationRateLayerDescriptorE"]
            pub fn RasterizationRateMapDescriptor_rasterizationRateMapDescriptor2(
                screenSize: root::MTL::Size,
                layerCount: root::NS::UInteger,
                layers: *const *mut root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut root::MTL::RasterizationRateMapDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor5layerEm"]
            pub fn RasterizationRateMapDescriptor_layer(
                this: *mut root::MTL::RasterizationRateMapDescriptor,
                layerIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor8setLayerEPKNS_32RasterizationRateLayerDescriptorEm"]
            pub fn RasterizationRateMapDescriptor_setLayer(
                this: *mut root::MTL::RasterizationRateMapDescriptor,
                layer: *const root::MTL::RasterizationRateLayerDescriptor,
                layerIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RasterizationRateMapDescriptor6layersEv"]
            pub fn RasterizationRateMapDescriptor_layers(
                this: *const root::MTL::RasterizationRateMapDescriptor,
            ) -> *mut root::MTL::RasterizationRateLayerArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RasterizationRateMapDescriptor10screenSizeEv"]
            pub fn RasterizationRateMapDescriptor_screenSize(
                this: *const root::MTL::RasterizationRateMapDescriptor,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor13setScreenSizeENS_4SizeE"]
            pub fn RasterizationRateMapDescriptor_setScreenSize(
                this: *mut root::MTL::RasterizationRateMapDescriptor,
                screenSize: root::MTL::Size,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RasterizationRateMapDescriptor5labelEv"]
            pub fn RasterizationRateMapDescriptor_label(
                this: *const root::MTL::RasterizationRateMapDescriptor,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30RasterizationRateMapDescriptor8setLabelEPKN2NS6StringE"]
            pub fn RasterizationRateMapDescriptor_setLabel(
                this: *mut root::MTL::RasterizationRateMapDescriptor,
                label: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL30RasterizationRateMapDescriptor10layerCountEv"]
            pub fn RasterizationRateMapDescriptor_layerCount(
                this: *const root::MTL::RasterizationRateMapDescriptor,
            ) -> root::NS::UInteger;
        }
        impl RasterizationRateMapDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::RasterizationRateMapDescriptor {
                RasterizationRateMapDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::RasterizationRateMapDescriptor {
                RasterizationRateMapDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn rasterizationRateMapDescriptor(
                screenSize: root::MTL::Size,
            ) -> *mut root::MTL::RasterizationRateMapDescriptor {
                RasterizationRateMapDescriptor_rasterizationRateMapDescriptor(screenSize)
            }
            #[inline]
            pub unsafe fn rasterizationRateMapDescriptor1(
                screenSize: root::MTL::Size,
                layer: *const root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut root::MTL::RasterizationRateMapDescriptor {
                RasterizationRateMapDescriptor_rasterizationRateMapDescriptor1(screenSize, layer)
            }
            #[inline]
            pub unsafe fn rasterizationRateMapDescriptor2(
                screenSize: root::MTL::Size,
                layerCount: root::NS::UInteger,
                layers: *const *mut root::MTL::RasterizationRateLayerDescriptor,
            ) -> *mut root::MTL::RasterizationRateMapDescriptor {
                RasterizationRateMapDescriptor_rasterizationRateMapDescriptor2(
                    screenSize, layerCount, layers,
                )
            }
            #[inline]
            pub unsafe fn layer(
                &mut self,
                layerIndex: root::NS::UInteger,
            ) -> *mut root::MTL::RasterizationRateLayerDescriptor {
                RasterizationRateMapDescriptor_layer(self, layerIndex)
            }
            #[inline]
            pub unsafe fn setLayer(
                &mut self,
                layer: *const root::MTL::RasterizationRateLayerDescriptor,
                layerIndex: root::NS::UInteger,
            ) {
                RasterizationRateMapDescriptor_setLayer(self, layer, layerIndex)
            }
            #[inline]
            pub unsafe fn layers(&self) -> *mut root::MTL::RasterizationRateLayerArray {
                RasterizationRateMapDescriptor_layers(self)
            }
            #[inline]
            pub unsafe fn screenSize(&self) -> root::MTL::Size {
                RasterizationRateMapDescriptor_screenSize(self)
            }
            #[inline]
            pub unsafe fn setScreenSize(&mut self, screenSize: root::MTL::Size) {
                RasterizationRateMapDescriptor_setScreenSize(self, screenSize)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                RasterizationRateMapDescriptor_label(self)
            }
            #[inline]
            pub unsafe fn setLabel(&mut self, label: *const root::NS::String) {
                RasterizationRateMapDescriptor_setLabel(self, label)
            }
            #[inline]
            pub unsafe fn layerCount(&self) -> root::NS::UInteger {
                RasterizationRateMapDescriptor_layerCount(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RasterizationRateMap {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RasterizationRateMap6deviceEv"]
            pub fn RasterizationRateMap_device(
                this: *const root::MTL::RasterizationRateMap,
            ) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RasterizationRateMap5labelEv"]
            pub fn RasterizationRateMap_label(
                this: *const root::MTL::RasterizationRateMap,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RasterizationRateMap10screenSizeEv"]
            pub fn RasterizationRateMap_screenSize(
                this: *const root::MTL::RasterizationRateMap,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RasterizationRateMap19physicalGranularityEv"]
            pub fn RasterizationRateMap_physicalGranularity(
                this: *const root::MTL::RasterizationRateMap,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RasterizationRateMap10layerCountEv"]
            pub fn RasterizationRateMap_layerCount(
                this: *const root::MTL::RasterizationRateMap,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL20RasterizationRateMap27parameterBufferSizeAndAlignEv"]
            pub fn RasterizationRateMap_parameterBufferSizeAndAlign(
                this: *const root::MTL::RasterizationRateMap,
            ) -> root::MTL::SizeAndAlign;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RasterizationRateMap25copyParameterDataToBufferEPKNS_6BufferEm"]
            pub fn RasterizationRateMap_copyParameterDataToBuffer(
                this: *mut root::MTL::RasterizationRateMap,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RasterizationRateMap12physicalSizeEm"]
            pub fn RasterizationRateMap_physicalSize(
                this: *mut root::MTL::RasterizationRateMap,
                layerIndex: root::NS::UInteger,
            ) -> root::MTL::Size;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RasterizationRateMap30mapScreenToPhysicalCoordinatesENS_14SamplePositionEm"]
            pub fn RasterizationRateMap_mapScreenToPhysicalCoordinates(
                this: *mut root::MTL::RasterizationRateMap,
                screenCoordinates: root::MTL::Coordinate2D,
                layerIndex: root::NS::UInteger,
            ) -> root::MTL::Coordinate2D;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL20RasterizationRateMap30mapPhysicalToScreenCoordinatesENS_14SamplePositionEm"]
            pub fn RasterizationRateMap_mapPhysicalToScreenCoordinates(
                this: *mut root::MTL::RasterizationRateMap,
                physicalCoordinates: root::MTL::Coordinate2D,
                layerIndex: root::NS::UInteger,
            ) -> root::MTL::Coordinate2D;
        }
        impl RasterizationRateMap {
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                RasterizationRateMap_device(self)
            }
            #[inline]
            pub unsafe fn label(&self) -> *mut root::NS::String {
                RasterizationRateMap_label(self)
            }
            #[inline]
            pub unsafe fn screenSize(&self) -> root::MTL::Size {
                RasterizationRateMap_screenSize(self)
            }
            #[inline]
            pub unsafe fn physicalGranularity(&self) -> root::MTL::Size {
                RasterizationRateMap_physicalGranularity(self)
            }
            #[inline]
            pub unsafe fn layerCount(&self) -> root::NS::UInteger {
                RasterizationRateMap_layerCount(self)
            }
            #[inline]
            pub unsafe fn parameterBufferSizeAndAlign(&self) -> root::MTL::SizeAndAlign {
                RasterizationRateMap_parameterBufferSizeAndAlign(self)
            }
            #[inline]
            pub unsafe fn copyParameterDataToBuffer(
                &mut self,
                buffer: *const root::MTL::Buffer,
                offset: root::NS::UInteger,
            ) {
                RasterizationRateMap_copyParameterDataToBuffer(self, buffer, offset)
            }
            #[inline]
            pub unsafe fn physicalSize(
                &mut self,
                layerIndex: root::NS::UInteger,
            ) -> root::MTL::Size {
                RasterizationRateMap_physicalSize(self, layerIndex)
            }
            #[inline]
            pub unsafe fn mapScreenToPhysicalCoordinates(
                &mut self,
                screenCoordinates: root::MTL::Coordinate2D,
                layerIndex: root::NS::UInteger,
            ) -> root::MTL::Coordinate2D {
                RasterizationRateMap_mapScreenToPhysicalCoordinates(
                    self,
                    screenCoordinates,
                    layerIndex,
                )
            }
            #[inline]
            pub unsafe fn mapPhysicalToScreenCoordinates(
                &mut self,
                physicalCoordinates: root::MTL::Coordinate2D,
                layerIndex: root::NS::UInteger,
            ) -> root::MTL::Coordinate2D {
                RasterizationRateMap_mapPhysicalToScreenCoordinates(
                    self,
                    physicalCoordinates,
                    layerIndex,
                )
            }
        }
        pub const SparseTextureMappingMode_SparseTextureMappingModeMap:
            root::MTL::SparseTextureMappingMode = 0;
        pub const SparseTextureMappingMode_SparseTextureMappingModeUnmap:
            root::MTL::SparseTextureMappingMode = 1;
        pub type SparseTextureMappingMode = root::NS::UInteger;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct MapIndirectArguments {
            pub regionOriginX: u32,
            pub regionOriginY: u32,
            pub regionOriginZ: u32,
            pub regionSizeWidth: u32,
            pub regionSizeHeight: u32,
            pub regionSizeDepth: u32,
            pub mipMapLevel: u32,
            pub sliceId: u32,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ResourceStateCommandEncoder {
            pub _base: root::NS::Referencing<root::MTL::CommandEncoder>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStateCommandEncoder21updateTextureMappingsEPKNS_7TextureENS_24SparseTextureMappingModeEPKNS_6RegionEPKmS9_m"]
            pub fn ResourceStateCommandEncoder_updateTextureMappings(
                this: *mut root::MTL::ResourceStateCommandEncoder,
                texture: *const root::MTL::Texture,
                mode: root::MTL::SparseTextureMappingMode,
                regions: *const root::MTL::Region,
                mipLevels: *const root::NS::UInteger,
                slices: *const root::NS::UInteger,
                numRegions: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStateCommandEncoder20updateTextureMappingEPKNS_7TextureENS_24SparseTextureMappingModeENS_6RegionEmm"]
            pub fn ResourceStateCommandEncoder_updateTextureMapping(
                this: *mut root::MTL::ResourceStateCommandEncoder,
                texture: *const root::MTL::Texture,
                mode: root::MTL::SparseTextureMappingMode,
                region: root::MTL::Region,
                mipLevel: root::NS::UInteger,
                slice: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStateCommandEncoder20updateTextureMappingEPKNS_7TextureENS_24SparseTextureMappingModeEPKNS_6BufferEm"]
            pub fn ResourceStateCommandEncoder_updateTextureMapping1(
                this: *mut root::MTL::ResourceStateCommandEncoder,
                texture: *const root::MTL::Texture,
                mode: root::MTL::SparseTextureMappingMode,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStateCommandEncoder11updateFenceEPKNS_5FenceE"]
            pub fn ResourceStateCommandEncoder_updateFence(
                this: *mut root::MTL::ResourceStateCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStateCommandEncoder12waitForFenceEPKNS_5FenceE"]
            pub fn ResourceStateCommandEncoder_waitForFence(
                this: *mut root::MTL::ResourceStateCommandEncoder,
                fence: *const root::MTL::Fence,
            );
        }
        impl ResourceStateCommandEncoder {
            #[inline]
            pub unsafe fn updateTextureMappings(
                &mut self,
                texture: *const root::MTL::Texture,
                mode: root::MTL::SparseTextureMappingMode,
                regions: *const root::MTL::Region,
                mipLevels: *const root::NS::UInteger,
                slices: *const root::NS::UInteger,
                numRegions: root::NS::UInteger,
            ) {
                ResourceStateCommandEncoder_updateTextureMappings(
                    self, texture, mode, regions, mipLevels, slices, numRegions,
                )
            }
            #[inline]
            pub unsafe fn updateTextureMapping(
                &mut self,
                texture: *const root::MTL::Texture,
                mode: root::MTL::SparseTextureMappingMode,
                region: root::MTL::Region,
                mipLevel: root::NS::UInteger,
                slice: root::NS::UInteger,
            ) {
                ResourceStateCommandEncoder_updateTextureMapping(
                    self, texture, mode, region, mipLevel, slice,
                )
            }
            #[inline]
            pub unsafe fn updateTextureMapping1(
                &mut self,
                texture: *const root::MTL::Texture,
                mode: root::MTL::SparseTextureMappingMode,
                indirectBuffer: *const root::MTL::Buffer,
                indirectBufferOffset: root::NS::UInteger,
            ) {
                ResourceStateCommandEncoder_updateTextureMapping1(
                    self,
                    texture,
                    mode,
                    indirectBuffer,
                    indirectBufferOffset,
                )
            }
            #[inline]
            pub unsafe fn updateFence(&mut self, fence: *const root::MTL::Fence) {
                ResourceStateCommandEncoder_updateFence(self, fence)
            }
            #[inline]
            pub unsafe fn waitForFence(&mut self, fence: *const root::MTL::Fence) {
                ResourceStateCommandEncoder_waitForFence(self, fence)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ResourceStatePassSampleBufferAttachmentDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL49ResourceStatePassSampleBufferAttachmentDescriptor5allocEv"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_alloc(
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL49ResourceStatePassSampleBufferAttachmentDescriptor4initEv"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_init(
                this: *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL49ResourceStatePassSampleBufferAttachmentDescriptor12sampleBufferEv"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_sampleBuffer(
                this: *const root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
            ) -> *mut root::MTL::CounterSampleBuffer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL49ResourceStatePassSampleBufferAttachmentDescriptor15setSampleBufferEPKNS_19CounterSampleBufferE"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_setSampleBuffer(
                this: *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL49ResourceStatePassSampleBufferAttachmentDescriptor25startOfEncoderSampleIndexEv"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_startOfEncoderSampleIndex(
                this: *const root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL49ResourceStatePassSampleBufferAttachmentDescriptor28setStartOfEncoderSampleIndexEm"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_setStartOfEncoderSampleIndex(
                this: *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
                startOfEncoderSampleIndex: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL49ResourceStatePassSampleBufferAttachmentDescriptor23endOfEncoderSampleIndexEv"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_endOfEncoderSampleIndex(
                this: *const root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL49ResourceStatePassSampleBufferAttachmentDescriptor26setEndOfEncoderSampleIndexEm"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptor_setEndOfEncoderSampleIndex(
                this: *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
                endOfEncoderSampleIndex: root::NS::UInteger,
            );
        }
        impl ResourceStatePassSampleBufferAttachmentDescriptor {
            #[inline]
            pub unsafe fn alloc(
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor {
                ResourceStatePassSampleBufferAttachmentDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor {
                ResourceStatePassSampleBufferAttachmentDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn sampleBuffer(&self) -> *mut root::MTL::CounterSampleBuffer {
                ResourceStatePassSampleBufferAttachmentDescriptor_sampleBuffer(self)
            }
            #[inline]
            pub unsafe fn setSampleBuffer(
                &mut self,
                sampleBuffer: *const root::MTL::CounterSampleBuffer,
            ) {
                ResourceStatePassSampleBufferAttachmentDescriptor_setSampleBuffer(
                    self,
                    sampleBuffer,
                )
            }
            #[inline]
            pub unsafe fn startOfEncoderSampleIndex(&self) -> root::NS::UInteger {
                ResourceStatePassSampleBufferAttachmentDescriptor_startOfEncoderSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setStartOfEncoderSampleIndex(
                &mut self,
                startOfEncoderSampleIndex: root::NS::UInteger,
            ) {
                ResourceStatePassSampleBufferAttachmentDescriptor_setStartOfEncoderSampleIndex(
                    self,
                    startOfEncoderSampleIndex,
                )
            }
            #[inline]
            pub unsafe fn endOfEncoderSampleIndex(&self) -> root::NS::UInteger {
                ResourceStatePassSampleBufferAttachmentDescriptor_endOfEncoderSampleIndex(self)
            }
            #[inline]
            pub unsafe fn setEndOfEncoderSampleIndex(
                &mut self,
                endOfEncoderSampleIndex: root::NS::UInteger,
            ) {
                ResourceStatePassSampleBufferAttachmentDescriptor_setEndOfEncoderSampleIndex(
                    self,
                    endOfEncoderSampleIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ResourceStatePassSampleBufferAttachmentDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL54ResourceStatePassSampleBufferAttachmentDescriptorArray5allocEv"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptorArray_alloc(
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL54ResourceStatePassSampleBufferAttachmentDescriptorArray4initEv"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptorArray_init(
                this: *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL54ResourceStatePassSampleBufferAttachmentDescriptorArray6objectEm"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptorArray_object(
                this: *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL54ResourceStatePassSampleBufferAttachmentDescriptorArray9setObjectEPKNS_49ResourceStatePassSampleBufferAttachmentDescriptorEm"]
            pub fn ResourceStatePassSampleBufferAttachmentDescriptorArray_setObject(
                this: *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray,
                attachment: *const root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            );
        }
        impl ResourceStatePassSampleBufferAttachmentDescriptorArray {
            #[inline]
            pub unsafe fn alloc(
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray
            {
                ResourceStatePassSampleBufferAttachmentDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray
            {
                ResourceStatePassSampleBufferAttachmentDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                attachmentIndex: root::NS::UInteger,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor {
                ResourceStatePassSampleBufferAttachmentDescriptorArray_object(self, attachmentIndex)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attachment: *const root::MTL::ResourceStatePassSampleBufferAttachmentDescriptor,
                attachmentIndex: root::NS::UInteger,
            ) {
                ResourceStatePassSampleBufferAttachmentDescriptorArray_setObject(
                    self,
                    attachment,
                    attachmentIndex,
                )
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct ResourceStatePassDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStatePassDescriptor5allocEv"]
            pub fn ResourceStatePassDescriptor_alloc() -> *mut root::MTL::ResourceStatePassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStatePassDescriptor4initEv"]
            pub fn ResourceStatePassDescriptor_init(
                this: *mut root::MTL::ResourceStatePassDescriptor,
            ) -> *mut root::MTL::ResourceStatePassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL27ResourceStatePassDescriptor27resourceStatePassDescriptorEv"]
            pub fn ResourceStatePassDescriptor_resourceStatePassDescriptor(
            ) -> *mut root::MTL::ResourceStatePassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL27ResourceStatePassDescriptor23sampleBufferAttachmentsEv"]
            pub fn ResourceStatePassDescriptor_sampleBufferAttachments(
                this: *const root::MTL::ResourceStatePassDescriptor,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray;
        }
        impl ResourceStatePassDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::ResourceStatePassDescriptor {
                ResourceStatePassDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::ResourceStatePassDescriptor {
                ResourceStatePassDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn resourceStatePassDescriptor(
            ) -> *mut root::MTL::ResourceStatePassDescriptor {
                ResourceStatePassDescriptor_resourceStatePassDescriptor()
            }
            #[inline]
            pub unsafe fn sampleBufferAttachments(
                &self,
            ) -> *mut root::MTL::ResourceStatePassSampleBufferAttachmentDescriptorArray
            {
                ResourceStatePassDescriptor_sampleBufferAttachments(self)
            }
        }
        pub const VertexFormat_VertexFormatInvalid: root::MTL::VertexFormat = 0;
        pub const VertexFormat_VertexFormatUChar2: root::MTL::VertexFormat = 1;
        pub const VertexFormat_VertexFormatUChar3: root::MTL::VertexFormat = 2;
        pub const VertexFormat_VertexFormatUChar4: root::MTL::VertexFormat = 3;
        pub const VertexFormat_VertexFormatChar2: root::MTL::VertexFormat = 4;
        pub const VertexFormat_VertexFormatChar3: root::MTL::VertexFormat = 5;
        pub const VertexFormat_VertexFormatChar4: root::MTL::VertexFormat = 6;
        pub const VertexFormat_VertexFormatUChar2Normalized: root::MTL::VertexFormat = 7;
        pub const VertexFormat_VertexFormatUChar3Normalized: root::MTL::VertexFormat = 8;
        pub const VertexFormat_VertexFormatUChar4Normalized: root::MTL::VertexFormat = 9;
        pub const VertexFormat_VertexFormatChar2Normalized: root::MTL::VertexFormat = 10;
        pub const VertexFormat_VertexFormatChar3Normalized: root::MTL::VertexFormat = 11;
        pub const VertexFormat_VertexFormatChar4Normalized: root::MTL::VertexFormat = 12;
        pub const VertexFormat_VertexFormatUShort2: root::MTL::VertexFormat = 13;
        pub const VertexFormat_VertexFormatUShort3: root::MTL::VertexFormat = 14;
        pub const VertexFormat_VertexFormatUShort4: root::MTL::VertexFormat = 15;
        pub const VertexFormat_VertexFormatShort2: root::MTL::VertexFormat = 16;
        pub const VertexFormat_VertexFormatShort3: root::MTL::VertexFormat = 17;
        pub const VertexFormat_VertexFormatShort4: root::MTL::VertexFormat = 18;
        pub const VertexFormat_VertexFormatUShort2Normalized: root::MTL::VertexFormat = 19;
        pub const VertexFormat_VertexFormatUShort3Normalized: root::MTL::VertexFormat = 20;
        pub const VertexFormat_VertexFormatUShort4Normalized: root::MTL::VertexFormat = 21;
        pub const VertexFormat_VertexFormatShort2Normalized: root::MTL::VertexFormat = 22;
        pub const VertexFormat_VertexFormatShort3Normalized: root::MTL::VertexFormat = 23;
        pub const VertexFormat_VertexFormatShort4Normalized: root::MTL::VertexFormat = 24;
        pub const VertexFormat_VertexFormatHalf2: root::MTL::VertexFormat = 25;
        pub const VertexFormat_VertexFormatHalf3: root::MTL::VertexFormat = 26;
        pub const VertexFormat_VertexFormatHalf4: root::MTL::VertexFormat = 27;
        pub const VertexFormat_VertexFormatFloat: root::MTL::VertexFormat = 28;
        pub const VertexFormat_VertexFormatFloat2: root::MTL::VertexFormat = 29;
        pub const VertexFormat_VertexFormatFloat3: root::MTL::VertexFormat = 30;
        pub const VertexFormat_VertexFormatFloat4: root::MTL::VertexFormat = 31;
        pub const VertexFormat_VertexFormatInt: root::MTL::VertexFormat = 32;
        pub const VertexFormat_VertexFormatInt2: root::MTL::VertexFormat = 33;
        pub const VertexFormat_VertexFormatInt3: root::MTL::VertexFormat = 34;
        pub const VertexFormat_VertexFormatInt4: root::MTL::VertexFormat = 35;
        pub const VertexFormat_VertexFormatUInt: root::MTL::VertexFormat = 36;
        pub const VertexFormat_VertexFormatUInt2: root::MTL::VertexFormat = 37;
        pub const VertexFormat_VertexFormatUInt3: root::MTL::VertexFormat = 38;
        pub const VertexFormat_VertexFormatUInt4: root::MTL::VertexFormat = 39;
        pub const VertexFormat_VertexFormatInt1010102Normalized: root::MTL::VertexFormat = 40;
        pub const VertexFormat_VertexFormatUInt1010102Normalized: root::MTL::VertexFormat = 41;
        pub const VertexFormat_VertexFormatUChar4Normalized_BGRA: root::MTL::VertexFormat = 42;
        pub const VertexFormat_VertexFormatUChar: root::MTL::VertexFormat = 45;
        pub const VertexFormat_VertexFormatChar: root::MTL::VertexFormat = 46;
        pub const VertexFormat_VertexFormatUCharNormalized: root::MTL::VertexFormat = 47;
        pub const VertexFormat_VertexFormatCharNormalized: root::MTL::VertexFormat = 48;
        pub const VertexFormat_VertexFormatUShort: root::MTL::VertexFormat = 49;
        pub const VertexFormat_VertexFormatShort: root::MTL::VertexFormat = 50;
        pub const VertexFormat_VertexFormatUShortNormalized: root::MTL::VertexFormat = 51;
        pub const VertexFormat_VertexFormatShortNormalized: root::MTL::VertexFormat = 52;
        pub const VertexFormat_VertexFormatHalf: root::MTL::VertexFormat = 53;
        pub type VertexFormat = root::NS::UInteger;
        pub const VertexStepFunction_VertexStepFunctionConstant: root::MTL::VertexStepFunction = 0;
        pub const VertexStepFunction_VertexStepFunctionPerVertex: root::MTL::VertexStepFunction = 1;
        pub const VertexStepFunction_VertexStepFunctionPerInstance: root::MTL::VertexStepFunction =
            2;
        pub const VertexStepFunction_VertexStepFunctionPerPatch: root::MTL::VertexStepFunction = 3;
        pub const VertexStepFunction_VertexStepFunctionPerPatchControlPoint:
            root::MTL::VertexStepFunction = 4;
        pub type VertexStepFunction = root::NS::UInteger;
        #[repr(C)]
        #[derive(Debug)]
        pub struct VertexBufferLayoutDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28VertexBufferLayoutDescriptor5allocEv"]
            pub fn VertexBufferLayoutDescriptor_alloc(
            ) -> *mut root::MTL::VertexBufferLayoutDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28VertexBufferLayoutDescriptor4initEv"]
            pub fn VertexBufferLayoutDescriptor_init(
                this: *mut root::MTL::VertexBufferLayoutDescriptor,
            ) -> *mut root::MTL::VertexBufferLayoutDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28VertexBufferLayoutDescriptor6strideEv"]
            pub fn VertexBufferLayoutDescriptor_stride(
                this: *const root::MTL::VertexBufferLayoutDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28VertexBufferLayoutDescriptor9setStrideEm"]
            pub fn VertexBufferLayoutDescriptor_setStride(
                this: *mut root::MTL::VertexBufferLayoutDescriptor,
                stride: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28VertexBufferLayoutDescriptor12stepFunctionEv"]
            pub fn VertexBufferLayoutDescriptor_stepFunction(
                this: *const root::MTL::VertexBufferLayoutDescriptor,
            ) -> root::MTL::VertexStepFunction;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28VertexBufferLayoutDescriptor15setStepFunctionENS_18VertexStepFunctionE"]
            pub fn VertexBufferLayoutDescriptor_setStepFunction(
                this: *mut root::MTL::VertexBufferLayoutDescriptor,
                stepFunction: root::MTL::VertexStepFunction,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL28VertexBufferLayoutDescriptor8stepRateEv"]
            pub fn VertexBufferLayoutDescriptor_stepRate(
                this: *const root::MTL::VertexBufferLayoutDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL28VertexBufferLayoutDescriptor11setStepRateEm"]
            pub fn VertexBufferLayoutDescriptor_setStepRate(
                this: *mut root::MTL::VertexBufferLayoutDescriptor,
                stepRate: root::NS::UInteger,
            );
        }
        impl VertexBufferLayoutDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::VertexBufferLayoutDescriptor {
                VertexBufferLayoutDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::VertexBufferLayoutDescriptor {
                VertexBufferLayoutDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn stride(&self) -> root::NS::UInteger {
                VertexBufferLayoutDescriptor_stride(self)
            }
            #[inline]
            pub unsafe fn setStride(&mut self, stride: root::NS::UInteger) {
                VertexBufferLayoutDescriptor_setStride(self, stride)
            }
            #[inline]
            pub unsafe fn stepFunction(&self) -> root::MTL::VertexStepFunction {
                VertexBufferLayoutDescriptor_stepFunction(self)
            }
            #[inline]
            pub unsafe fn setStepFunction(&mut self, stepFunction: root::MTL::VertexStepFunction) {
                VertexBufferLayoutDescriptor_setStepFunction(self, stepFunction)
            }
            #[inline]
            pub unsafe fn stepRate(&self) -> root::NS::UInteger {
                VertexBufferLayoutDescriptor_stepRate(self)
            }
            #[inline]
            pub unsafe fn setStepRate(&mut self, stepRate: root::NS::UInteger) {
                VertexBufferLayoutDescriptor_setStepRate(self, stepRate)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct VertexBufferLayoutDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33VertexBufferLayoutDescriptorArray5allocEv"]
            pub fn VertexBufferLayoutDescriptorArray_alloc(
            ) -> *mut root::MTL::VertexBufferLayoutDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33VertexBufferLayoutDescriptorArray4initEv"]
            pub fn VertexBufferLayoutDescriptorArray_init(
                this: *mut root::MTL::VertexBufferLayoutDescriptorArray,
            ) -> *mut root::MTL::VertexBufferLayoutDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33VertexBufferLayoutDescriptorArray6objectEm"]
            pub fn VertexBufferLayoutDescriptorArray_object(
                this: *mut root::MTL::VertexBufferLayoutDescriptorArray,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::VertexBufferLayoutDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL33VertexBufferLayoutDescriptorArray9setObjectEPKNS_28VertexBufferLayoutDescriptorEm"]
            pub fn VertexBufferLayoutDescriptorArray_setObject(
                this: *mut root::MTL::VertexBufferLayoutDescriptorArray,
                bufferDesc: *const root::MTL::VertexBufferLayoutDescriptor,
                index: root::NS::UInteger,
            );
        }
        impl VertexBufferLayoutDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::VertexBufferLayoutDescriptorArray {
                VertexBufferLayoutDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::VertexBufferLayoutDescriptorArray {
                VertexBufferLayoutDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::VertexBufferLayoutDescriptor {
                VertexBufferLayoutDescriptorArray_object(self, index)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                bufferDesc: *const root::MTL::VertexBufferLayoutDescriptor,
                index: root::NS::UInteger,
            ) {
                VertexBufferLayoutDescriptorArray_setObject(self, bufferDesc, index)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct VertexAttributeDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25VertexAttributeDescriptor5allocEv"]
            pub fn VertexAttributeDescriptor_alloc() -> *mut root::MTL::VertexAttributeDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25VertexAttributeDescriptor4initEv"]
            pub fn VertexAttributeDescriptor_init(
                this: *mut root::MTL::VertexAttributeDescriptor,
            ) -> *mut root::MTL::VertexAttributeDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25VertexAttributeDescriptor6formatEv"]
            pub fn VertexAttributeDescriptor_format(
                this: *const root::MTL::VertexAttributeDescriptor,
            ) -> root::MTL::VertexFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25VertexAttributeDescriptor9setFormatENS_12VertexFormatE"]
            pub fn VertexAttributeDescriptor_setFormat(
                this: *mut root::MTL::VertexAttributeDescriptor,
                format: root::MTL::VertexFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25VertexAttributeDescriptor6offsetEv"]
            pub fn VertexAttributeDescriptor_offset(
                this: *const root::MTL::VertexAttributeDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25VertexAttributeDescriptor9setOffsetEm"]
            pub fn VertexAttributeDescriptor_setOffset(
                this: *mut root::MTL::VertexAttributeDescriptor,
                offset: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL25VertexAttributeDescriptor11bufferIndexEv"]
            pub fn VertexAttributeDescriptor_bufferIndex(
                this: *const root::MTL::VertexAttributeDescriptor,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL25VertexAttributeDescriptor14setBufferIndexEm"]
            pub fn VertexAttributeDescriptor_setBufferIndex(
                this: *mut root::MTL::VertexAttributeDescriptor,
                bufferIndex: root::NS::UInteger,
            );
        }
        impl VertexAttributeDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::VertexAttributeDescriptor {
                VertexAttributeDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::VertexAttributeDescriptor {
                VertexAttributeDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn format(&self) -> root::MTL::VertexFormat {
                VertexAttributeDescriptor_format(self)
            }
            #[inline]
            pub unsafe fn setFormat(&mut self, format: root::MTL::VertexFormat) {
                VertexAttributeDescriptor_setFormat(self, format)
            }
            #[inline]
            pub unsafe fn offset(&self) -> root::NS::UInteger {
                VertexAttributeDescriptor_offset(self)
            }
            #[inline]
            pub unsafe fn setOffset(&mut self, offset: root::NS::UInteger) {
                VertexAttributeDescriptor_setOffset(self, offset)
            }
            #[inline]
            pub unsafe fn bufferIndex(&self) -> root::NS::UInteger {
                VertexAttributeDescriptor_bufferIndex(self)
            }
            #[inline]
            pub unsafe fn setBufferIndex(&mut self, bufferIndex: root::NS::UInteger) {
                VertexAttributeDescriptor_setBufferIndex(self, bufferIndex)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct VertexAttributeDescriptorArray {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VertexAttributeDescriptorArray5allocEv"]
            pub fn VertexAttributeDescriptorArray_alloc(
            ) -> *mut root::MTL::VertexAttributeDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VertexAttributeDescriptorArray4initEv"]
            pub fn VertexAttributeDescriptorArray_init(
                this: *mut root::MTL::VertexAttributeDescriptorArray,
            ) -> *mut root::MTL::VertexAttributeDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VertexAttributeDescriptorArray6objectEm"]
            pub fn VertexAttributeDescriptorArray_object(
                this: *mut root::MTL::VertexAttributeDescriptorArray,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::VertexAttributeDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL30VertexAttributeDescriptorArray9setObjectEPKNS_25VertexAttributeDescriptorEm"]
            pub fn VertexAttributeDescriptorArray_setObject(
                this: *mut root::MTL::VertexAttributeDescriptorArray,
                attributeDesc: *const root::MTL::VertexAttributeDescriptor,
                index: root::NS::UInteger,
            );
        }
        impl VertexAttributeDescriptorArray {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::VertexAttributeDescriptorArray {
                VertexAttributeDescriptorArray_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::VertexAttributeDescriptorArray {
                VertexAttributeDescriptorArray_init(self)
            }
            #[inline]
            pub unsafe fn object(
                &mut self,
                index: root::NS::UInteger,
            ) -> *mut root::MTL::VertexAttributeDescriptor {
                VertexAttributeDescriptorArray_object(self, index)
            }
            #[inline]
            pub unsafe fn setObject(
                &mut self,
                attributeDesc: *const root::MTL::VertexAttributeDescriptor,
                index: root::NS::UInteger,
            ) {
                VertexAttributeDescriptorArray_setObject(self, attributeDesc, index)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct VertexDescriptor {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL16VertexDescriptor5allocEv"]
            pub fn VertexDescriptor_alloc() -> *mut root::MTL::VertexDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL16VertexDescriptor4initEv"]
            pub fn VertexDescriptor_init(
                this: *mut root::MTL::VertexDescriptor,
            ) -> *mut root::MTL::VertexDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL16VertexDescriptor16vertexDescriptorEv"]
            pub fn VertexDescriptor_vertexDescriptor() -> *mut root::MTL::VertexDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL16VertexDescriptor7layoutsEv"]
            pub fn VertexDescriptor_layouts(
                this: *const root::MTL::VertexDescriptor,
            ) -> *mut root::MTL::VertexBufferLayoutDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTL16VertexDescriptor10attributesEv"]
            pub fn VertexDescriptor_attributes(
                this: *const root::MTL::VertexDescriptor,
            ) -> *mut root::MTL::VertexAttributeDescriptorArray;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTL16VertexDescriptor5resetEv"]
            pub fn VertexDescriptor_reset(this: *mut root::MTL::VertexDescriptor);
        }
        impl VertexDescriptor {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTL::VertexDescriptor {
                VertexDescriptor_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::MTL::VertexDescriptor {
                VertexDescriptor_init(self)
            }
            #[inline]
            pub unsafe fn vertexDescriptor() -> *mut root::MTL::VertexDescriptor {
                VertexDescriptor_vertexDescriptor()
            }
            #[inline]
            pub unsafe fn layouts(&self) -> *mut root::MTL::VertexBufferLayoutDescriptorArray {
                VertexDescriptor_layouts(self)
            }
            #[inline]
            pub unsafe fn attributes(&self) -> *mut root::MTL::VertexAttributeDescriptorArray {
                VertexDescriptor_attributes(self)
            }
            #[inline]
            pub unsafe fn reset(&mut self) {
                VertexDescriptor_reset(self)
            }
        }
    }
    pub mod NS {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod Private {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub mod Class {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
            }
        }
        pub type TimeInterval = f64;
        pub type Integer = isize;
        pub type UInteger = usize;
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct OperatingSystemVersion {
            pub majorVersion: root::NS::Integer,
            pub minorVersion: root::NS::Integer,
            pub patchVersion: root::NS::Integer,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Referencing<_Base> {
            pub _base: _Base,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Base>>,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Copying<_Base> {
            pub _base: root::NS::Referencing<_Base>,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Base>>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Object {
            pub _base: root::NS::Referencing<root::objc_object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Object4hashEv"]
            pub fn Object_hash(this: *const root::NS::Object) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Object7isEqualEPKS0_"]
            pub fn Object_isEqual(
                this: *const root::NS::Object,
                pObject: *const root::NS::Object,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Object11descriptionEv"]
            pub fn Object_description(this: *const root::NS::Object) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Object16debugDescriptionEv"]
            pub fn Object_debugDescription(this: *const root::NS::Object) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Object26methodSignatureForSelectorEPKvP13objc_selector"]
            pub fn Object_methodSignatureForSelector(
                pObj: *const ::std::os::raw::c_void,
                selector: root::SEL,
            ) -> *mut root::MethodSignature;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Object18respondsToSelectorEPKvP13objc_selector"]
            pub fn Object_respondsToSelector(
                pObj: *const ::std::os::raw::c_void,
                selector: root::SEL,
            ) -> bool;
        }
        impl Object {
            #[inline]
            pub unsafe fn hash(&self) -> root::NS::UInteger {
                Object_hash(self)
            }
            #[inline]
            pub unsafe fn isEqual(&self, pObject: *const root::NS::Object) -> bool {
                Object_isEqual(self, pObject)
            }
            #[inline]
            pub unsafe fn description(&self) -> *mut root::NS::String {
                Object_description(self)
            }
            #[inline]
            pub unsafe fn debugDescription(&self) -> *mut root::NS::String {
                Object_debugDescription(self)
            }
            #[inline]
            pub unsafe fn methodSignatureForSelector(
                pObj: *const ::std::os::raw::c_void,
                selector: root::SEL,
            ) -> *mut root::MethodSignature {
                Object_methodSignatureForSelector(pObj, selector)
            }
            #[inline]
            pub unsafe fn respondsToSelector(
                pObj: *const ::std::os::raw::c_void,
                selector: root::SEL,
            ) -> bool {
                Object_respondsToSelector(pObj, selector)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Array {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Array5arrayEv"]
            pub fn Array_array() -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Array5arrayEPKNS_6ObjectE"]
            pub fn Array_array1(pObject: *const root::NS::Object) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Array5arrayEPKPKNS_6ObjectEm"]
            pub fn Array_array2(
                pObjects: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Array5allocEv"]
            pub fn Array_alloc() -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Array4initEv"]
            pub fn Array_init(this: *mut root::NS::Array) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Array4initEPKPKNS_6ObjectEm"]
            pub fn Array_init1(
                this: *mut root::NS::Array,
                pObjects: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Array4initEPKNS_5CoderE"]
            pub fn Array_init2(
                this: *mut root::NS::Array,
                pCoder: *mut root::Coder,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Array5countEv"]
            pub fn Array_count(this: *const root::NS::Array) -> root::NS::UInteger;
        }
        impl Array {
            #[inline]
            pub unsafe fn array() -> *mut root::NS::Array {
                Array_array()
            }
            #[inline]
            pub unsafe fn array1(pObject: *const root::NS::Object) -> *mut root::NS::Array {
                Array_array1(pObject)
            }
            #[inline]
            pub unsafe fn array2(
                pObjects: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Array {
                Array_array2(pObjects, count)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Array {
                Array_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::Array {
                Array_init(self)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                pObjects: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Array {
                Array_init1(self, pObjects, count)
            }
            #[inline]
            pub unsafe fn init2(&mut self, pCoder: *mut root::Coder) -> *mut root::NS::Array {
                Array_init2(self, pCoder)
            }
            #[inline]
            pub unsafe fn count(&self) -> root::NS::UInteger {
                Array_count(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct AutoreleasePool {
            pub _base: root::NS::Object,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS15AutoreleasePool5allocEv"]
            pub fn AutoreleasePool_alloc() -> *mut root::NS::AutoreleasePool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS15AutoreleasePool4initEv"]
            pub fn AutoreleasePool_init(
                this: *mut root::NS::AutoreleasePool,
            ) -> *mut root::NS::AutoreleasePool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS15AutoreleasePool5drainEv"]
            pub fn AutoreleasePool_drain(this: *mut root::NS::AutoreleasePool);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS15AutoreleasePool9addObjectEPNS_6ObjectE"]
            pub fn AutoreleasePool_addObject(
                this: *mut root::NS::AutoreleasePool,
                pObject: *mut root::NS::Object,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS15AutoreleasePool9showPoolsEv"]
            pub fn AutoreleasePool_showPools();
        }
        impl AutoreleasePool {
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::AutoreleasePool {
                AutoreleasePool_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::AutoreleasePool {
                AutoreleasePool_init(self)
            }
            #[inline]
            pub unsafe fn drain(&mut self) {
                AutoreleasePool_drain(self)
            }
            #[inline]
            pub unsafe fn addObject(&mut self, pObject: *mut root::NS::Object) {
                AutoreleasePool_addObject(self, pObject)
            }
            #[inline]
            pub unsafe fn showPools() {
                AutoreleasePool_showPools()
            }
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct FastEnumerationState {
            pub state: ::std::os::raw::c_ulong,
            pub itemsPtr: *mut *mut root::NS::Object,
            pub mutationsPtr: *mut ::std::os::raw::c_ulong,
            pub extra: [::std::os::raw::c_ulong; 5usize],
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct FastEnumeration {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS15FastEnumeration18countByEnumeratingEPNS_20FastEnumerationStateEPPNS_6ObjectEm"]
            pub fn FastEnumeration_countByEnumerating(
                this: *mut root::NS::FastEnumeration,
                pState: *mut root::NS::FastEnumerationState,
                pBuffer: *mut *mut root::NS::Object,
                len: root::NS::UInteger,
            ) -> root::NS::UInteger;
        }
        impl FastEnumeration {
            #[inline]
            pub unsafe fn countByEnumerating(
                &mut self,
                pState: *mut root::NS::FastEnumerationState,
                pBuffer: *mut *mut root::NS::Object,
                len: root::NS::UInteger,
            ) -> root::NS::UInteger {
                FastEnumeration_countByEnumerating(self, pState, pBuffer, len)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Enumerator {
            pub _base: root::NS::Referencing<root::NS::FastEnumeration>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Dictionary {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS10Dictionary10dictionaryEv"]
            pub fn Dictionary_dictionary() -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS10Dictionary10dictionaryEPKNS_6ObjectES3_"]
            pub fn Dictionary_dictionary1(
                pObject: *const root::NS::Object,
                pKey: *const root::NS::Object,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS10Dictionary10dictionaryEPKPKNS_6ObjectES5_m"]
            pub fn Dictionary_dictionary2(
                pObjects: *const *const root::NS::Object,
                pKeys: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS10Dictionary5allocEv"]
            pub fn Dictionary_alloc() -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS10Dictionary4initEv"]
            pub fn Dictionary_init(this: *mut root::NS::Dictionary) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS10Dictionary4initEPKPKNS_6ObjectES5_m"]
            pub fn Dictionary_init1(
                this: *mut root::NS::Dictionary,
                pObjects: *const *const root::NS::Object,
                pKeys: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS10Dictionary4initEPKNS_5CoderE"]
            pub fn Dictionary_init2(
                this: *mut root::NS::Dictionary,
                pCoder: *const root::Coder,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS10Dictionary5countEv"]
            pub fn Dictionary_count(this: *const root::NS::Dictionary) -> root::NS::UInteger;
        }
        impl Dictionary {
            #[inline]
            pub unsafe fn dictionary() -> *mut root::NS::Dictionary {
                Dictionary_dictionary()
            }
            #[inline]
            pub unsafe fn dictionary1(
                pObject: *const root::NS::Object,
                pKey: *const root::NS::Object,
            ) -> *mut root::NS::Dictionary {
                Dictionary_dictionary1(pObject, pKey)
            }
            #[inline]
            pub unsafe fn dictionary2(
                pObjects: *const *const root::NS::Object,
                pKeys: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Dictionary {
                Dictionary_dictionary2(pObjects, pKeys, count)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Dictionary {
                Dictionary_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::Dictionary {
                Dictionary_init(self)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                pObjects: *const *const root::NS::Object,
                pKeys: *const *const root::NS::Object,
                count: root::NS::UInteger,
            ) -> *mut root::NS::Dictionary {
                Dictionary_init1(self, pObjects, pKeys, count)
            }
            #[inline]
            pub unsafe fn init2(
                &mut self,
                pCoder: *const root::Coder,
            ) -> *mut root::NS::Dictionary {
                Dictionary_init2(self, pCoder)
            }
            #[inline]
            pub unsafe fn count(&self) -> root::NS::UInteger {
                Dictionary_count(self)
            }
        }
        #[repr(C, packed)]
        #[derive(Debug, Copy, Clone)]
        pub struct Range {
            pub location: root::NS::UInteger,
            pub length: root::NS::UInteger,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Range4MakeEmm"]
            pub fn Range_Make(loc: root::NS::UInteger, len: root::NS::UInteger) -> root::NS::Range;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Range5EqualERKS0_"]
            pub fn Range_Equal(this: *const root::NS::Range, range: *const root::NS::Range)
                -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Range15LocationInRangeEm"]
            pub fn Range_LocationInRange(
                this: *const root::NS::Range,
                loc: root::NS::UInteger,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Range3MaxEv"]
            pub fn Range_Max(this: *const root::NS::Range) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5RangeC1Emm"]
            pub fn Range_Range(
                this: *mut root::NS::Range,
                loc: root::NS::UInteger,
                len: root::NS::UInteger,
            );
        }
        impl Range {
            #[inline]
            pub unsafe fn Make(
                loc: root::NS::UInteger,
                len: root::NS::UInteger,
            ) -> root::NS::Range {
                Range_Make(loc, len)
            }
            #[inline]
            pub unsafe fn Equal(&self, range: *const root::NS::Range) -> bool {
                Range_Equal(self, range)
            }
            #[inline]
            pub unsafe fn LocationInRange(&self, loc: root::NS::UInteger) -> bool {
                Range_LocationInRange(self, loc)
            }
            #[inline]
            pub unsafe fn Max(&self) -> root::NS::UInteger {
                Range_Max(self)
            }
            #[inline]
            pub unsafe fn new(loc: root::NS::UInteger, len: root::NS::UInteger) -> Self {
                let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
                Range_Range(__bindgen_tmp.as_mut_ptr(), loc, len);
                __bindgen_tmp.assume_init()
            }
        }
        pub const StringEncoding_ASCIIStringEncoding: root::NS::StringEncoding = 1;
        pub const StringEncoding_NEXTSTEPStringEncoding: root::NS::StringEncoding = 2;
        pub const StringEncoding_JapaneseEUCStringEncoding: root::NS::StringEncoding = 3;
        pub const StringEncoding_UTF8StringEncoding: root::NS::StringEncoding = 4;
        pub const StringEncoding_ISOLatin1StringEncoding: root::NS::StringEncoding = 5;
        pub const StringEncoding_SymbolStringEncoding: root::NS::StringEncoding = 6;
        pub const StringEncoding_NonLossyASCIIStringEncoding: root::NS::StringEncoding = 7;
        pub const StringEncoding_ShiftJISStringEncoding: root::NS::StringEncoding = 8;
        pub const StringEncoding_ISOLatin2StringEncoding: root::NS::StringEncoding = 9;
        pub const StringEncoding_UnicodeStringEncoding: root::NS::StringEncoding = 10;
        pub const StringEncoding_WindowsCP1251StringEncoding: root::NS::StringEncoding = 11;
        pub const StringEncoding_WindowsCP1252StringEncoding: root::NS::StringEncoding = 12;
        pub const StringEncoding_WindowsCP1253StringEncoding: root::NS::StringEncoding = 13;
        pub const StringEncoding_WindowsCP1254StringEncoding: root::NS::StringEncoding = 14;
        pub const StringEncoding_WindowsCP1250StringEncoding: root::NS::StringEncoding = 15;
        pub const StringEncoding_ISO2022JPStringEncoding: root::NS::StringEncoding = 21;
        pub const StringEncoding_MacOSRomanStringEncoding: root::NS::StringEncoding = 30;
        pub const StringEncoding_UTF16StringEncoding: root::NS::StringEncoding = 10;
        pub const StringEncoding_UTF16BigEndianStringEncoding: root::NS::StringEncoding =
            2415919360;
        pub const StringEncoding_UTF16LittleEndianStringEncoding: root::NS::StringEncoding =
            2483028224;
        pub const StringEncoding_UTF32StringEncoding: root::NS::StringEncoding = 2348810496;
        pub const StringEncoding_UTF32BigEndianStringEncoding: root::NS::StringEncoding =
            2550137088;
        pub const StringEncoding_UTF32LittleEndianStringEncoding: root::NS::StringEncoding =
            2617245952;
        pub type StringEncoding = root::NS::UInteger;
        pub type StringCompareOptions = root::NS::UInteger;
        pub const NS_CaseInsensitiveSearch: root::NS::StringCompareOptions = 1;
        pub const NS_LiteralSearch: root::NS::StringCompareOptions = 2;
        pub const NS_BackwardsSearch: root::NS::StringCompareOptions = 4;
        pub const NS_AnchoredSearch: root::NS::StringCompareOptions = 8;
        pub const NS_NumericSearch: root::NS::StringCompareOptions = 64;
        pub const NS_DiacriticInsensitiveSearch: root::NS::StringCompareOptions = 128;
        pub const NS_WidthInsensitiveSearch: root::NS::StringCompareOptions = 256;
        pub const NS_ForcedOrderingSearch: root::NS::StringCompareOptions = 512;
        pub const NS_RegularExpressionSearch: root::NS::StringCompareOptions = 1024;
        pub type _bindgen_ty_1 = root::NS::StringCompareOptions;
        pub type unichar = ::std::os::raw::c_ushort;
        #[repr(C)]
        #[derive(Debug)]
        pub struct String {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String6stringEv"]
            pub fn String_string() -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String6stringEPKS0_"]
            pub fn String_string1(pString: *const root::NS::String) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String6stringEPKcNS_14StringEncodingE"]
            pub fn String_string2(
                pString: *const ::std::os::raw::c_char,
                encoding: root::NS::StringEncoding,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String5allocEv"]
            pub fn String_alloc() -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String4initEv"]
            pub fn String_init(this: *mut root::NS::String) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String4initEPKS0_"]
            pub fn String_init1(
                this: *mut root::NS::String,
                pString: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String4initEPKcNS_14StringEncodingE"]
            pub fn String_init2(
                this: *mut root::NS::String,
                pString: *const ::std::os::raw::c_char,
                encoding: root::NS::StringEncoding,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6String4initEPvmNS_14StringEncodingEb"]
            pub fn String_init3(
                this: *mut root::NS::String,
                pBytes: *mut ::std::os::raw::c_void,
                len: root::NS::UInteger,
                encoding: root::NS::StringEncoding,
                freeBuffer: bool,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String9characterEm"]
            pub fn String_character(
                this: *const root::NS::String,
                index: root::NS::UInteger,
            ) -> root::NS::unichar;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String6lengthEv"]
            pub fn String_length(this: *const root::NS::String) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String7cStringENS_14StringEncodingE"]
            pub fn String_cString(
                this: *const root::NS::String,
                encoding: root::NS::StringEncoding,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String10utf8StringEv"]
            pub fn String_utf8String(
                this: *const root::NS::String,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String20maximumLengthOfBytesENS_14StringEncodingE"]
            pub fn String_maximumLengthOfBytes(
                this: *const root::NS::String,
                encoding: root::NS::StringEncoding,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String13lengthOfBytesENS_14StringEncodingE"]
            pub fn String_lengthOfBytes(
                this: *const root::NS::String,
                encoding: root::NS::StringEncoding,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String15isEqualToStringEPKS0_"]
            pub fn String_isEqualToString(
                this: *const root::NS::String,
                pString: *const root::NS::String,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String13rangeOfStringEPKS0_m"]
            pub fn String_rangeOfString(
                this: *const root::NS::String,
                pString: *const root::NS::String,
                options: root::NS::StringCompareOptions,
            ) -> root::NS::Range;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String24fileSystemRepresentationEv"]
            pub fn String_fileSystemRepresentation(
                this: *const root::NS::String,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6String23stringByAppendingStringEPKS0_"]
            pub fn String_stringByAppendingString(
                this: *const root::NS::String,
                pString: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        impl String {
            #[inline]
            pub unsafe fn string() -> *mut root::NS::String {
                String_string()
            }
            #[inline]
            pub unsafe fn string1(pString: *const root::NS::String) -> *mut root::NS::String {
                String_string1(pString)
            }
            #[inline]
            pub unsafe fn string2(
                pString: *const ::std::os::raw::c_char,
                encoding: root::NS::StringEncoding,
            ) -> *mut root::NS::String {
                String_string2(pString, encoding)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::String {
                String_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::String {
                String_init(self)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                pString: *const root::NS::String,
            ) -> *mut root::NS::String {
                String_init1(self, pString)
            }
            #[inline]
            pub unsafe fn init2(
                &mut self,
                pString: *const ::std::os::raw::c_char,
                encoding: root::NS::StringEncoding,
            ) -> *mut root::NS::String {
                String_init2(self, pString, encoding)
            }
            #[inline]
            pub unsafe fn init3(
                &mut self,
                pBytes: *mut ::std::os::raw::c_void,
                len: root::NS::UInteger,
                encoding: root::NS::StringEncoding,
                freeBuffer: bool,
            ) -> *mut root::NS::String {
                String_init3(self, pBytes, len, encoding, freeBuffer)
            }
            #[inline]
            pub unsafe fn character(&self, index: root::NS::UInteger) -> root::NS::unichar {
                String_character(self, index)
            }
            #[inline]
            pub unsafe fn length(&self) -> root::NS::UInteger {
                String_length(self)
            }
            #[inline]
            pub unsafe fn cString(
                &self,
                encoding: root::NS::StringEncoding,
            ) -> *const ::std::os::raw::c_char {
                String_cString(self, encoding)
            }
            #[inline]
            pub unsafe fn utf8String(&self) -> *const ::std::os::raw::c_char {
                String_utf8String(self)
            }
            #[inline]
            pub unsafe fn maximumLengthOfBytes(
                &self,
                encoding: root::NS::StringEncoding,
            ) -> root::NS::UInteger {
                String_maximumLengthOfBytes(self, encoding)
            }
            #[inline]
            pub unsafe fn lengthOfBytes(
                &self,
                encoding: root::NS::StringEncoding,
            ) -> root::NS::UInteger {
                String_lengthOfBytes(self, encoding)
            }
            #[inline]
            pub unsafe fn isEqualToString(&self, pString: *const root::NS::String) -> bool {
                String_isEqualToString(self, pString)
            }
            #[inline]
            pub unsafe fn rangeOfString(
                &self,
                pString: *const root::NS::String,
                options: root::NS::StringCompareOptions,
            ) -> root::NS::Range {
                String_rangeOfString(self, pString, options)
            }
            #[inline]
            pub unsafe fn fileSystemRepresentation(&self) -> *const ::std::os::raw::c_char {
                String_fileSystemRepresentation(self)
            }
            #[inline]
            pub unsafe fn stringByAppendingString(
                &self,
                pString: *const root::NS::String,
            ) -> *mut root::NS::String {
                String_stringByAppendingString(self, pString)
            }
        }
        pub type NotificationName = *mut root::NS::String;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Notification {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS12Notification4nameEv"]
            pub fn Notification_name(this: *const root::NS::Notification) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS12Notification6objectEv"]
            pub fn Notification_object(
                this: *const root::NS::Notification,
            ) -> *mut root::NS::Object;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS12Notification8userInfoEv"]
            pub fn Notification_userInfo(
                this: *const root::NS::Notification,
            ) -> *mut root::NS::Dictionary;
        }
        impl Notification {
            #[inline]
            pub unsafe fn name(&self) -> *mut root::NS::String {
                Notification_name(self)
            }
            #[inline]
            pub unsafe fn object(&self) -> *mut root::NS::Object {
                Notification_object(self)
            }
            #[inline]
            pub unsafe fn userInfo(&self) -> *mut root::NS::Dictionary {
                Notification_userInfo(self)
            }
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS15LocalizedStringEPKNS_6StringES2_"]
            pub fn LocalizedString(
                pKey: *const root::NS::String,
                arg1: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS24LocalizedStringFromTableEPKNS_6StringES2_S2_"]
            pub fn LocalizedStringFromTable(
                pKey: *const root::NS::String,
                pTbl: *const root::NS::String,
                arg1: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS32LocalizedStringFromTableInBundleEPKNS_6StringES2_PKNS_6BundleES2_"]
            pub fn LocalizedStringFromTableInBundle(
                pKey: *const root::NS::String,
                pTbl: *const root::NS::String,
                pBdle: *const root::NS::Bundle,
                arg1: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS31LocalizedStringWithDefaultValueEPKNS_6StringES2_PKNS_6BundleES2_S2_"]
            pub fn LocalizedStringWithDefaultValue(
                pKey: *const root::NS::String,
                pTbl: *const root::NS::String,
                pBdle: *const root::NS::Bundle,
                pVal: *const root::NS::String,
                arg1: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Bundle {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle10mainBundleEv"]
            pub fn Bundle_mainBundle() -> *mut root::NS::Bundle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle6bundleEPKNS_6StringE"]
            pub fn Bundle_bundle(pPath: *const root::NS::String) -> *mut root::NS::Bundle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle6bundleEPKNS_3URLE"]
            pub fn Bundle_bundle1(pURL: *const root::NS::URL) -> *mut root::NS::Bundle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle5allocEv"]
            pub fn Bundle_alloc() -> *mut root::NS::Bundle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle4initEPKNS_6StringE"]
            pub fn Bundle_init(
                this: *mut root::NS::Bundle,
                pPath: *const root::NS::String,
            ) -> *mut root::NS::Bundle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle4initEPKNS_3URLE"]
            pub fn Bundle_init1(
                this: *mut root::NS::Bundle,
                pURL: *const root::NS::URL,
            ) -> *mut root::NS::Bundle;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle10allBundlesEv"]
            pub fn Bundle_allBundles(this: *const root::NS::Bundle) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle13allFrameworksEv"]
            pub fn Bundle_allFrameworks(this: *const root::NS::Bundle) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle4loadEv"]
            pub fn Bundle_load(this: *mut root::NS::Bundle) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle6unloadEv"]
            pub fn Bundle_unload(this: *mut root::NS::Bundle) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle8isLoadedEv"]
            pub fn Bundle_isLoaded(this: *const root::NS::Bundle) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle23preflightAndReturnErrorEPPNS_5ErrorE"]
            pub fn Bundle_preflightAndReturnError(
                this: *const root::NS::Bundle,
                pError: *mut *mut root::NS::Error,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle18loadAndReturnErrorEPPNS_5ErrorE"]
            pub fn Bundle_loadAndReturnError(
                this: *mut root::NS::Bundle,
                pError: *mut *mut root::NS::Error,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle9bundleURLEv"]
            pub fn Bundle_bundleURL(this: *const root::NS::Bundle) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle11resourceURLEv"]
            pub fn Bundle_resourceURL(this: *const root::NS::Bundle) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle13executableURLEv"]
            pub fn Bundle_executableURL(this: *const root::NS::Bundle) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle25URLForAuxiliaryExecutableEPKNS_6StringE"]
            pub fn Bundle_URLForAuxiliaryExecutable(
                this: *const root::NS::Bundle,
                pExecutableName: *const root::NS::String,
            ) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle20privateFrameworksURLEv"]
            pub fn Bundle_privateFrameworksURL(this: *const root::NS::Bundle)
                -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle19sharedFrameworksURLEv"]
            pub fn Bundle_sharedFrameworksURL(this: *const root::NS::Bundle) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle16sharedSupportURLEv"]
            pub fn Bundle_sharedSupportURL(this: *const root::NS::Bundle) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle17builtInPlugInsURLEv"]
            pub fn Bundle_builtInPlugInsURL(this: *const root::NS::Bundle) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle18appStoreReceiptURLEv"]
            pub fn Bundle_appStoreReceiptURL(this: *const root::NS::Bundle) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle10bundlePathEv"]
            pub fn Bundle_bundlePath(this: *const root::NS::Bundle) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle12resourcePathEv"]
            pub fn Bundle_resourcePath(this: *const root::NS::Bundle) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle14executablePathEv"]
            pub fn Bundle_executablePath(this: *const root::NS::Bundle) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle26pathForAuxiliaryExecutableEPKNS_6StringE"]
            pub fn Bundle_pathForAuxiliaryExecutable(
                this: *const root::NS::Bundle,
                pExecutableName: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle21privateFrameworksPathEv"]
            pub fn Bundle_privateFrameworksPath(
                this: *const root::NS::Bundle,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle20sharedFrameworksPathEv"]
            pub fn Bundle_sharedFrameworksPath(
                this: *const root::NS::Bundle,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle17sharedSupportPathEv"]
            pub fn Bundle_sharedSupportPath(this: *const root::NS::Bundle)
                -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle18builtInPlugInsPathEv"]
            pub fn Bundle_builtInPlugInsPath(
                this: *const root::NS::Bundle,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle16bundleIdentifierEv"]
            pub fn Bundle_bundleIdentifier(this: *const root::NS::Bundle) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle14infoDictionaryEv"]
            pub fn Bundle_infoDictionary(
                this: *const root::NS::Bundle,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle23localizedInfoDictionaryEv"]
            pub fn Bundle_localizedInfoDictionary(
                this: *const root::NS::Bundle,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Bundle26objectForInfoDictionaryKeyEPKNS_6StringE"]
            pub fn Bundle_objectForInfoDictionaryKey(
                this: *mut root::NS::Bundle,
                pKey: *const root::NS::String,
            ) -> *mut root::NS::Object;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Bundle15localizedStringEPKNS_6StringES3_S3_"]
            pub fn Bundle_localizedString(
                this: *const root::NS::Bundle,
                pKey: *const root::NS::String,
                pValue: *const root::NS::String,
                pTableName: *const root::NS::String,
            ) -> *mut root::NS::String;
        }
        impl Bundle {
            #[inline]
            pub unsafe fn mainBundle() -> *mut root::NS::Bundle {
                Bundle_mainBundle()
            }
            #[inline]
            pub unsafe fn bundle(pPath: *const root::NS::String) -> *mut root::NS::Bundle {
                Bundle_bundle(pPath)
            }
            #[inline]
            pub unsafe fn bundle1(pURL: *const root::NS::URL) -> *mut root::NS::Bundle {
                Bundle_bundle1(pURL)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Bundle {
                Bundle_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self, pPath: *const root::NS::String) -> *mut root::NS::Bundle {
                Bundle_init(self, pPath)
            }
            #[inline]
            pub unsafe fn init1(&mut self, pURL: *const root::NS::URL) -> *mut root::NS::Bundle {
                Bundle_init1(self, pURL)
            }
            #[inline]
            pub unsafe fn allBundles(&self) -> *mut root::NS::Array {
                Bundle_allBundles(self)
            }
            #[inline]
            pub unsafe fn allFrameworks(&self) -> *mut root::NS::Array {
                Bundle_allFrameworks(self)
            }
            #[inline]
            pub unsafe fn load(&mut self) -> bool {
                Bundle_load(self)
            }
            #[inline]
            pub unsafe fn unload(&mut self) -> bool {
                Bundle_unload(self)
            }
            #[inline]
            pub unsafe fn isLoaded(&self) -> bool {
                Bundle_isLoaded(self)
            }
            #[inline]
            pub unsafe fn preflightAndReturnError(
                &self,
                pError: *mut *mut root::NS::Error,
            ) -> bool {
                Bundle_preflightAndReturnError(self, pError)
            }
            #[inline]
            pub unsafe fn loadAndReturnError(&mut self, pError: *mut *mut root::NS::Error) -> bool {
                Bundle_loadAndReturnError(self, pError)
            }
            #[inline]
            pub unsafe fn bundleURL(&self) -> *mut root::NS::URL {
                Bundle_bundleURL(self)
            }
            #[inline]
            pub unsafe fn resourceURL(&self) -> *mut root::NS::URL {
                Bundle_resourceURL(self)
            }
            #[inline]
            pub unsafe fn executableURL(&self) -> *mut root::NS::URL {
                Bundle_executableURL(self)
            }
            #[inline]
            pub unsafe fn URLForAuxiliaryExecutable(
                &self,
                pExecutableName: *const root::NS::String,
            ) -> *mut root::NS::URL {
                Bundle_URLForAuxiliaryExecutable(self, pExecutableName)
            }
            #[inline]
            pub unsafe fn privateFrameworksURL(&self) -> *mut root::NS::URL {
                Bundle_privateFrameworksURL(self)
            }
            #[inline]
            pub unsafe fn sharedFrameworksURL(&self) -> *mut root::NS::URL {
                Bundle_sharedFrameworksURL(self)
            }
            #[inline]
            pub unsafe fn sharedSupportURL(&self) -> *mut root::NS::URL {
                Bundle_sharedSupportURL(self)
            }
            #[inline]
            pub unsafe fn builtInPlugInsURL(&self) -> *mut root::NS::URL {
                Bundle_builtInPlugInsURL(self)
            }
            #[inline]
            pub unsafe fn appStoreReceiptURL(&self) -> *mut root::NS::URL {
                Bundle_appStoreReceiptURL(self)
            }
            #[inline]
            pub unsafe fn bundlePath(&self) -> *mut root::NS::String {
                Bundle_bundlePath(self)
            }
            #[inline]
            pub unsafe fn resourcePath(&self) -> *mut root::NS::String {
                Bundle_resourcePath(self)
            }
            #[inline]
            pub unsafe fn executablePath(&self) -> *mut root::NS::String {
                Bundle_executablePath(self)
            }
            #[inline]
            pub unsafe fn pathForAuxiliaryExecutable(
                &self,
                pExecutableName: *const root::NS::String,
            ) -> *mut root::NS::String {
                Bundle_pathForAuxiliaryExecutable(self, pExecutableName)
            }
            #[inline]
            pub unsafe fn privateFrameworksPath(&self) -> *mut root::NS::String {
                Bundle_privateFrameworksPath(self)
            }
            #[inline]
            pub unsafe fn sharedFrameworksPath(&self) -> *mut root::NS::String {
                Bundle_sharedFrameworksPath(self)
            }
            #[inline]
            pub unsafe fn sharedSupportPath(&self) -> *mut root::NS::String {
                Bundle_sharedSupportPath(self)
            }
            #[inline]
            pub unsafe fn builtInPlugInsPath(&self) -> *mut root::NS::String {
                Bundle_builtInPlugInsPath(self)
            }
            #[inline]
            pub unsafe fn bundleIdentifier(&self) -> *mut root::NS::String {
                Bundle_bundleIdentifier(self)
            }
            #[inline]
            pub unsafe fn infoDictionary(&self) -> *mut root::NS::Dictionary {
                Bundle_infoDictionary(self)
            }
            #[inline]
            pub unsafe fn localizedInfoDictionary(&self) -> *mut root::NS::Dictionary {
                Bundle_localizedInfoDictionary(self)
            }
            #[inline]
            pub unsafe fn objectForInfoDictionaryKey(
                &mut self,
                pKey: *const root::NS::String,
            ) -> *mut root::NS::Object {
                Bundle_objectForInfoDictionaryKey(self, pKey)
            }
            #[inline]
            pub unsafe fn localizedString(
                &self,
                pKey: *const root::NS::String,
                pValue: *const root::NS::String,
                pTableName: *const root::NS::String,
            ) -> *mut root::NS::String {
                Bundle_localizedString(self, pKey, pValue, pTableName)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Data {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS4Data12mutableBytesEv"]
            pub fn Data_mutableBytes(this: *const root::NS::Data) -> *mut ::std::os::raw::c_void;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS4Data6lengthEv"]
            pub fn Data_length(this: *const root::NS::Data) -> root::NS::UInteger;
        }
        impl Data {
            #[inline]
            pub unsafe fn mutableBytes(&self) -> *mut ::std::os::raw::c_void {
                Data_mutableBytes(self)
            }
            #[inline]
            pub unsafe fn length(&self) -> root::NS::UInteger {
                Data_length(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Date {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS4Date28dateWithTimeIntervalSinceNowEd"]
            pub fn Date_dateWithTimeIntervalSinceNow(
                secs: root::NS::TimeInterval,
            ) -> *mut root::NS::Date;
        }
        impl Date {
            #[inline]
            pub unsafe fn dateWithTimeIntervalSinceNow(
                secs: root::NS::TimeInterval,
            ) -> *mut root::NS::Date {
                Date_dateWithTimeIntervalSinceNow(secs)
            }
        }
        pub type ErrorDomain = *mut root::NS::String;
        pub type ErrorUserInfoKey = *mut root::NS::String;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Error {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Error5errorEPNS_6StringElPNS_10DictionaryE"]
            pub fn Error_error(
                domain: root::NS::ErrorDomain,
                code: root::NS::Integer,
                pDictionary: *mut root::NS::Dictionary,
            ) -> *mut root::NS::Error;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Error5allocEv"]
            pub fn Error_alloc() -> *mut root::NS::Error;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Error4initEv"]
            pub fn Error_init(this: *mut root::NS::Error) -> *mut root::NS::Error;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Error4initEPNS_6StringElPNS_10DictionaryE"]
            pub fn Error_init1(
                this: *mut root::NS::Error,
                domain: root::NS::ErrorDomain,
                code: root::NS::Integer,
                pDictionary: *mut root::NS::Dictionary,
            ) -> *mut root::NS::Error;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Error4codeEv"]
            pub fn Error_code(this: *const root::NS::Error) -> root::NS::Integer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Error6domainEv"]
            pub fn Error_domain(this: *const root::NS::Error) -> root::NS::ErrorDomain;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Error8userInfoEv"]
            pub fn Error_userInfo(this: *const root::NS::Error) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Error20localizedDescriptionEv"]
            pub fn Error_localizedDescription(
                this: *const root::NS::Error,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Error24localizedRecoveryOptionsEv"]
            pub fn Error_localizedRecoveryOptions(
                this: *const root::NS::Error,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Error27localizedRecoverySuggestionEv"]
            pub fn Error_localizedRecoverySuggestion(
                this: *const root::NS::Error,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Error22localizedFailureReasonEv"]
            pub fn Error_localizedFailureReason(
                this: *const root::NS::Error,
            ) -> *mut root::NS::String;
        }
        impl Error {
            #[inline]
            pub unsafe fn error(
                domain: root::NS::ErrorDomain,
                code: root::NS::Integer,
                pDictionary: *mut root::NS::Dictionary,
            ) -> *mut root::NS::Error {
                Error_error(domain, code, pDictionary)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Error {
                Error_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::Error {
                Error_init(self)
            }
            #[inline]
            pub unsafe fn init1(
                &mut self,
                domain: root::NS::ErrorDomain,
                code: root::NS::Integer,
                pDictionary: *mut root::NS::Dictionary,
            ) -> *mut root::NS::Error {
                Error_init1(self, domain, code, pDictionary)
            }
            #[inline]
            pub unsafe fn code(&self) -> root::NS::Integer {
                Error_code(self)
            }
            #[inline]
            pub unsafe fn domain(&self) -> root::NS::ErrorDomain {
                Error_domain(self)
            }
            #[inline]
            pub unsafe fn userInfo(&self) -> *mut root::NS::Dictionary {
                Error_userInfo(self)
            }
            #[inline]
            pub unsafe fn localizedDescription(&self) -> *mut root::NS::String {
                Error_localizedDescription(self)
            }
            #[inline]
            pub unsafe fn localizedRecoveryOptions(&self) -> *mut root::NS::Array {
                Error_localizedRecoveryOptions(self)
            }
            #[inline]
            pub unsafe fn localizedRecoverySuggestion(&self) -> *mut root::NS::String {
                Error_localizedRecoverySuggestion(self)
            }
            #[inline]
            pub unsafe fn localizedFailureReason(&self) -> *mut root::NS::String {
                Error_localizedFailureReason(self)
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Locking<_Base> {
            pub _base: _Base,
            pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Base>>,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Condition {
            pub _base: root::NS::Locking<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS9Condition5allocEv"]
            pub fn Condition_alloc() -> *mut root::NS::Condition;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS9Condition4initEv"]
            pub fn Condition_init(this: *mut root::NS::Condition) -> *mut root::NS::Condition;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS9Condition4waitEv"]
            pub fn Condition_wait(this: *mut root::NS::Condition);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS9Condition13waitUntilDateEPNS_4DateE"]
            pub fn Condition_waitUntilDate(
                this: *mut root::NS::Condition,
                pLimit: *mut root::NS::Date,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS9Condition6signalEv"]
            pub fn Condition_signal(this: *mut root::NS::Condition);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS9Condition9broadcastEv"]
            pub fn Condition_broadcast(this: *mut root::NS::Condition);
        }
        impl Condition {
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Condition {
                Condition_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::Condition {
                Condition_init(self)
            }
            #[inline]
            pub unsafe fn wait(&mut self) {
                Condition_wait(self)
            }
            #[inline]
            pub unsafe fn waitUntilDate(&mut self, pLimit: *mut root::NS::Date) -> bool {
                Condition_waitUntilDate(self, pLimit)
            }
            #[inline]
            pub unsafe fn signal(&mut self) {
                Condition_signal(self)
            }
            #[inline]
            pub unsafe fn broadcast(&mut self) {
                Condition_broadcast(self)
            }
        }
        pub const ComparisonResult_OrderedAscending: root::NS::ComparisonResult = -1;
        pub const ComparisonResult_OrderedSame: root::NS::ComparisonResult = 0;
        pub const ComparisonResult_OrderedDescending: root::NS::ComparisonResult = 1;
        pub type ComparisonResult = root::NS::Integer;
        #[repr(C)]
        #[derive(Debug)]
        pub struct Value {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Value5valueEPKvPKc"]
            pub fn Value_value(
                pValue: *const ::std::os::raw::c_void,
                pType: *const ::std::os::raw::c_char,
            ) -> *mut root::NS::Value;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Value5valueEPKv"]
            pub fn Value_value1(pPointer: *const ::std::os::raw::c_void) -> *mut root::NS::Value;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Value5allocEv"]
            pub fn Value_alloc() -> *mut root::NS::Value;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Value4initEPKvPKc"]
            pub fn Value_init(
                this: *mut root::NS::Value,
                pValue: *const ::std::os::raw::c_void,
                pType: *const ::std::os::raw::c_char,
            ) -> *mut root::NS::Value;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS5Value4initEPKNS_5CoderE"]
            pub fn Value_init1(
                this: *mut root::NS::Value,
                pCoder: *const root::Coder,
            ) -> *mut root::NS::Value;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Value8getValueEPvm"]
            pub fn Value_getValue(
                this: *const root::NS::Value,
                pValue: *mut ::std::os::raw::c_void,
                size: root::NS::UInteger,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Value8objCTypeEv"]
            pub fn Value_objCType(this: *const root::NS::Value) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Value14isEqualToValueEPS0_"]
            pub fn Value_isEqualToValue(
                this: *const root::NS::Value,
                pValue: *mut root::NS::Value,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS5Value12pointerValueEv"]
            pub fn Value_pointerValue(this: *const root::NS::Value) -> *mut ::std::os::raw::c_void;
        }
        impl Value {
            #[inline]
            pub unsafe fn value(
                pValue: *const ::std::os::raw::c_void,
                pType: *const ::std::os::raw::c_char,
            ) -> *mut root::NS::Value {
                Value_value(pValue, pType)
            }
            #[inline]
            pub unsafe fn value1(pPointer: *const ::std::os::raw::c_void) -> *mut root::NS::Value {
                Value_value1(pPointer)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Value {
                Value_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
                pValue: *const ::std::os::raw::c_void,
                pType: *const ::std::os::raw::c_char,
            ) -> *mut root::NS::Value {
                Value_init(self, pValue, pType)
            }
            #[inline]
            pub unsafe fn init1(&mut self, pCoder: *const root::Coder) -> *mut root::NS::Value {
                Value_init1(self, pCoder)
            }
            #[inline]
            pub unsafe fn getValue(
                &self,
                pValue: *mut ::std::os::raw::c_void,
                size: root::NS::UInteger,
            ) {
                Value_getValue(self, pValue, size)
            }
            #[inline]
            pub unsafe fn objCType(&self) -> *const ::std::os::raw::c_char {
                Value_objCType(self)
            }
            #[inline]
            pub unsafe fn isEqualToValue(&self, pValue: *mut root::NS::Value) -> bool {
                Value_isEqualToValue(self, pValue)
            }
            #[inline]
            pub unsafe fn pointerValue(&self) -> *mut ::std::os::raw::c_void {
                Value_pointerValue(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Number {
            pub _base: root::NS::Copying<root::NS::Value>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEc"]
            pub fn Number_number(value: ::std::os::raw::c_char) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEh"]
            pub fn Number_number1(value: ::std::os::raw::c_uchar) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEs"]
            pub fn Number_number2(value: ::std::os::raw::c_short) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEt"]
            pub fn Number_number3(value: ::std::os::raw::c_ushort) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEi"]
            pub fn Number_number4(value: ::std::os::raw::c_int) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEj"]
            pub fn Number_number5(value: ::std::os::raw::c_uint) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEl"]
            pub fn Number_number6(value: ::std::os::raw::c_long) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEm"]
            pub fn Number_number7(value: ::std::os::raw::c_ulong) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEx"]
            pub fn Number_number8(value: ::std::os::raw::c_longlong) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEy"]
            pub fn Number_number9(value: ::std::os::raw::c_ulonglong) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEf"]
            pub fn Number_number10(value: f32) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEd"]
            pub fn Number_number11(value: f64) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number6numberEb"]
            pub fn Number_number12(value: bool) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number5allocEv"]
            pub fn Number_alloc() -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEPKNS_5CoderE"]
            pub fn Number_init(
                this: *mut root::NS::Number,
                pCoder: *const root::Coder,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEc"]
            pub fn Number_init1(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_char,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEh"]
            pub fn Number_init2(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_uchar,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEs"]
            pub fn Number_init3(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_short,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEt"]
            pub fn Number_init4(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_ushort,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEi"]
            pub fn Number_init5(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_int,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEj"]
            pub fn Number_init6(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_uint,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEl"]
            pub fn Number_init7(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_long,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEm"]
            pub fn Number_init8(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_ulong,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEx"]
            pub fn Number_init9(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_longlong,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEy"]
            pub fn Number_init10(
                this: *mut root::NS::Number,
                value: ::std::os::raw::c_ulonglong,
            ) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEf"]
            pub fn Number_init11(this: *mut root::NS::Number, value: f32) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEd"]
            pub fn Number_init12(this: *mut root::NS::Number, value: f64) -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Number4initEb"]
            pub fn Number_init13(this: *mut root::NS::Number, value: bool)
                -> *mut root::NS::Number;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number9charValueEv"]
            pub fn Number_charValue(this: *const root::NS::Number) -> ::std::os::raw::c_char;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number17unsignedCharValueEv"]
            pub fn Number_unsignedCharValue(
                this: *const root::NS::Number,
            ) -> ::std::os::raw::c_uchar;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number10shortValueEv"]
            pub fn Number_shortValue(this: *const root::NS::Number) -> ::std::os::raw::c_short;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number18unsignedShortValueEv"]
            pub fn Number_unsignedShortValue(
                this: *const root::NS::Number,
            ) -> ::std::os::raw::c_ushort;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number8intValueEv"]
            pub fn Number_intValue(this: *const root::NS::Number) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number16unsignedIntValueEv"]
            pub fn Number_unsignedIntValue(this: *const root::NS::Number)
                -> ::std::os::raw::c_uint;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number9longValueEv"]
            pub fn Number_longValue(this: *const root::NS::Number) -> ::std::os::raw::c_long;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number17unsignedLongValueEv"]
            pub fn Number_unsignedLongValue(
                this: *const root::NS::Number,
            ) -> ::std::os::raw::c_ulong;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number13longLongValueEv"]
            pub fn Number_longLongValue(
                this: *const root::NS::Number,
            ) -> ::std::os::raw::c_longlong;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number21unsignedLongLongValueEv"]
            pub fn Number_unsignedLongLongValue(
                this: *const root::NS::Number,
            ) -> ::std::os::raw::c_ulonglong;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number10floatValueEv"]
            pub fn Number_floatValue(this: *const root::NS::Number) -> f32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number11doubleValueEv"]
            pub fn Number_doubleValue(this: *const root::NS::Number) -> f64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number9boolValueEv"]
            pub fn Number_boolValue(this: *const root::NS::Number) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number12integerValueEv"]
            pub fn Number_integerValue(this: *const root::NS::Number) -> root::NS::Integer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number20unsignedIntegerValueEv"]
            pub fn Number_unsignedIntegerValue(this: *const root::NS::Number)
                -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number11stringValueEv"]
            pub fn Number_stringValue(this: *const root::NS::Number) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number7compareEPKS0_"]
            pub fn Number_compare(
                this: *const root::NS::Number,
                pOtherNumber: *const root::NS::Number,
            ) -> root::NS::ComparisonResult;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number15isEqualToNumberEPKS0_"]
            pub fn Number_isEqualToNumber(
                this: *const root::NS::Number,
                pNumber: *const root::NS::Number,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS6Number21descriptionWithLocaleEPKNS_6ObjectE"]
            pub fn Number_descriptionWithLocale(
                this: *const root::NS::Number,
                pLocale: *const root::NS::Object,
            ) -> *mut root::NS::String;
        }
        impl Number {
            #[inline]
            pub unsafe fn number(value: ::std::os::raw::c_char) -> *mut root::NS::Number {
                Number_number(value)
            }
            #[inline]
            pub unsafe fn number1(value: ::std::os::raw::c_uchar) -> *mut root::NS::Number {
                Number_number1(value)
            }
            #[inline]
            pub unsafe fn number2(value: ::std::os::raw::c_short) -> *mut root::NS::Number {
                Number_number2(value)
            }
            #[inline]
            pub unsafe fn number3(value: ::std::os::raw::c_ushort) -> *mut root::NS::Number {
                Number_number3(value)
            }
            #[inline]
            pub unsafe fn number4(value: ::std::os::raw::c_int) -> *mut root::NS::Number {
                Number_number4(value)
            }
            #[inline]
            pub unsafe fn number5(value: ::std::os::raw::c_uint) -> *mut root::NS::Number {
                Number_number5(value)
            }
            #[inline]
            pub unsafe fn number6(value: ::std::os::raw::c_long) -> *mut root::NS::Number {
                Number_number6(value)
            }
            #[inline]
            pub unsafe fn number7(value: ::std::os::raw::c_ulong) -> *mut root::NS::Number {
                Number_number7(value)
            }
            #[inline]
            pub unsafe fn number8(value: ::std::os::raw::c_longlong) -> *mut root::NS::Number {
                Number_number8(value)
            }
            #[inline]
            pub unsafe fn number9(value: ::std::os::raw::c_ulonglong) -> *mut root::NS::Number {
                Number_number9(value)
            }
            #[inline]
            pub unsafe fn number10(value: f32) -> *mut root::NS::Number {
                Number_number10(value)
            }
            #[inline]
            pub unsafe fn number11(value: f64) -> *mut root::NS::Number {
                Number_number11(value)
            }
            #[inline]
            pub unsafe fn number12(value: bool) -> *mut root::NS::Number {
                Number_number12(value)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Number {
                Number_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self, pCoder: *const root::Coder) -> *mut root::NS::Number {
                Number_init(self, pCoder)
            }
            #[inline]
            pub unsafe fn init1(&mut self, value: ::std::os::raw::c_char) -> *mut root::NS::Number {
                Number_init1(self, value)
            }
            #[inline]
            pub unsafe fn init2(
                &mut self,
                value: ::std::os::raw::c_uchar,
            ) -> *mut root::NS::Number {
                Number_init2(self, value)
            }
            #[inline]
            pub unsafe fn init3(
                &mut self,
                value: ::std::os::raw::c_short,
            ) -> *mut root::NS::Number {
                Number_init3(self, value)
            }
            #[inline]
            pub unsafe fn init4(
                &mut self,
                value: ::std::os::raw::c_ushort,
            ) -> *mut root::NS::Number {
                Number_init4(self, value)
            }
            #[inline]
            pub unsafe fn init5(&mut self, value: ::std::os::raw::c_int) -> *mut root::NS::Number {
                Number_init5(self, value)
            }
            #[inline]
            pub unsafe fn init6(&mut self, value: ::std::os::raw::c_uint) -> *mut root::NS::Number {
                Number_init6(self, value)
            }
            #[inline]
            pub unsafe fn init7(&mut self, value: ::std::os::raw::c_long) -> *mut root::NS::Number {
                Number_init7(self, value)
            }
            #[inline]
            pub unsafe fn init8(
                &mut self,
                value: ::std::os::raw::c_ulong,
            ) -> *mut root::NS::Number {
                Number_init8(self, value)
            }
            #[inline]
            pub unsafe fn init9(
                &mut self,
                value: ::std::os::raw::c_longlong,
            ) -> *mut root::NS::Number {
                Number_init9(self, value)
            }
            #[inline]
            pub unsafe fn init10(
                &mut self,
                value: ::std::os::raw::c_ulonglong,
            ) -> *mut root::NS::Number {
                Number_init10(self, value)
            }
            #[inline]
            pub unsafe fn init11(&mut self, value: f32) -> *mut root::NS::Number {
                Number_init11(self, value)
            }
            #[inline]
            pub unsafe fn init12(&mut self, value: f64) -> *mut root::NS::Number {
                Number_init12(self, value)
            }
            #[inline]
            pub unsafe fn init13(&mut self, value: bool) -> *mut root::NS::Number {
                Number_init13(self, value)
            }
            #[inline]
            pub unsafe fn charValue(&self) -> ::std::os::raw::c_char {
                Number_charValue(self)
            }
            #[inline]
            pub unsafe fn unsignedCharValue(&self) -> ::std::os::raw::c_uchar {
                Number_unsignedCharValue(self)
            }
            #[inline]
            pub unsafe fn shortValue(&self) -> ::std::os::raw::c_short {
                Number_shortValue(self)
            }
            #[inline]
            pub unsafe fn unsignedShortValue(&self) -> ::std::os::raw::c_ushort {
                Number_unsignedShortValue(self)
            }
            #[inline]
            pub unsafe fn intValue(&self) -> ::std::os::raw::c_int {
                Number_intValue(self)
            }
            #[inline]
            pub unsafe fn unsignedIntValue(&self) -> ::std::os::raw::c_uint {
                Number_unsignedIntValue(self)
            }
            #[inline]
            pub unsafe fn longValue(&self) -> ::std::os::raw::c_long {
                Number_longValue(self)
            }
            #[inline]
            pub unsafe fn unsignedLongValue(&self) -> ::std::os::raw::c_ulong {
                Number_unsignedLongValue(self)
            }
            #[inline]
            pub unsafe fn longLongValue(&self) -> ::std::os::raw::c_longlong {
                Number_longLongValue(self)
            }
            #[inline]
            pub unsafe fn unsignedLongLongValue(&self) -> ::std::os::raw::c_ulonglong {
                Number_unsignedLongLongValue(self)
            }
            #[inline]
            pub unsafe fn floatValue(&self) -> f32 {
                Number_floatValue(self)
            }
            #[inline]
            pub unsafe fn doubleValue(&self) -> f64 {
                Number_doubleValue(self)
            }
            #[inline]
            pub unsafe fn boolValue(&self) -> bool {
                Number_boolValue(self)
            }
            #[inline]
            pub unsafe fn integerValue(&self) -> root::NS::Integer {
                Number_integerValue(self)
            }
            #[inline]
            pub unsafe fn unsignedIntegerValue(&self) -> root::NS::UInteger {
                Number_unsignedIntegerValue(self)
            }
            #[inline]
            pub unsafe fn stringValue(&self) -> *mut root::NS::String {
                Number_stringValue(self)
            }
            #[inline]
            pub unsafe fn compare(
                &self,
                pOtherNumber: *const root::NS::Number,
            ) -> root::NS::ComparisonResult {
                Number_compare(self, pOtherNumber)
            }
            #[inline]
            pub unsafe fn isEqualToNumber(&self, pNumber: *const root::NS::Number) -> bool {
                Number_isEqualToNumber(self, pNumber)
            }
            #[inline]
            pub unsafe fn descriptionWithLocale(
                &self,
                pLocale: *const root::NS::Object,
            ) -> *mut root::NS::String {
                Number_descriptionWithLocale(self, pLocale)
            }
        }
        pub const ProcessInfoThermalState_ProcessInfoThermalStateNominal:
            root::NS::ProcessInfoThermalState = 0;
        pub const ProcessInfoThermalState_ProcessInfoThermalStateFair:
            root::NS::ProcessInfoThermalState = 1;
        pub const ProcessInfoThermalState_ProcessInfoThermalStateSerious:
            root::NS::ProcessInfoThermalState = 2;
        pub const ProcessInfoThermalState_ProcessInfoThermalStateCritical:
            root::NS::ProcessInfoThermalState = 3;
        pub type ProcessInfoThermalState = root::NS::Integer;
        pub type ActivityOptions = u64;
        pub const NS_ActivityIdleDisplaySleepDisabled: root::NS::ActivityOptions = 1099511627776;
        pub const NS_ActivityIdleSystemSleepDisabled: root::NS::ActivityOptions = 1048576;
        pub const NS_ActivitySuddenTerminationDisabled: root::NS::ActivityOptions = 16384;
        pub const NS_ActivityAutomaticTerminationDisabled: root::NS::ActivityOptions = 32768;
        pub const NS_ActivityUserInitiated: root::NS::ActivityOptions = 16777215;
        pub const NS_ActivityUserInitiatedAllowingIdleSystemSleep: root::NS::ActivityOptions =
            15728639;
        pub const NS_ActivityBackground: root::NS::ActivityOptions = 255;
        pub const NS_ActivityLatencyCritical: root::NS::ActivityOptions = 1095216660480;
        pub type _bindgen_ty_2 = root::NS::ActivityOptions;
        #[repr(C)]
        #[derive(Debug)]
        pub struct ProcessInfo {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo11processInfoEv"]
            pub fn ProcessInfo_processInfo() -> *mut root::NS::ProcessInfo;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo9argumentsEv"]
            pub fn ProcessInfo_arguments(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo11environmentEv"]
            pub fn ProcessInfo_environment(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::Dictionary;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo8hostNameEv"]
            pub fn ProcessInfo_hostName(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo11processNameEv"]
            pub fn ProcessInfo_processName(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo14setProcessNameEPKNS_6StringE"]
            pub fn ProcessInfo_setProcessName(
                this: *mut root::NS::ProcessInfo,
                pString: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo17processIdentifierEv"]
            pub fn ProcessInfo_processIdentifier(
                this: *const root::NS::ProcessInfo,
            ) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo20globallyUniqueStringEv"]
            pub fn ProcessInfo_globallyUniqueString(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo8userNameEv"]
            pub fn ProcessInfo_userName(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo12fullUserNameEv"]
            pub fn ProcessInfo_fullUserName(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo15operatingSystemEv"]
            pub fn ProcessInfo_operatingSystem(
                this: *const root::NS::ProcessInfo,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo22operatingSystemVersionEv"]
            pub fn ProcessInfo_operatingSystemVersion(
                this: *const root::NS::ProcessInfo,
            ) -> root::NS::OperatingSystemVersion;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo28operatingSystemVersionStringEv"]
            pub fn ProcessInfo_operatingSystemVersionString(
                this: *const root::NS::ProcessInfo,
            ) -> *mut root::NS::String;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo31isOperatingSystemAtLeastVersionENS_22OperatingSystemVersionE"]
            pub fn ProcessInfo_isOperatingSystemAtLeastVersion(
                this: *const root::NS::ProcessInfo,
                version: root::NS::OperatingSystemVersion,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo14processorCountEv"]
            pub fn ProcessInfo_processorCount(
                this: *const root::NS::ProcessInfo,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo20activeProcessorCountEv"]
            pub fn ProcessInfo_activeProcessorCount(
                this: *const root::NS::ProcessInfo,
            ) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo14physicalMemoryEv"]
            pub fn ProcessInfo_physicalMemory(
                this: *const root::NS::ProcessInfo,
            ) -> ::std::os::raw::c_ulonglong;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo12systemUptimeEv"]
            pub fn ProcessInfo_systemUptime(
                this: *const root::NS::ProcessInfo,
            ) -> root::NS::TimeInterval;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo24disableSuddenTerminationEv"]
            pub fn ProcessInfo_disableSuddenTermination(this: *mut root::NS::ProcessInfo);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo23enableSuddenTerminationEv"]
            pub fn ProcessInfo_enableSuddenTermination(this: *mut root::NS::ProcessInfo);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo27disableAutomaticTerminationEPKNS_6StringE"]
            pub fn ProcessInfo_disableAutomaticTermination(
                this: *mut root::NS::ProcessInfo,
                pReason: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo26enableAutomaticTerminationEPKNS_6StringE"]
            pub fn ProcessInfo_enableAutomaticTermination(
                this: *mut root::NS::ProcessInfo,
                pReason: *const root::NS::String,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo34automaticTerminationSupportEnabledEv"]
            pub fn ProcessInfo_automaticTerminationSupportEnabled(
                this: *const root::NS::ProcessInfo,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo37setAutomaticTerminationSupportEnabledEb"]
            pub fn ProcessInfo_setAutomaticTerminationSupportEnabled(
                this: *mut root::NS::ProcessInfo,
                enabled: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo13beginActivityEyPKNS_6StringE"]
            pub fn ProcessInfo_beginActivity(
                this: *mut root::NS::ProcessInfo,
                options: root::NS::ActivityOptions,
                pReason: *const root::NS::String,
            ) -> *mut root::NS::Object;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo11endActivityEPNS_6ObjectE"]
            pub fn ProcessInfo_endActivity(
                this: *mut root::NS::ProcessInfo,
                pActivity: *mut root::NS::Object,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo15performActivityEyPKNS_6StringEU13block_pointerFvvE"]
            pub fn ProcessInfo_performActivity(
                this: *mut root::NS::ProcessInfo,
                options: root::NS::ActivityOptions,
                pReason: *const root::NS::String,
                block: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo15performActivityEyPKNS_6StringERKNSt3__18functionIFvvEEE"]
            pub fn ProcessInfo_performActivity1(
                this: *mut root::NS::ProcessInfo,
                options: root::NS::ActivityOptions,
                pReason: *const root::NS::String,
                func: *const [u64; 4usize],
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo23performExpiringActivityEPKNS_6StringEU13block_pointerFvbE"]
            pub fn ProcessInfo_performExpiringActivity(
                this: *mut root::NS::ProcessInfo,
                pReason: *const root::NS::String,
                block: *mut ::std::os::raw::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11ProcessInfo23performExpiringActivityEPKNS_6StringERKNSt3__18functionIFvbEEE"]
            pub fn ProcessInfo_performExpiringActivity1(
                this: *mut root::NS::ProcessInfo,
                pReason: *const root::NS::String,
                func: *const [u64; 4usize],
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo12thermalStateEv"]
            pub fn ProcessInfo_thermalState(
                this: *const root::NS::ProcessInfo,
            ) -> root::NS::ProcessInfoThermalState;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo21isLowPowerModeEnabledEv"]
            pub fn ProcessInfo_isLowPowerModeEnabled(this: *const root::NS::ProcessInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo13isiOSAppOnMacEv"]
            pub fn ProcessInfo_isiOSAppOnMac(this: *const root::NS::ProcessInfo) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11ProcessInfo16isMacCatalystAppEv"]
            pub fn ProcessInfo_isMacCatalystApp(this: *const root::NS::ProcessInfo) -> bool;
        }
        impl ProcessInfo {
            #[inline]
            pub unsafe fn processInfo() -> *mut root::NS::ProcessInfo {
                ProcessInfo_processInfo()
            }
            #[inline]
            pub unsafe fn arguments(&self) -> *mut root::NS::Array {
                ProcessInfo_arguments(self)
            }
            #[inline]
            pub unsafe fn environment(&self) -> *mut root::NS::Dictionary {
                ProcessInfo_environment(self)
            }
            #[inline]
            pub unsafe fn hostName(&self) -> *mut root::NS::String {
                ProcessInfo_hostName(self)
            }
            #[inline]
            pub unsafe fn processName(&self) -> *mut root::NS::String {
                ProcessInfo_processName(self)
            }
            #[inline]
            pub unsafe fn setProcessName(&mut self, pString: *const root::NS::String) {
                ProcessInfo_setProcessName(self, pString)
            }
            #[inline]
            pub unsafe fn processIdentifier(&self) -> ::std::os::raw::c_int {
                ProcessInfo_processIdentifier(self)
            }
            #[inline]
            pub unsafe fn globallyUniqueString(&self) -> *mut root::NS::String {
                ProcessInfo_globallyUniqueString(self)
            }
            #[inline]
            pub unsafe fn userName(&self) -> *mut root::NS::String {
                ProcessInfo_userName(self)
            }
            #[inline]
            pub unsafe fn fullUserName(&self) -> *mut root::NS::String {
                ProcessInfo_fullUserName(self)
            }
            #[inline]
            pub unsafe fn operatingSystem(&self) -> root::NS::UInteger {
                ProcessInfo_operatingSystem(self)
            }
            #[inline]
            pub unsafe fn operatingSystemVersion(&self) -> root::NS::OperatingSystemVersion {
                ProcessInfo_operatingSystemVersion(self)
            }
            #[inline]
            pub unsafe fn operatingSystemVersionString(&self) -> *mut root::NS::String {
                ProcessInfo_operatingSystemVersionString(self)
            }
            #[inline]
            pub unsafe fn isOperatingSystemAtLeastVersion(
                &self,
                version: root::NS::OperatingSystemVersion,
            ) -> bool {
                ProcessInfo_isOperatingSystemAtLeastVersion(self, version)
            }
            #[inline]
            pub unsafe fn processorCount(&self) -> root::NS::UInteger {
                ProcessInfo_processorCount(self)
            }
            #[inline]
            pub unsafe fn activeProcessorCount(&self) -> root::NS::UInteger {
                ProcessInfo_activeProcessorCount(self)
            }
            #[inline]
            pub unsafe fn physicalMemory(&self) -> ::std::os::raw::c_ulonglong {
                ProcessInfo_physicalMemory(self)
            }
            #[inline]
            pub unsafe fn systemUptime(&self) -> root::NS::TimeInterval {
                ProcessInfo_systemUptime(self)
            }
            #[inline]
            pub unsafe fn disableSuddenTermination(&mut self) {
                ProcessInfo_disableSuddenTermination(self)
            }
            #[inline]
            pub unsafe fn enableSuddenTermination(&mut self) {
                ProcessInfo_enableSuddenTermination(self)
            }
            #[inline]
            pub unsafe fn disableAutomaticTermination(&mut self, pReason: *const root::NS::String) {
                ProcessInfo_disableAutomaticTermination(self, pReason)
            }
            #[inline]
            pub unsafe fn enableAutomaticTermination(&mut self, pReason: *const root::NS::String) {
                ProcessInfo_enableAutomaticTermination(self, pReason)
            }
            #[inline]
            pub unsafe fn automaticTerminationSupportEnabled(&self) -> bool {
                ProcessInfo_automaticTerminationSupportEnabled(self)
            }
            #[inline]
            pub unsafe fn setAutomaticTerminationSupportEnabled(&mut self, enabled: bool) {
                ProcessInfo_setAutomaticTerminationSupportEnabled(self, enabled)
            }
            #[inline]
            pub unsafe fn beginActivity(
                &mut self,
                options: root::NS::ActivityOptions,
                pReason: *const root::NS::String,
            ) -> *mut root::NS::Object {
                ProcessInfo_beginActivity(self, options, pReason)
            }
            #[inline]
            pub unsafe fn endActivity(&mut self, pActivity: *mut root::NS::Object) {
                ProcessInfo_endActivity(self, pActivity)
            }
            #[inline]
            pub unsafe fn performActivity(
                &mut self,
                options: root::NS::ActivityOptions,
                pReason: *const root::NS::String,
                block: *mut ::std::os::raw::c_void,
            ) {
                ProcessInfo_performActivity(self, options, pReason, block)
            }
            #[inline]
            pub unsafe fn performActivity1(
                &mut self,
                options: root::NS::ActivityOptions,
                pReason: *const root::NS::String,
                func: *const [u64; 4usize],
            ) {
                ProcessInfo_performActivity1(self, options, pReason, func)
            }
            #[inline]
            pub unsafe fn performExpiringActivity(
                &mut self,
                pReason: *const root::NS::String,
                block: *mut ::std::os::raw::c_void,
            ) {
                ProcessInfo_performExpiringActivity(self, pReason, block)
            }
            #[inline]
            pub unsafe fn performExpiringActivity1(
                &mut self,
                pReason: *const root::NS::String,
                func: *const [u64; 4usize],
            ) {
                ProcessInfo_performExpiringActivity1(self, pReason, func)
            }
            #[inline]
            pub unsafe fn thermalState(&self) -> root::NS::ProcessInfoThermalState {
                ProcessInfo_thermalState(self)
            }
            #[inline]
            pub unsafe fn isLowPowerModeEnabled(&self) -> bool {
                ProcessInfo_isLowPowerModeEnabled(self)
            }
            #[inline]
            pub unsafe fn isiOSAppOnMac(&self) -> bool {
                ProcessInfo_isiOSAppOnMac(self)
            }
            #[inline]
            pub unsafe fn isMacCatalystApp(&self) -> bool {
                ProcessInfo_isMacCatalystApp(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct URL {
            pub _base: root::NS::Copying<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS3URL15fileURLWithPathEPKNS_6StringE"]
            pub fn URL_fileURLWithPath(pPath: *const root::NS::String) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS3URL5allocEv"]
            pub fn URL_alloc() -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS3URL4initEv"]
            pub fn URL_init(this: *mut root::NS::URL) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS3URL4initEPKNS_6StringE"]
            pub fn URL_init1(
                this: *mut root::NS::URL,
                pString: *const root::NS::String,
            ) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS3URL19initFileURLWithPathEPKNS_6StringE"]
            pub fn URL_initFileURLWithPath(
                this: *mut root::NS::URL,
                pPath: *const root::NS::String,
            ) -> *mut root::NS::URL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS3URL24fileSystemRepresentationEv"]
            pub fn URL_fileSystemRepresentation(
                this: *const root::NS::URL,
            ) -> *const ::std::os::raw::c_char;
        }
        impl URL {
            #[inline]
            pub unsafe fn fileURLWithPath(pPath: *const root::NS::String) -> *mut root::NS::URL {
                URL_fileURLWithPath(pPath)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::URL {
                URL_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::URL {
                URL_init(self)
            }
            #[inline]
            pub unsafe fn init1(&mut self, pString: *const root::NS::String) -> *mut root::NS::URL {
                URL_init1(self, pString)
            }
            #[inline]
            pub unsafe fn initFileURLWithPath(
                &mut self,
                pPath: *const root::NS::String,
            ) -> *mut root::NS::URL {
                URL_initFileURLWithPath(self, pPath)
            }
            #[inline]
            pub unsafe fn fileSystemRepresentation(&self) -> *const ::std::os::raw::c_char {
                URL_fileSystemRepresentation(self)
            }
        }
        pub type WindowStyleMask = root::NS::UInteger;
        pub const NS_WindowStyleMaskBorderless: root::NS::WindowStyleMask = 0;
        pub const NS_WindowStyleMaskTitled: root::NS::WindowStyleMask = 1;
        pub const NS_WindowStyleMaskClosable: root::NS::WindowStyleMask = 2;
        pub const NS_WindowStyleMaskMiniaturizable: root::NS::WindowStyleMask = 4;
        pub const NS_WindowStyleMaskResizable: root::NS::WindowStyleMask = 8;
        pub const NS_WindowStyleMaskTexturedBackground: root::NS::WindowStyleMask = 256;
        pub const NS_WindowStyleMaskUnifiedTitleAndToolbar: root::NS::WindowStyleMask = 4096;
        pub const NS_WindowStyleMaskFullScreen: root::NS::WindowStyleMask = 16384;
        pub const NS_WindowStyleMaskFullSizeContentView: root::NS::WindowStyleMask = 32768;
        pub const NS_WindowStyleMaskUtilityWindow: root::NS::WindowStyleMask = 16;
        pub const NS_WindowStyleMaskDocModalWindow: root::NS::WindowStyleMask = 64;
        pub const NS_WindowStyleMaskNonactivatingPanel: root::NS::WindowStyleMask = 128;
        pub const NS_WindowStyleMaskHUDWindow: root::NS::WindowStyleMask = 8192;
        pub type _bindgen_ty_3 = root::NS::WindowStyleMask;
        pub const BackingStoreType_BackingStoreRetained: root::NS::BackingStoreType = 0;
        pub const BackingStoreType_BackingStoreNonretained: root::NS::BackingStoreType = 1;
        pub const BackingStoreType_BackingStoreBuffered: root::NS::BackingStoreType = 2;
        pub type BackingStoreType = root::NS::UInteger;
        pub const ActivationPolicy_ActivationPolicyRegular: root::NS::ActivationPolicy = 0;
        pub const ActivationPolicy_ActivationPolicyAccessory: root::NS::ActivationPolicy = 1;
        pub const ActivationPolicy_ActivationPolicyProhibited: root::NS::ActivationPolicy = 2;
        pub type ActivationPolicy = root::NS::UInteger;
        #[repr(C)]
        pub struct ApplicationDelegate__bindgen_vtable {}
        #[repr(C)]
        #[derive(Debug)]
        pub struct ApplicationDelegate {
            pub vtable_: *const ApplicationDelegate__bindgen_vtable,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Application {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11Application17sharedApplicationEv"]
            pub fn Application_sharedApplication() -> *mut root::NS::Application;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11Application11setDelegateEPKNS_19ApplicationDelegateE"]
            pub fn Application_setDelegate(
                this: *mut root::NS::Application,
                pDelegate: *const root::NS::ApplicationDelegate,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11Application19setActivationPolicyENS_16ActivationPolicyE"]
            pub fn Application_setActivationPolicy(
                this: *mut root::NS::Application,
                activationPolicy: root::NS::ActivationPolicy,
            ) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11Application25activateIgnoringOtherAppsEb"]
            pub fn Application_activateIgnoringOtherApps(
                this: *mut root::NS::Application,
                ignoreOtherApps: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11Application11setMainMenuEPKNS_4MenuE"]
            pub fn Application_setMainMenu(
                this: *mut root::NS::Application,
                pMenu: *const root::NS::Menu,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS11Application7windowsEv"]
            pub fn Application_windows(this: *const root::NS::Application) -> *mut root::NS::Array;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11Application3runEv"]
            pub fn Application_run(this: *mut root::NS::Application);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS11Application9terminateEPKNS_6ObjectE"]
            pub fn Application_terminate(
                this: *mut root::NS::Application,
                pSender: *const root::NS::Object,
            );
        }
        impl Application {
            #[inline]
            pub unsafe fn sharedApplication() -> *mut root::NS::Application {
                Application_sharedApplication()
            }
            #[inline]
            pub unsafe fn setDelegate(&mut self, pDelegate: *const root::NS::ApplicationDelegate) {
                Application_setDelegate(self, pDelegate)
            }
            #[inline]
            pub unsafe fn setActivationPolicy(
                &mut self,
                activationPolicy: root::NS::ActivationPolicy,
            ) -> bool {
                Application_setActivationPolicy(self, activationPolicy)
            }
            #[inline]
            pub unsafe fn activateIgnoringOtherApps(&mut self, ignoreOtherApps: bool) {
                Application_activateIgnoringOtherApps(self, ignoreOtherApps)
            }
            #[inline]
            pub unsafe fn setMainMenu(&mut self, pMenu: *const root::NS::Menu) {
                Application_setMainMenu(self, pMenu)
            }
            #[inline]
            pub unsafe fn windows(&self) -> *mut root::NS::Array {
                Application_windows(self)
            }
            #[inline]
            pub unsafe fn run(&mut self) {
                Application_run(self)
            }
            #[inline]
            pub unsafe fn terminate(&mut self, pSender: *const root::NS::Object) {
                Application_terminate(self, pSender)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct RunningApplication {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS18RunningApplication18currentApplicationEv"]
            pub fn RunningApplication_currentApplication() -> *mut root::NS::RunningApplication;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS18RunningApplication13localizedNameEv"]
            pub fn RunningApplication_localizedName(
                this: *const root::NS::RunningApplication,
            ) -> *mut root::NS::String;
        }
        impl RunningApplication {
            #[inline]
            pub unsafe fn currentApplication() -> *mut root::NS::RunningApplication {
                RunningApplication_currentApplication()
            }
            #[inline]
            pub unsafe fn localizedName(&self) -> *mut root::NS::String {
                RunningApplication_localizedName(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct View {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS4View4initE6CGRect"]
            pub fn View_init(this: *mut root::NS::View, frame: root::CGRect)
                -> *mut root::NS::View;
        }
        impl View {
            #[inline]
            pub unsafe fn init(&mut self, frame: root::CGRect) -> *mut root::NS::View {
                View_init(self, frame)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Window {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Window5allocEv"]
            pub fn Window_alloc() -> *mut root::NS::Window;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Window4initE6CGRectmNS_16BackingStoreTypeEb"]
            pub fn Window_init(
                this: *mut root::NS::Window,
                contentRect: root::CGRect,
                styleMask: root::NS::WindowStyleMask,
                backing: root::NS::BackingStoreType,
                defer: bool,
            ) -> *mut root::NS::Window;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Window14setContentViewEPKNS_4ViewE"]
            pub fn Window_setContentView(
                this: *mut root::NS::Window,
                pContentView: *const root::NS::View,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Window20makeKeyAndOrderFrontEPKNS_6ObjectE"]
            pub fn Window_makeKeyAndOrderFront(
                this: *mut root::NS::Window,
                pSender: *const root::NS::Object,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Window8setTitleEPKNS_6StringE"]
            pub fn Window_setTitle(this: *mut root::NS::Window, pTitle: *const root::NS::String);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS6Window5closeEv"]
            pub fn Window_close(this: *mut root::NS::Window);
        }
        impl Window {
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Window {
                Window_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
                contentRect: root::CGRect,
                styleMask: root::NS::WindowStyleMask,
                backing: root::NS::BackingStoreType,
                defer: bool,
            ) -> *mut root::NS::Window {
                Window_init(self, contentRect, styleMask, backing, defer)
            }
            #[inline]
            pub unsafe fn setContentView(&mut self, pContentView: *const root::NS::View) {
                Window_setContentView(self, pContentView)
            }
            #[inline]
            pub unsafe fn makeKeyAndOrderFront(&mut self, pSender: *const root::NS::Object) {
                Window_makeKeyAndOrderFront(self, pSender)
            }
            #[inline]
            pub unsafe fn setTitle(&mut self, pTitle: *const root::NS::String) {
                Window_setTitle(self, pTitle)
            }
            #[inline]
            pub unsafe fn close(&mut self) {
                Window_close(self)
            }
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct Menu {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS4Menu5allocEv"]
            pub fn Menu_alloc() -> *mut root::NS::Menu;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS4Menu4initEv"]
            pub fn Menu_init(this: *mut root::NS::Menu) -> *mut root::NS::Menu;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS4Menu4initEPKNS_6StringE"]
            pub fn Menu_init1(
                this: *mut root::NS::Menu,
                pTitle: *const root::NS::String,
            ) -> *mut root::NS::Menu;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS4Menu7addItemEPKNS_6StringEP13objc_selectorS3_"]
            pub fn Menu_addItem(
                this: *mut root::NS::Menu,
                pTitle: *const root::NS::String,
                pSelector: root::SEL,
                pKeyEquivalent: *const root::NS::String,
            ) -> *mut root::NS::MenuItem;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS4Menu7addItemEPKNS_8MenuItemE"]
            pub fn Menu_addItem1(this: *mut root::NS::Menu, pItem: *const root::NS::MenuItem);
        }
        impl Menu {
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::Menu {
                Menu_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::Menu {
                Menu_init(self)
            }
            #[inline]
            pub unsafe fn init1(&mut self, pTitle: *const root::NS::String) -> *mut root::NS::Menu {
                Menu_init1(self, pTitle)
            }
            #[inline]
            pub unsafe fn addItem(
                &mut self,
                pTitle: *const root::NS::String,
                pSelector: root::SEL,
                pKeyEquivalent: *const root::NS::String,
            ) -> *mut root::NS::MenuItem {
                Menu_addItem(self, pTitle, pSelector, pKeyEquivalent)
            }
            #[inline]
            pub unsafe fn addItem1(&mut self, pItem: *const root::NS::MenuItem) {
                Menu_addItem1(self, pItem)
            }
        }
        pub type KeyEquivalentModifierMask = root::NS::UInteger;
        pub const NS_EventModifierFlagCapsLock: root::NS::KeyEquivalentModifierMask = 65536;
        pub const NS_EventModifierFlagShift: root::NS::KeyEquivalentModifierMask = 131072;
        pub const NS_EventModifierFlagControl: root::NS::KeyEquivalentModifierMask = 262144;
        pub const NS_EventModifierFlagOption: root::NS::KeyEquivalentModifierMask = 524288;
        pub const NS_EventModifierFlagCommand: root::NS::KeyEquivalentModifierMask = 1048576;
        pub const NS_EventModifierFlagNumericPad: root::NS::KeyEquivalentModifierMask = 2097152;
        pub const NS_EventModifierFlagHelp: root::NS::KeyEquivalentModifierMask = 4194304;
        pub const NS_EventModifierFlagFunction: root::NS::KeyEquivalentModifierMask = 8388608;
        pub const NS_EventModifierFlagDeviceIndependentFlagsMask:
            root::NS::KeyEquivalentModifierMask = 4294901760;
        pub type _bindgen_ty_4 = root::NS::KeyEquivalentModifierMask;
        pub type MenuItemCallback = ::std::option::Option<
            unsafe extern "C" fn(
                unused: *mut ::std::os::raw::c_void,
                name: root::SEL,
                pSender: *const root::NS::Object,
            ),
        >;
        #[repr(C)]
        #[derive(Debug)]
        pub struct MenuItem {
            pub _base: root::NS::Referencing<root::NS::Object>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS8MenuItem22registerActionCallbackEPKcPFvPvP13objc_selectorPKNS_6ObjectEE"]
            pub fn MenuItem_registerActionCallback(
                name: *const ::std::os::raw::c_char,
                callback: root::NS::MenuItemCallback,
            ) -> root::SEL;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS8MenuItem5allocEv"]
            pub fn MenuItem_alloc() -> *mut root::NS::MenuItem;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS8MenuItem4initEv"]
            pub fn MenuItem_init(this: *mut root::NS::MenuItem) -> *mut root::NS::MenuItem;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS8MenuItem28setKeyEquivalentModifierMaskEm"]
            pub fn MenuItem_setKeyEquivalentModifierMask(
                this: *mut root::NS::MenuItem,
                modifierMask: root::NS::KeyEquivalentModifierMask,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2NS8MenuItem25KeyEquivalentModifierMaskEv"]
            pub fn MenuItem_KeyEquivalentModifierMask(
                this: *const root::NS::MenuItem,
            ) -> root::NS::KeyEquivalentModifierMask;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN2NS8MenuItem10setSubmenuEPKNS_4MenuE"]
            pub fn MenuItem_setSubmenu(
                this: *mut root::NS::MenuItem,
                pSubmenu: *const root::NS::Menu,
            );
        }
        impl MenuItem {
            #[inline]
            pub unsafe fn registerActionCallback(
                name: *const ::std::os::raw::c_char,
                callback: root::NS::MenuItemCallback,
            ) -> root::SEL {
                MenuItem_registerActionCallback(name, callback)
            }
            #[inline]
            pub unsafe fn alloc() -> *mut root::NS::MenuItem {
                MenuItem_alloc()
            }
            #[inline]
            pub unsafe fn init(&mut self) -> *mut root::NS::MenuItem {
                MenuItem_init(self)
            }
            #[inline]
            pub unsafe fn setKeyEquivalentModifierMask(
                &mut self,
                modifierMask: root::NS::KeyEquivalentModifierMask,
            ) {
                MenuItem_setKeyEquivalentModifierMask(self, modifierMask)
            }
            #[inline]
            pub unsafe fn KeyEquivalentModifierMask(&self) -> root::NS::KeyEquivalentModifierMask {
                MenuItem_KeyEquivalentModifierMask(self)
            }
            #[inline]
            pub unsafe fn setSubmenu(&mut self, pSubmenu: *const root::NS::Menu) {
                MenuItem_setSubmenu(self, pSubmenu)
            }
        }
    }
    pub type CFTimeInterval = f64;
    #[repr(C)]
    #[derive(Debug)]
    pub struct dispatch_object_s {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct dispatch_queue_s {
        pub _address: u8,
    }
    pub type dispatch_queue_t = *mut root::dispatch_queue_s;
    #[repr(C)]
    #[derive(Debug)]
    pub struct dispatch_data_s {
        pub _address: u8,
    }
    pub type dispatch_data_t = *mut root::dispatch_data_s;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __IOSurface {
        _unused: [u8; 0],
    }
    pub type IOSurfaceRef = *mut root::__IOSurface;
    pub type CGFloat = f64;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CGPoint {
        pub x: root::CGFloat,
        pub y: root::CGFloat,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CGSize {
        pub width: root::CGFloat,
        pub height: root::CGFloat,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CGRect {
        pub origin: root::CGPoint,
        pub size: root::CGSize,
    }
    pub mod MTK {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod Private {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        #[repr(C)]
        pub struct ViewDelegate__bindgen_vtable {}
        #[repr(C)]
        #[derive(Debug)]
        pub struct ViewDelegate {
            pub vtable_: *const ViewDelegate__bindgen_vtable,
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct View {
            pub _base: root::NS::Referencing<root::NS::View>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View5allocEv"]
            pub fn View_alloc() -> *mut root::MTK::View;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View4initE6CGRectPKN3MTL6DeviceE"]
            pub fn View_init(
                this: *mut root::MTK::View,
                frame: root::CGRect,
                pDevice: *const root::MTL::Device,
            ) -> *mut root::MTK::View;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View4initEPN2NS5CoderE"]
            pub fn View_init1(
                this: *mut root::MTK::View,
                pCoder: *mut root::Coder,
            ) -> *mut root::MTK::View;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View9setDeviceEPKN3MTL6DeviceE"]
            pub fn View_setDevice(this: *mut root::MTK::View, pDevice: *const root::MTL::Device);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View6deviceEv"]
            pub fn View_device(this: *const root::MTK::View) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View11setDelegateEPKNS_12ViewDelegateE"]
            pub fn View_setDelegate(
                this: *mut root::MTK::View,
                pDelegate: *const root::MTK::ViewDelegate,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View8delegateEv"]
            pub fn View_delegate(this: *const root::MTK::View) -> *mut root::MTK::ViewDelegate;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View15currentDrawableEv"]
            pub fn View_currentDrawable(
                this: *const root::MTK::View,
            ) -> *mut root::CA::MetalDrawable;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View18setFramebufferOnlyEb"]
            pub fn View_setFramebufferOnly(this: *mut root::MTK::View, framebufferOnly: bool);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View15framebufferOnlyEv"]
            pub fn View_framebufferOnly(this: *const root::MTK::View) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View37setDepthStencilAttachmentTextureUsageEm"]
            pub fn View_setDepthStencilAttachmentTextureUsage(
                this: *mut root::MTK::View,
                textureUsage: root::MTL::TextureUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View34depthStencilAttachmentTextureUsageEv"]
            pub fn View_depthStencilAttachmentTextureUsage(
                this: *const root::MTK::View,
            ) -> root::MTL::TextureUsage;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View41setMultisampleColorAttachmentTextureUsageEm"]
            pub fn View_setMultisampleColorAttachmentTextureUsage(
                this: *mut root::MTK::View,
                textureUsage: root::MTL::TextureUsage,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View38multisampleColorAttachmentTextureUsageEv"]
            pub fn View_multisampleColorAttachmentTextureUsage(
                this: *const root::MTK::View,
            ) -> root::MTL::TextureUsage;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View26setPresentsWithTransactionEb"]
            pub fn View_setPresentsWithTransaction(
                this: *mut root::MTK::View,
                presentsWithTransaction: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View23presentsWithTransactionEv"]
            pub fn View_presentsWithTransaction(this: *const root::MTK::View) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View19setColorPixelFormatEN3MTL11PixelFormatE"]
            pub fn View_setColorPixelFormat(
                this: *mut root::MTK::View,
                colorPixelFormat: root::MTL::PixelFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View16colorPixelFormatEv"]
            pub fn View_colorPixelFormat(this: *const root::MTK::View) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View26setDepthStencilPixelFormatEN3MTL11PixelFormatE"]
            pub fn View_setDepthStencilPixelFormat(
                this: *mut root::MTK::View,
                colorPixelFormat: root::MTL::PixelFormat,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View23depthStencilPixelFormatEv"]
            pub fn View_depthStencilPixelFormat(
                this: *const root::MTK::View,
            ) -> root::MTL::PixelFormat;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View14setSampleCountEm"]
            pub fn View_setSampleCount(this: *mut root::MTK::View, sampleCount: root::NS::UInteger);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View11sampleCountEv"]
            pub fn View_sampleCount(this: *const root::MTK::View) -> root::NS::UInteger;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View13setClearColorEN3MTL10ClearColorE"]
            pub fn View_setClearColor(
                this: *mut root::MTK::View,
                clearColor: root::MTL::ClearColor,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View10clearColorEv"]
            pub fn View_clearColor(this: *const root::MTK::View) -> root::MTL::ClearColor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View13setClearDepthEd"]
            pub fn View_setClearDepth(this: *mut root::MTK::View, clearDepth: f64);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View10clearDepthEv"]
            pub fn View_clearDepth(this: *const root::MTK::View) -> f64;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View15setClearStencilEj"]
            pub fn View_setClearStencil(this: *mut root::MTK::View, clearStencil: u32);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View12clearStencilEv"]
            pub fn View_clearStencil(this: *const root::MTK::View) -> u32;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View19depthStencilTextureEv"]
            pub fn View_depthStencilTexture(
                this: *const root::MTK::View,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View23multisampleColorTextureEv"]
            pub fn View_multisampleColorTexture(
                this: *const root::MTK::View,
            ) -> *mut root::MTL::Texture;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View16releaseDrawablesEv"]
            pub fn View_releaseDrawables(this: *const root::MTK::View);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View27currentRenderPassDescriptorEv"]
            pub fn View_currentRenderPassDescriptor(
                this: *const root::MTK::View,
            ) -> *mut root::MTL::RenderPassDescriptor;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View27setPreferredFramesPerSecondEl"]
            pub fn View_setPreferredFramesPerSecond(
                this: *mut root::MTK::View,
                preferredFramesPerSecond: root::NS::Integer,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View24preferredFramesPerSecondEv"]
            pub fn View_preferredFramesPerSecond(this: *const root::MTK::View)
                -> root::NS::Integer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View24setEnableSetNeedsDisplayEb"]
            pub fn View_setEnableSetNeedsDisplay(
                this: *mut root::MTK::View,
                enableSetNeedsDisplay: bool,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View21enableSetNeedsDisplayEv"]
            pub fn View_enableSetNeedsDisplay(this: *const root::MTK::View) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View21setAutoresizeDrawableEb"]
            pub fn View_setAutoresizeDrawable(this: *mut root::MTK::View, autoresizeDrawable: bool);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View18autoresizeDrawableEv"]
            pub fn View_autoresizeDrawable(this: *mut root::MTK::View) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View15setDrawableSizeE6CGSize"]
            pub fn View_setDrawableSize(this: *mut root::MTK::View, drawableSize: root::CGSize);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View12drawableSizeEv"]
            pub fn View_drawableSize(this: *const root::MTK::View) -> root::CGSize;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View21preferredDrawableSizeEv"]
            pub fn View_preferredDrawableSize(this: *const root::MTK::View) -> root::CGSize;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View15preferredDeviceEv"]
            pub fn View_preferredDevice(this: *const root::MTK::View) -> *mut root::MTL::Device;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View9setPausedEb"]
            pub fn View_setPaused(this: *mut root::MTK::View, paused: bool);
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View8isPausedEv"]
            pub fn View_isPaused(this: *const root::MTK::View) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View13setColorSpaceEP12CGColorSpace"]
            pub fn View_setColorSpace(
                this: *mut root::MTK::View,
                colorSpace: root::CGColorSpaceRef,
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK3MTK4View10colorSpaceEv"]
            pub fn View_colorSpace(this: *const root::MTK::View) -> root::CGColorSpaceRef;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN3MTK4View4drawEv"]
            pub fn View_draw(this: *mut root::MTK::View);
        }
        impl View {
            #[inline]
            pub unsafe fn alloc() -> *mut root::MTK::View {
                View_alloc()
            }
            #[inline]
            pub unsafe fn init(
                &mut self,
                frame: root::CGRect,
                pDevice: *const root::MTL::Device,
            ) -> *mut root::MTK::View {
                View_init(self, frame, pDevice)
            }
            #[inline]
            pub unsafe fn init1(&mut self, pCoder: *mut root::Coder) -> *mut root::MTK::View {
                View_init1(self, pCoder)
            }
            #[inline]
            pub unsafe fn setDevice(&mut self, pDevice: *const root::MTL::Device) {
                View_setDevice(self, pDevice)
            }
            #[inline]
            pub unsafe fn device(&self) -> *mut root::MTL::Device {
                View_device(self)
            }
            #[inline]
            pub unsafe fn setDelegate(&mut self, pDelegate: *const root::MTK::ViewDelegate) {
                View_setDelegate(self, pDelegate)
            }
            #[inline]
            pub unsafe fn delegate(&self) -> *mut root::MTK::ViewDelegate {
                View_delegate(self)
            }
            #[inline]
            pub unsafe fn currentDrawable(&self) -> *mut root::CA::MetalDrawable {
                View_currentDrawable(self)
            }
            #[inline]
            pub unsafe fn setFramebufferOnly(&mut self, framebufferOnly: bool) {
                View_setFramebufferOnly(self, framebufferOnly)
            }
            #[inline]
            pub unsafe fn framebufferOnly(&self) -> bool {
                View_framebufferOnly(self)
            }
            #[inline]
            pub unsafe fn setDepthStencilAttachmentTextureUsage(
                &mut self,
                textureUsage: root::MTL::TextureUsage,
            ) {
                View_setDepthStencilAttachmentTextureUsage(self, textureUsage)
            }
            #[inline]
            pub unsafe fn depthStencilAttachmentTextureUsage(&self) -> root::MTL::TextureUsage {
                View_depthStencilAttachmentTextureUsage(self)
            }
            #[inline]
            pub unsafe fn setMultisampleColorAttachmentTextureUsage(
                &mut self,
                textureUsage: root::MTL::TextureUsage,
            ) {
                View_setMultisampleColorAttachmentTextureUsage(self, textureUsage)
            }
            #[inline]
            pub unsafe fn multisampleColorAttachmentTextureUsage(&self) -> root::MTL::TextureUsage {
                View_multisampleColorAttachmentTextureUsage(self)
            }
            #[inline]
            pub unsafe fn setPresentsWithTransaction(&mut self, presentsWithTransaction: bool) {
                View_setPresentsWithTransaction(self, presentsWithTransaction)
            }
            #[inline]
            pub unsafe fn presentsWithTransaction(&self) -> bool {
                View_presentsWithTransaction(self)
            }
            #[inline]
            pub unsafe fn setColorPixelFormat(&mut self, colorPixelFormat: root::MTL::PixelFormat) {
                View_setColorPixelFormat(self, colorPixelFormat)
            }
            #[inline]
            pub unsafe fn colorPixelFormat(&self) -> root::MTL::PixelFormat {
                View_colorPixelFormat(self)
            }
            #[inline]
            pub unsafe fn setDepthStencilPixelFormat(
                &mut self,
                colorPixelFormat: root::MTL::PixelFormat,
            ) {
                View_setDepthStencilPixelFormat(self, colorPixelFormat)
            }
            #[inline]
            pub unsafe fn depthStencilPixelFormat(&self) -> root::MTL::PixelFormat {
                View_depthStencilPixelFormat(self)
            }
            #[inline]
            pub unsafe fn setSampleCount(&mut self, sampleCount: root::NS::UInteger) {
                View_setSampleCount(self, sampleCount)
            }
            #[inline]
            pub unsafe fn sampleCount(&self) -> root::NS::UInteger {
                View_sampleCount(self)
            }
            #[inline]
            pub unsafe fn setClearColor(&mut self, clearColor: root::MTL::ClearColor) {
                View_setClearColor(self, clearColor)
            }
            #[inline]
            pub unsafe fn clearColor(&self) -> root::MTL::ClearColor {
                View_clearColor(self)
            }
            #[inline]
            pub unsafe fn setClearDepth(&mut self, clearDepth: f64) {
                View_setClearDepth(self, clearDepth)
            }
            #[inline]
            pub unsafe fn clearDepth(&self) -> f64 {
                View_clearDepth(self)
            }
            #[inline]
            pub unsafe fn setClearStencil(&mut self, clearStencil: u32) {
                View_setClearStencil(self, clearStencil)
            }
            #[inline]
            pub unsafe fn clearStencil(&self) -> u32 {
                View_clearStencil(self)
            }
            #[inline]
            pub unsafe fn depthStencilTexture(&self) -> *mut root::MTL::Texture {
                View_depthStencilTexture(self)
            }
            #[inline]
            pub unsafe fn multisampleColorTexture(&self) -> *mut root::MTL::Texture {
                View_multisampleColorTexture(self)
            }
            #[inline]
            pub unsafe fn releaseDrawables(&self) {
                View_releaseDrawables(self)
            }
            #[inline]
            pub unsafe fn currentRenderPassDescriptor(
                &self,
            ) -> *mut root::MTL::RenderPassDescriptor {
                View_currentRenderPassDescriptor(self)
            }
            #[inline]
            pub unsafe fn setPreferredFramesPerSecond(
                &mut self,
                preferredFramesPerSecond: root::NS::Integer,
            ) {
                View_setPreferredFramesPerSecond(self, preferredFramesPerSecond)
            }
            #[inline]
            pub unsafe fn preferredFramesPerSecond(&self) -> root::NS::Integer {
                View_preferredFramesPerSecond(self)
            }
            #[inline]
            pub unsafe fn setEnableSetNeedsDisplay(&mut self, enableSetNeedsDisplay: bool) {
                View_setEnableSetNeedsDisplay(self, enableSetNeedsDisplay)
            }
            #[inline]
            pub unsafe fn enableSetNeedsDisplay(&self) -> bool {
                View_enableSetNeedsDisplay(self)
            }
            #[inline]
            pub unsafe fn setAutoresizeDrawable(&mut self, autoresizeDrawable: bool) {
                View_setAutoresizeDrawable(self, autoresizeDrawable)
            }
            #[inline]
            pub unsafe fn autoresizeDrawable(&mut self) -> bool {
                View_autoresizeDrawable(self)
            }
            #[inline]
            pub unsafe fn setDrawableSize(&mut self, drawableSize: root::CGSize) {
                View_setDrawableSize(self, drawableSize)
            }
            #[inline]
            pub unsafe fn drawableSize(&self) -> root::CGSize {
                View_drawableSize(self)
            }
            #[inline]
            pub unsafe fn preferredDrawableSize(&self) -> root::CGSize {
                View_preferredDrawableSize(self)
            }
            #[inline]
            pub unsafe fn preferredDevice(&self) -> *mut root::MTL::Device {
                View_preferredDevice(self)
            }
            #[inline]
            pub unsafe fn setPaused(&mut self, paused: bool) {
                View_setPaused(self, paused)
            }
            #[inline]
            pub unsafe fn isPaused(&self) -> bool {
                View_isPaused(self)
            }
            #[inline]
            pub unsafe fn setColorSpace(&mut self, colorSpace: root::CGColorSpaceRef) {
                View_setColorSpace(self, colorSpace)
            }
            #[inline]
            pub unsafe fn colorSpace(&self) -> root::CGColorSpaceRef {
                View_colorSpace(self)
            }
            #[inline]
            pub unsafe fn draw(&mut self) {
                View_draw(self)
            }
        }
    }
    pub mod CA {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod Private {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        #[repr(C)]
        #[derive(Debug)]
        pub struct MetalDrawable {
            pub _base: root::NS::Referencing<root::MTL::Drawable>,
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2CA13MetalDrawable5layerEv"]
            pub fn MetalDrawable_layer(
                this: *const root::CA::MetalDrawable,
            ) -> *mut root::MetalLayer;
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK2CA13MetalDrawable7textureEv"]
            pub fn MetalDrawable_texture(
                this: *const root::CA::MetalDrawable,
            ) -> *mut root::MTL::Texture;
        }
        impl MetalDrawable {
            #[inline]
            pub unsafe fn layer(&self) -> *mut root::MetalLayer {
                MetalDrawable_layer(self)
            }
            #[inline]
            pub unsafe fn texture(&self) -> *mut root::MTL::Texture {
                MetalDrawable_texture(self)
            }
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct CGColorSpace {
        _unused: [u8; 0],
    }
    pub type CGColorSpaceRef = *mut root::CGColorSpace;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MethodSignature {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Coder {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MetalLayer {
        pub _address: u8,
    }
}
